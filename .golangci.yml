# This file contains all available configuration options
# with their default values.

version: "2"
# options for analysis running
run:
  go: "1.24.4"
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags: []



linters:
  default: all
  disable:
    - prealloc
    - errchkjson
    - contextcheck
    - rowserrcheck
    - sqlclosecheck
    - wastedassign
    - forbidigo
    - gocritic
    - revive
    - nonamedreturns
    - wrapcheck
    - varnamelen
    - paralleltest
    - nlreturn
    - testpackage
    - gochecknoglobals
    - wsl
    - ireturn
    - godox
    - cyclop
    - whitespace
    - nolintlint
    - unused
    - depguard
    - lll
    - exhaustruct
    - gochecknoinits
    - dupl
    - tagalign
    - funlen
    - gomoddirectives
    - nestif
    - testableexamples
    - gocyclo
    - gosmopolitan
    - perfsprint
    - inamedparam
    - interfacebloat
    - unparam
    - mnd
    - recvcheck
    - tagliatelle
    - goconst
    - gocognit
    - err113
    - funcorder
    

  # all available settings of specific linters
  settings:
    dogsled:
      # checks assignments with too many blank identifiers; default is 2
      max-blank-identifiers: 2
    dupl:
      # tokens count to trigger issue, 150 by default
      threshold: 100
    errcheck:
      # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
      # default is false: such cases aren't reported by default.
      check-type-assertions: false

      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
      # default is false: such cases aren't reported by default.
      check-blank: false

    funlen:
      lines: 60
      statements: 40
    gocognit:
      # minimal code complexity to report, 30 by default (but we recommend 10-20)
      min-complexity: 20
    goconst:
      # minimal length of string constant, 3 by default
      min-len: 3
      # minimal occurrences count to trigger, 3 by default
      min-occurrences: 3
    gocritic:
      # Which checks should be enabled; can't be combined with 'disabled-checks';
      # See https://go-critic.github.io/overview#checks-overview
      # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
      # By default list of stable checks is used.
      enabled-checks: []

      # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
      # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
      enabled-tags:
        - performance

      settings: # settings passed to gocritic
        captLocal: # must be valid enabled check name
          paramsOnly: true
        rangeValCopy:
          sizeThreshold: 32
    gocyclo:
      # minimal code complexity to report, 30 by default (but we recommend 10-20)
      min-complexity: 10
    godox:
      # report any comments starting with keywords, this is useful for TODO or FIXME comments that
      # might be left in the code accidentally and should be resolved before merging
      keywords: [] # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
    govet:
      # settings per analyzer
      settings:
        printf: # analyzer name, run `go tool vet help` to see all analyzers
          funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

      # enable or disable analyzers by name
      enable:
        - atomicalign
      disable:
        - shadow
      disable-all: false

    lll:
      # max line length, lines longer will be reported. Default is 120.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option
      line-length: 180
      # tab width in spaces. Default to 1.
      tab-width: 1
    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Default is to use a neutral variety of English.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      locale: US
    nakedret:
      # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
      max-func-lines: 30
    prealloc:
      # XXX: we don't recommend using this linter before doing performance profiling.
      # For most programs usage of prealloc will be a premature optimization.

      # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
      # True by default.
      simple: true
      range-loops: true # Report preallocation suggestions on range loops, true by default
      for-loops: false # Report preallocation suggestions on for loops, false by default
    unparam:
      # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
      # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      check-exported: false
    whitespace:
      multi-if: false # Enforces newlines (or comments) after every multi-line if statement
      multi-func: false # Enforces newlines (or comments) after every multi-line function signature
    wsl:
      # If true append is only allowed to be cuddled if appending value is
      # matching variables, fields or types on line above. Default is true.
      strict-append: true
      # Allow calls and assignments to be cuddled as long as the lines have any
      # matching variables, fields or types. Default is true.
      allow-assign-and-call: true
      # Allow multiline assignments to be cuddled. Default is true.
      allow-multiline-assign: true
      # Allow declarations (var) to be cuddled.
      allow-cuddle-declarations: true
      # Allow trailing comments in ending of blocks
      allow-trailing-comment: false
      # Force newlines in end of case at this limit (0 = never).
      force-case-trailing-whitespace: 0

  exclusions:
    # Excluding configuration per-path, per-linter, per-text and per-source
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go$
        linters:
          - noctx
          - sqlclosecheck
          - gocyclo
          - errcheck
          - dupl
          - gosec
          - unused
          - deadcode
          - exhaustruct
          - funlen
          - maintidx
          - cyclop
          - gocognit
          - unparam
          - containedctx
          - goconst
          - ineffassign
          - staticcheck
          - bodyclose
          - forcetypeassert
          - predeclared
          - testifylint
          - musttag
          - dupword
          - intrange
          - govet
          - errname
          - noinlineerr

      - path: _mock\.go$
        linters:
          - gofmt

      # Exclude some staticcheck messages
      - linters:
          - staticcheck
        text: "SA9003:"

      - linters:
          - staticcheck
        text: "SA4009:"

      - linters:
          - staticcheck
        text: "ST1001:"

      - linters:
          - staticcheck
        text: "QF1008:"

      - linters:
          - staticcheck
        text: "ST1005:"

      - linters:
          - stylecheck
        text: "ST1001:"

      - linters:
          - stylecheck
        text: "ST1003:"

      - linters:
          - stylecheck
        text: "ST1006:"

      - linters:
          - stylecheck
        text: "ST1016:"

      # Exclude lll issues for long lines with go:generate
      - linters:
          - lll
        source: "^//go:generate "

formatters:
  # Enable specific formatter.
  # Default: [] (uses standard Go formatting)
  enable:
    - gci
    - gofmt
    - gofumpt
    - goimports
    - golines
  settings:
    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 180
      # Length of a tabulation.
      # Default: 4
      tab-len: 8
      # Shorten single-line comments.
      # Default: false
      shorten-comments: true
      # Default: true
      reformat-tags: false
      # Split chained methods on the dots as opposed to the arguments.
      # Default: true
      chain-split-dots: false

issues:
  # make issues output unique by line, default is true
  uniq-by-line: true

  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Auto-fix enabled issues. Default is false.
  fix: true
