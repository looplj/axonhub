// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ak *APIKey) User(ctx context.Context) (*User, error) {
	result, err := ak.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ak.QueryUser().Only(ctx)
	}
	return result, err
}

func (ak *APIKey) Requests(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *RequestWhereInput,
) (*RequestConnection, error) {
	opts := []RequestPaginateOption{
		WithRequestFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := ak.Edges.totalCount[1][alias]
	if nodes, err := ak.NamedRequests(alias); err == nil || hasTotalCount {
		pager, err := newRequestPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RequestConnection{Edges: []*RequestEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return ak.QueryRequests().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Request) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUser().All(ctx)
	}
	return result, err
}

func (r *Request) APIKey(ctx context.Context) (result []*APIKey, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedAPIKey(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.APIKeyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryAPIKey().All(ctx)
	}
	return result, err
}

func (r *Request) Executions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *RequestExecutionWhereInput,
) (*RequestExecutionConnection, error) {
	opts := []RequestExecutionPaginateOption{
		WithRequestExecutionFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[2][alias]
	if nodes, err := r.NamedExecutions(alias); err == nil || hasTotalCount {
		pager, err := newRequestExecutionPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RequestExecutionConnection{Edges: []*RequestExecutionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryExecutions().Paginate(ctx, after, first, before, last, opts...)
}

func (re *RequestExecution) Request(ctx context.Context) (*Request, error) {
	result, err := re.Edges.RequestOrErr()
	if IsNotLoaded(err) {
		result, err = re.QueryRequest().Only(ctx)
	}
	return result, err
}

func (u *User) Requests(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *RequestWhereInput,
) (*RequestConnection, error) {
	opts := []RequestPaginateOption{
		WithRequestFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedRequests(alias); err == nil || hasTotalCount {
		pager, err := newRequestPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RequestConnection{Edges: []*RequestEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryRequests().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) APIKeys(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *APIKeyWhereInput,
) (*APIKeyConnection, error) {
	opts := []APIKeyPaginateOption{
		WithAPIKeyFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedAPIKeys(alias); err == nil || hasTotalCount {
		pager, err := newAPIKeyPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &APIKeyConnection{Edges: []*APIKeyEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryAPIKeys().Paginate(ctx, after, first, before, last, opts...)
}
