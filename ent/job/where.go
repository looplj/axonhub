// Code generated by ent, DO NOT EDIT.

package job

import (
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldOwnerID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContext, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldOwnerID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldType, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldContext, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
