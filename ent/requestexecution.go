// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/ent/channel"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/ent/requestexecution"
	"github.com/looplj/axonhub/objects"
)

// RequestExecution is the model entity for the RequestExecution schema.
type RequestExecution struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID int `json:"request_id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID int `json:"channel_id,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID string `json:"model_id,omitempty"`
	// RequestBody holds the value of the "request_body" field.
	RequestBody objects.JSONRawMessage `json:"request_body,omitempty"`
	// ResponseBody holds the value of the "response_body" field.
	ResponseBody objects.JSONRawMessage `json:"response_body,omitempty"`
	// ResponseChunks holds the value of the "response_chunks" field.
	ResponseChunks []objects.JSONRawMessage `json:"response_chunks,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage string `json:"error_message,omitempty"`
	// Status holds the value of the "status" field.
	Status requestexecution.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestExecutionQuery when eager-loading is set.
	Edges        RequestExecutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RequestExecutionEdges holds the relations/edges for other nodes in the graph.
type RequestExecutionEdges struct {
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestExecutionEdges) RequestOrErr() (*Request, error) {
	if e.Request != nil {
		return e.Request, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: request.Label}
	}
	return nil, &NotLoadedError{edge: "request"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestExecutionEdges) ChannelOrErr() (*Channel, error) {
	if e.Channel != nil {
		return e.Channel, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: channel.Label}
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequestExecution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requestexecution.FieldRequestBody, requestexecution.FieldResponseBody, requestexecution.FieldResponseChunks:
			values[i] = new([]byte)
		case requestexecution.FieldID, requestexecution.FieldUserID, requestexecution.FieldRequestID, requestexecution.FieldChannelID:
			values[i] = new(sql.NullInt64)
		case requestexecution.FieldModelID, requestexecution.FieldErrorMessage, requestexecution.FieldStatus:
			values[i] = new(sql.NullString)
		case requestexecution.FieldCreatedAt, requestexecution.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequestExecution fields.
func (re *RequestExecution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requestexecution.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			re.ID = int(value.Int64)
		case requestexecution.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				re.CreatedAt = value.Time
			}
		case requestexecution.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				re.UpdatedAt = value.Time
			}
		case requestexecution.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				re.UserID = int(value.Int64)
			}
		case requestexecution.FieldRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				re.RequestID = int(value.Int64)
			}
		case requestexecution.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				re.ChannelID = int(value.Int64)
			}
		case requestexecution.FieldModelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				re.ModelID = value.String
			}
		case requestexecution.FieldRequestBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &re.RequestBody); err != nil {
					return fmt.Errorf("unmarshal field request_body: %w", err)
				}
			}
		case requestexecution.FieldResponseBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &re.ResponseBody); err != nil {
					return fmt.Errorf("unmarshal field response_body: %w", err)
				}
			}
		case requestexecution.FieldResponseChunks:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_chunks", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &re.ResponseChunks); err != nil {
					return fmt.Errorf("unmarshal field response_chunks: %w", err)
				}
			}
		case requestexecution.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				re.ErrorMessage = value.String
			}
		case requestexecution.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				re.Status = requestexecution.Status(value.String)
			}
		default:
			re.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RequestExecution.
// This includes values selected through modifiers, order, etc.
func (re *RequestExecution) Value(name string) (ent.Value, error) {
	return re.selectValues.Get(name)
}

// QueryRequest queries the "request" edge of the RequestExecution entity.
func (re *RequestExecution) QueryRequest() *RequestQuery {
	return NewRequestExecutionClient(re.config).QueryRequest(re)
}

// QueryChannel queries the "channel" edge of the RequestExecution entity.
func (re *RequestExecution) QueryChannel() *ChannelQuery {
	return NewRequestExecutionClient(re.config).QueryChannel(re)
}

// Update returns a builder for updating this RequestExecution.
// Note that you need to call RequestExecution.Unwrap() before calling this method if this RequestExecution
// was returned from a transaction, and the transaction was committed or rolled back.
func (re *RequestExecution) Update() *RequestExecutionUpdateOne {
	return NewRequestExecutionClient(re.config).UpdateOne(re)
}

// Unwrap unwraps the RequestExecution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (re *RequestExecution) Unwrap() *RequestExecution {
	_tx, ok := re.config.driver.(*txDriver)
	if !ok {
		panic("ent: RequestExecution is not a transactional entity")
	}
	re.config.driver = _tx.drv
	return re
}

// String implements the fmt.Stringer.
func (re *RequestExecution) String() string {
	var builder strings.Builder
	builder.WriteString("RequestExecution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", re.ID))
	builder.WriteString("created_at=")
	builder.WriteString(re.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(re.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", re.UserID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", re.RequestID))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", re.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(re.ModelID)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(fmt.Sprintf("%v", re.RequestBody))
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(fmt.Sprintf("%v", re.ResponseBody))
	builder.WriteString(", ")
	builder.WriteString("response_chunks=")
	builder.WriteString(fmt.Sprintf("%v", re.ResponseChunks))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(re.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", re.Status))
	builder.WriteByte(')')
	return builder.String()
}

// RequestExecutions is a parsable slice of RequestExecution.
type RequestExecutions []*RequestExecution
