// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeInt},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "api_keys_by_user_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[3]},
			},
			{
				Name:    "api_keys_by_key",
				Unique:  true,
				Columns: []*schema.Column{APIKeysColumns[1]},
			},
		},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "owner_id", Type: field.TypeInt},
		{Name: "type", Type: field.TypeString},
		{Name: "context", Type: field.TypeString},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "jobs_by_owner_id_type",
				Unique:  true,
				Columns: []*schema.Column{JobsColumns[1], JobsColumns[2]},
			},
		},
	}
	// RequestsColumns holds the columns for the "requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeString},
		{Name: "request_body", Type: field.TypeString},
		{Name: "response_body", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "completed", "failed"}},
		{Name: "deleted_at", Type: field.TypeInt64, Default: 0},
	}
	// RequestsTable holds the schema information for the "requests" table.
	RequestsTable = &schema.Table{
		Name:       "requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "requests_by_user_id",
				Unique:  true,
				Columns: []*schema.Column{RequestsColumns[1]},
			},
		},
	}
	// RequestExecutionsColumns holds the columns for the "request_executions" table.
	RequestExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "request_id", Type: field.TypeInt},
	}
	// RequestExecutionsTable holds the schema information for the "request_executions" table.
	RequestExecutionsTable = &schema.Table{
		Name:       "request_executions",
		Columns:    RequestExecutionsColumns,
		PrimaryKey: []*schema.Column{RequestExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "request_executions_requests_executions",
				Columns:    []*schema.Column{RequestExecutionsColumns[2]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "request_executions_by_request_id",
				Unique:  true,
				Columns: []*schema.Column{RequestExecutionsColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "email", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// APIKeyRequestsColumns holds the columns for the "api_key_requests" table.
	APIKeyRequestsColumns = []*schema.Column{
		{Name: "api_key_id", Type: field.TypeInt},
		{Name: "request_id", Type: field.TypeInt},
	}
	// APIKeyRequestsTable holds the schema information for the "api_key_requests" table.
	APIKeyRequestsTable = &schema.Table{
		Name:       "api_key_requests",
		Columns:    APIKeyRequestsColumns,
		PrimaryKey: []*schema.Column{APIKeyRequestsColumns[0], APIKeyRequestsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_key_requests_api_key_id",
				Columns:    []*schema.Column{APIKeyRequestsColumns[0]},
				RefColumns: []*schema.Column{APIKeysColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "api_key_requests_request_id",
				Columns:    []*schema.Column{APIKeyRequestsColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRequestsColumns holds the columns for the "user_requests" table.
	UserRequestsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "request_id", Type: field.TypeInt},
	}
	// UserRequestsTable holds the schema information for the "user_requests" table.
	UserRequestsTable = &schema.Table{
		Name:       "user_requests",
		Columns:    UserRequestsColumns,
		PrimaryKey: []*schema.Column{UserRequestsColumns[0], UserRequestsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_requests_user_id",
				Columns:    []*schema.Column{UserRequestsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_requests_request_id",
				Columns:    []*schema.Column{UserRequestsColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		JobsTable,
		RequestsTable,
		RequestExecutionsTable,
		UsersTable,
		APIKeyRequestsTable,
		UserRequestsTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	RequestExecutionsTable.ForeignKeys[0].RefTable = RequestsTable
	APIKeyRequestsTable.ForeignKeys[0].RefTable = APIKeysTable
	APIKeyRequestsTable.ForeignKeys[1].RefTable = RequestsTable
	UserRequestsTable.ForeignKeys[0].RefTable = UsersTable
	UserRequestsTable.ForeignKeys[1].RefTable = RequestsTable
}
