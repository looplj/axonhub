// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/looplj/axonhub/ent/channel"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/objects"
)

// CreateAPIKeyInput represents a mutation input for creating apikeys.
type CreateAPIKeyInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Key       string
	Name      string
	UserID    int
}

// Mutate applies the CreateAPIKeyInput on the APIKeyMutation builder.
func (i *CreateAPIKeyInput) Mutate(m *APIKeyMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetKey(i.Key)
	m.SetName(i.Name)
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateAPIKeyInput on the APIKeyCreate builder.
func (c *APIKeyCreate) SetInput(i CreateAPIKeyInput) *APIKeyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAPIKeyInput represents a mutation input for updating apikeys.
type UpdateAPIKeyInput struct {
	UpdatedAt *time.Time
	Name      *string
}

// Mutate applies the UpdateAPIKeyInput on the APIKeyMutation builder.
func (i *UpdateAPIKeyInput) Mutate(m *APIKeyMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateAPIKeyInput on the APIKeyUpdate builder.
func (c *APIKeyUpdate) SetInput(i UpdateAPIKeyInput) *APIKeyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAPIKeyInput on the APIKeyUpdateOne builder.
func (c *APIKeyUpdateOne) SetInput(i UpdateAPIKeyInput) *APIKeyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateChannelInput represents a mutation input for creating channels.
type CreateChannelInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Type             channel.Type
	BaseURL          string
	Name             string
	APIKey           string
	SupportedModels  []string
	DefaultTestModel string
	Settings         *objects.ChannelSettings
}

// Mutate applies the CreateChannelInput on the ChannelMutation builder.
func (i *CreateChannelInput) Mutate(m *ChannelMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetType(i.Type)
	m.SetBaseURL(i.BaseURL)
	m.SetName(i.Name)
	m.SetAPIKey(i.APIKey)
	if v := i.SupportedModels; v != nil {
		m.SetSupportedModels(v)
	}
	m.SetDefaultTestModel(i.DefaultTestModel)
	if v := i.Settings; v != nil {
		m.SetSettings(v)
	}
}

// SetInput applies the change-set in the CreateChannelInput on the ChannelCreate builder.
func (c *ChannelCreate) SetInput(i CreateChannelInput) *ChannelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateChannelInput represents a mutation input for updating channels.
type UpdateChannelInput struct {
	UpdatedAt             *time.Time
	BaseURL               *string
	Name                  *string
	APIKey                *string
	SupportedModels       []string
	AppendSupportedModels []string
	DefaultTestModel      *string
	Settings              *objects.ChannelSettings
}

// Mutate applies the UpdateChannelInput on the ChannelMutation builder.
func (i *UpdateChannelInput) Mutate(m *ChannelMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.BaseURL; v != nil {
		m.SetBaseURL(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.SupportedModels; v != nil {
		m.SetSupportedModels(v)
	}
	if i.AppendSupportedModels != nil {
		m.AppendSupportedModels(i.SupportedModels)
	}
	if v := i.DefaultTestModel; v != nil {
		m.SetDefaultTestModel(*v)
	}
	if v := i.Settings; v != nil {
		m.SetSettings(v)
	}
}

// SetInput applies the change-set in the UpdateChannelInput on the ChannelUpdate builder.
func (c *ChannelUpdate) SetInput(i UpdateChannelInput) *ChannelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateChannelInput on the ChannelUpdateOne builder.
func (c *ChannelUpdateOne) SetInput(i UpdateChannelInput) *ChannelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRequestInput represents a mutation input for creating requests.
type CreateRequestInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	RequestBody  objects.JSONRawMessage
	ResponseBody objects.JSONRawMessage
	Status       request.Status
	UserID       int
	APIKeyID     int
}

// Mutate applies the CreateRequestInput on the RequestMutation builder.
func (i *CreateRequestInput) Mutate(m *RequestMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.RequestBody; v != nil {
		m.SetRequestBody(v)
	}
	if v := i.ResponseBody; v != nil {
		m.SetResponseBody(v)
	}
	m.SetStatus(i.Status)
	m.SetUserID(i.UserID)
	m.SetAPIKeyID(i.APIKeyID)
}

// SetInput applies the change-set in the CreateRequestInput on the RequestCreate builder.
func (c *RequestCreate) SetInput(i CreateRequestInput) *RequestCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRequestInput represents a mutation input for updating requests.
type UpdateRequestInput struct {
	UpdatedAt          *time.Time
	ClearResponseBody  bool
	ResponseBody       objects.JSONRawMessage
	AppendResponseBody objects.JSONRawMessage
	Status             *request.Status
}

// Mutate applies the UpdateRequestInput on the RequestMutation builder.
func (i *UpdateRequestInput) Mutate(m *RequestMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearResponseBody {
		m.ClearResponseBody()
	}
	if v := i.ResponseBody; v != nil {
		m.SetResponseBody(v)
	}
	if i.AppendResponseBody != nil {
		m.AppendResponseBody(i.ResponseBody)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdate builder.
func (c *RequestUpdate) SetInput(i UpdateRequestInput) *RequestUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdateOne builder.
func (c *RequestUpdateOne) SetInput(i UpdateRequestInput) *RequestUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Email      string
	Name       string
	RequestIDs []int
	APIKeyIDs  []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	m.SetName(i.Name)
	if v := i.RequestIDs; len(v) > 0 {
		m.AddRequestIDs(v...)
	}
	if v := i.APIKeyIDs; len(v) > 0 {
		m.AddAPIKeyIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt        *time.Time
	Email            *string
	Name             *string
	ClearRequests    bool
	AddRequestIDs    []int
	RemoveRequestIDs []int
	ClearAPIKeys     bool
	AddAPIKeyIDs     []int
	RemoveAPIKeyIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearRequests {
		m.ClearRequests()
	}
	if v := i.AddRequestIDs; len(v) > 0 {
		m.AddRequestIDs(v...)
	}
	if v := i.RemoveRequestIDs; len(v) > 0 {
		m.RemoveRequestIDs(v...)
	}
	if i.ClearAPIKeys {
		m.ClearAPIKeys()
	}
	if v := i.AddAPIKeyIDs; len(v) > 0 {
		m.AddAPIKeyIDs(v...)
	}
	if v := i.RemoveAPIKeyIDs; len(v) > 0 {
		m.RemoveAPIKeyIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
