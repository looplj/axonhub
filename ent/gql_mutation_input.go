// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/looplj/axonhub/ent/request"
)

// CreateRequestInput represents a mutation input for creating requests.
type CreateRequestInput struct {
	RequestBody  string
	ResponseBody string
	Status       request.Status
	DeletedAt    *int64
	UserID       int64
	APIKeyID     int64
	ExecutionIDs []int64
}

// Mutate applies the CreateRequestInput on the RequestMutation builder.
func (i *CreateRequestInput) Mutate(m *RequestMutation) {
	m.SetRequestBody(i.RequestBody)
	m.SetResponseBody(i.ResponseBody)
	m.SetStatus(i.Status)
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetAPIKeyID(i.APIKeyID)
	if v := i.ExecutionIDs; len(v) > 0 {
		m.AddExecutionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRequestInput on the RequestCreate builder.
func (c *RequestCreate) SetInput(i CreateRequestInput) *RequestCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRequestInput represents a mutation input for updating requests.
type UpdateRequestInput struct {
	ResponseBody       *string
	Status             *request.Status
	DeletedAt          *int64
	ClearExecutions    bool
	AddExecutionIDs    []int64
	RemoveExecutionIDs []int64
}

// Mutate applies the UpdateRequestInput on the RequestMutation builder.
func (i *UpdateRequestInput) Mutate(m *RequestMutation) {
	if v := i.ResponseBody; v != nil {
		m.SetResponseBody(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearExecutions {
		m.ClearExecutions()
	}
	if v := i.AddExecutionIDs; len(v) > 0 {
		m.AddExecutionIDs(v...)
	}
	if v := i.RemoveExecutionIDs; len(v) > 0 {
		m.RemoveExecutionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdate builder.
func (c *RequestUpdate) SetInput(i UpdateRequestInput) *RequestUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdateOne builder.
func (c *RequestUpdateOne) SetInput(i UpdateRequestInput) *RequestUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
