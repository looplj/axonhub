// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/ent/channel"
	"github.com/looplj/axonhub/ent/predicate"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/objects"
)

// ChannelUpdate is the builder for updating Channel entities.
type ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *ChannelMutation
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cu *ChannelUpdate) Where(ps ...predicate.Channel) *ChannelUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetBaseURL sets the "base_url" field.
func (cu *ChannelUpdate) SetBaseURL(s string) *ChannelUpdate {
	cu.mutation.SetBaseURL(s)
	return cu
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableBaseURL(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetBaseURL(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ChannelUpdate) SetName(s string) *ChannelUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableName(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetAPIKey sets the "api_key" field.
func (cu *ChannelUpdate) SetAPIKey(s string) *ChannelUpdate {
	cu.mutation.SetAPIKey(s)
	return cu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableAPIKey(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetAPIKey(*s)
	}
	return cu
}

// SetSupportedModels sets the "supported_models" field.
func (cu *ChannelUpdate) SetSupportedModels(s []string) *ChannelUpdate {
	cu.mutation.SetSupportedModels(s)
	return cu
}

// AppendSupportedModels appends s to the "supported_models" field.
func (cu *ChannelUpdate) AppendSupportedModels(s []string) *ChannelUpdate {
	cu.mutation.AppendSupportedModels(s)
	return cu
}

// SetDefaultTestModel sets the "default_test_model" field.
func (cu *ChannelUpdate) SetDefaultTestModel(s string) *ChannelUpdate {
	cu.mutation.SetDefaultTestModel(s)
	return cu
}

// SetNillableDefaultTestModel sets the "default_test_model" field if the given value is not nil.
func (cu *ChannelUpdate) SetNillableDefaultTestModel(s *string) *ChannelUpdate {
	if s != nil {
		cu.SetDefaultTestModel(*s)
	}
	return cu
}

// SetSettings sets the "settings" field.
func (cu *ChannelUpdate) SetSettings(os *objects.ChannelSettings) *ChannelUpdate {
	cu.mutation.SetSettings(os)
	return cu
}

// AddRequestIDs adds the "requests" edge to the Request entity by IDs.
func (cu *ChannelUpdate) AddRequestIDs(ids ...int) *ChannelUpdate {
	cu.mutation.AddRequestIDs(ids...)
	return cu
}

// AddRequests adds the "requests" edges to the Request entity.
func (cu *ChannelUpdate) AddRequests(r ...*Request) *ChannelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRequestIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cu *ChannelUpdate) Mutation() *ChannelMutation {
	return cu.mutation
}

// ClearRequests clears all "requests" edges to the Request entity.
func (cu *ChannelUpdate) ClearRequests() *ChannelUpdate {
	cu.mutation.ClearRequests()
	return cu
}

// RemoveRequestIDs removes the "requests" edge to Request entities by IDs.
func (cu *ChannelUpdate) RemoveRequestIDs(ids ...int) *ChannelUpdate {
	cu.mutation.RemoveRequestIDs(ids...)
	return cu
}

// RemoveRequests removes "requests" edges to Request entities.
func (cu *ChannelUpdate) RemoveRequests(r ...*Request) *ChannelUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRequestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChannelUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChannelUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChannelUpdate) check() error {
	if v, ok := cu.mutation.APIKey(); ok {
		if err := channel.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "Channel.api_key": %w`, err)}
		}
	}
	return nil
}

func (cu *ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cu.mutation.SupportedModels(); ok {
		_spec.SetField(channel.FieldSupportedModels, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedSupportedModels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, channel.FieldSupportedModels, value)
		})
	}
	if value, ok := cu.mutation.DefaultTestModel(); ok {
		_spec.SetField(channel.FieldDefaultTestModel, field.TypeString, value)
	}
	if value, ok := cu.mutation.Settings(); ok {
		_spec.SetField(channel.FieldSettings, field.TypeJSON, value)
	}
	if cu.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRequestsIDs(); len(nodes) > 0 && !cu.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChannelUpdateOne is the builder for updating a single Channel entity.
type ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChannelMutation
}

// SetBaseURL sets the "base_url" field.
func (cuo *ChannelUpdateOne) SetBaseURL(s string) *ChannelUpdateOne {
	cuo.mutation.SetBaseURL(s)
	return cuo
}

// SetNillableBaseURL sets the "base_url" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableBaseURL(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetBaseURL(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ChannelUpdateOne) SetName(s string) *ChannelUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableName(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetAPIKey sets the "api_key" field.
func (cuo *ChannelUpdateOne) SetAPIKey(s string) *ChannelUpdateOne {
	cuo.mutation.SetAPIKey(s)
	return cuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableAPIKey(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetAPIKey(*s)
	}
	return cuo
}

// SetSupportedModels sets the "supported_models" field.
func (cuo *ChannelUpdateOne) SetSupportedModels(s []string) *ChannelUpdateOne {
	cuo.mutation.SetSupportedModels(s)
	return cuo
}

// AppendSupportedModels appends s to the "supported_models" field.
func (cuo *ChannelUpdateOne) AppendSupportedModels(s []string) *ChannelUpdateOne {
	cuo.mutation.AppendSupportedModels(s)
	return cuo
}

// SetDefaultTestModel sets the "default_test_model" field.
func (cuo *ChannelUpdateOne) SetDefaultTestModel(s string) *ChannelUpdateOne {
	cuo.mutation.SetDefaultTestModel(s)
	return cuo
}

// SetNillableDefaultTestModel sets the "default_test_model" field if the given value is not nil.
func (cuo *ChannelUpdateOne) SetNillableDefaultTestModel(s *string) *ChannelUpdateOne {
	if s != nil {
		cuo.SetDefaultTestModel(*s)
	}
	return cuo
}

// SetSettings sets the "settings" field.
func (cuo *ChannelUpdateOne) SetSettings(os *objects.ChannelSettings) *ChannelUpdateOne {
	cuo.mutation.SetSettings(os)
	return cuo
}

// AddRequestIDs adds the "requests" edge to the Request entity by IDs.
func (cuo *ChannelUpdateOne) AddRequestIDs(ids ...int) *ChannelUpdateOne {
	cuo.mutation.AddRequestIDs(ids...)
	return cuo
}

// AddRequests adds the "requests" edges to the Request entity.
func (cuo *ChannelUpdateOne) AddRequests(r ...*Request) *ChannelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRequestIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cuo *ChannelUpdateOne) Mutation() *ChannelMutation {
	return cuo.mutation
}

// ClearRequests clears all "requests" edges to the Request entity.
func (cuo *ChannelUpdateOne) ClearRequests() *ChannelUpdateOne {
	cuo.mutation.ClearRequests()
	return cuo
}

// RemoveRequestIDs removes the "requests" edge to Request entities by IDs.
func (cuo *ChannelUpdateOne) RemoveRequestIDs(ids ...int) *ChannelUpdateOne {
	cuo.mutation.RemoveRequestIDs(ids...)
	return cuo
}

// RemoveRequests removes "requests" edges to Request entities.
func (cuo *ChannelUpdateOne) RemoveRequests(r ...*Request) *ChannelUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRequestIDs(ids...)
}

// Where appends a list predicates to the ChannelUpdate builder.
func (cuo *ChannelUpdateOne) Where(ps ...predicate.Channel) *ChannelUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChannelUpdateOne) Select(field string, fields ...string) *ChannelUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Channel entity.
func (cuo *ChannelUpdateOne) Save(ctx context.Context) (*Channel, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChannelUpdateOne) SaveX(ctx context.Context) *Channel {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChannelUpdateOne) check() error {
	if v, ok := cuo.mutation.APIKey(); ok {
		if err := channel.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "Channel.api_key": %w`, err)}
		}
	}
	return nil
}

func (cuo *ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Channel, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(channel.Table, channel.Columns, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, channel.FieldID)
		for _, f := range fields {
			if !channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SupportedModels(); ok {
		_spec.SetField(channel.FieldSupportedModels, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedSupportedModels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, channel.FieldSupportedModels, value)
		})
	}
	if value, ok := cuo.mutation.DefaultTestModel(); ok {
		_spec.SetField(channel.FieldDefaultTestModel, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Settings(); ok {
		_spec.SetField(channel.FieldSettings, field.TypeJSON, value)
	}
	if cuo.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRequestsIDs(); len(nodes) > 0 && !cuo.mutation.RequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Channel{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
