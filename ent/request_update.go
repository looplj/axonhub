// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/ent/predicate"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/ent/requestexecution"
	"github.com/looplj/axonhub/objects"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RequestUpdate) SetUpdatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetResponseBody sets the "response_body" field.
func (ru *RequestUpdate) SetResponseBody(orm objects.JSONRawMessage) *RequestUpdate {
	ru.mutation.SetResponseBody(orm)
	return ru
}

// AppendResponseBody appends orm to the "response_body" field.
func (ru *RequestUpdate) AppendResponseBody(orm objects.JSONRawMessage) *RequestUpdate {
	ru.mutation.AppendResponseBody(orm)
	return ru
}

// ClearResponseBody clears the value of the "response_body" field.
func (ru *RequestUpdate) ClearResponseBody() *RequestUpdate {
	ru.mutation.ClearResponseBody()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RequestUpdate) SetStatus(r request.Status) *RequestUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableStatus(r *request.Status) *RequestUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// AddExecutionIDs adds the "executions" edge to the RequestExecution entity by IDs.
func (ru *RequestUpdate) AddExecutionIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddExecutionIDs(ids...)
	return ru
}

// AddExecutions adds the "executions" edges to the RequestExecution entity.
func (ru *RequestUpdate) AddExecutions(r ...*RequestExecution) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddExecutionIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// ClearExecutions clears all "executions" edges to the RequestExecution entity.
func (ru *RequestUpdate) ClearExecutions() *RequestUpdate {
	ru.mutation.ClearExecutions()
	return ru
}

// RemoveExecutionIDs removes the "executions" edge to RequestExecution entities by IDs.
func (ru *RequestUpdate) RemoveExecutionIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveExecutionIDs(ids...)
	return ru
}

// RemoveExecutions removes "executions" edges to RequestExecution entities.
func (ru *RequestUpdate) RemoveExecutions(r ...*RequestExecution) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveExecutionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RequestUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RequestUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := request.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Request.status": %w`, err)}
		}
	}
	if ru.mutation.UserCleared() && len(ru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Request.user"`)
	}
	return nil
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.ResponseBody(); ok {
		_spec.SetField(request.FieldResponseBody, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedResponseBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldResponseBody, value)
		})
	}
	if ru.mutation.ResponseBodyCleared() {
		_spec.ClearField(request.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(request.FieldStatus, field.TypeEnum, value)
	}
	if ru.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !ru.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RequestUpdateOne) SetUpdatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetResponseBody sets the "response_body" field.
func (ruo *RequestUpdateOne) SetResponseBody(orm objects.JSONRawMessage) *RequestUpdateOne {
	ruo.mutation.SetResponseBody(orm)
	return ruo
}

// AppendResponseBody appends orm to the "response_body" field.
func (ruo *RequestUpdateOne) AppendResponseBody(orm objects.JSONRawMessage) *RequestUpdateOne {
	ruo.mutation.AppendResponseBody(orm)
	return ruo
}

// ClearResponseBody clears the value of the "response_body" field.
func (ruo *RequestUpdateOne) ClearResponseBody() *RequestUpdateOne {
	ruo.mutation.ClearResponseBody()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RequestUpdateOne) SetStatus(r request.Status) *RequestUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableStatus(r *request.Status) *RequestUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// AddExecutionIDs adds the "executions" edge to the RequestExecution entity by IDs.
func (ruo *RequestUpdateOne) AddExecutionIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddExecutionIDs(ids...)
	return ruo
}

// AddExecutions adds the "executions" edges to the RequestExecution entity.
func (ruo *RequestUpdateOne) AddExecutions(r ...*RequestExecution) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddExecutionIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// ClearExecutions clears all "executions" edges to the RequestExecution entity.
func (ruo *RequestUpdateOne) ClearExecutions() *RequestUpdateOne {
	ruo.mutation.ClearExecutions()
	return ruo
}

// RemoveExecutionIDs removes the "executions" edge to RequestExecution entities by IDs.
func (ruo *RequestUpdateOne) RemoveExecutionIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveExecutionIDs(ids...)
	return ruo
}

// RemoveExecutions removes "executions" edges to RequestExecution entities.
func (ruo *RequestUpdateOne) RemoveExecutions(r ...*RequestExecution) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveExecutionIDs(ids...)
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RequestUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := request.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RequestUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := request.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Request.status": %w`, err)}
		}
	}
	if ruo.mutation.UserCleared() && len(ruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Request.user"`)
	}
	return nil
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.ResponseBody(); ok {
		_spec.SetField(request.FieldResponseBody, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedResponseBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldResponseBody, value)
		})
	}
	if ruo.mutation.ResponseBodyCleared() {
		_spec.ClearField(request.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(request.FieldStatus, field.TypeEnum, value)
	}
	if ruo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedExecutionsIDs(); len(nodes) > 0 && !ruo.mutation.ExecutionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
