// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/ent/predicate"
	"github.com/looplj/axonhub/ent/requestexecution"
	"github.com/looplj/axonhub/objects"
)

// RequestExecutionUpdate is the builder for updating RequestExecution entities.
type RequestExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *RequestExecutionMutation
}

// Where appends a list predicates to the RequestExecutionUpdate builder.
func (reu *RequestExecutionUpdate) Where(ps ...predicate.RequestExecution) *RequestExecutionUpdate {
	reu.mutation.Where(ps...)
	return reu
}

// SetUpdatedAt sets the "updated_at" field.
func (reu *RequestExecutionUpdate) SetUpdatedAt(t time.Time) *RequestExecutionUpdate {
	reu.mutation.SetUpdatedAt(t)
	return reu
}

// SetResponseBody sets the "response_body" field.
func (reu *RequestExecutionUpdate) SetResponseBody(orm objects.JSONRawMessage) *RequestExecutionUpdate {
	reu.mutation.SetResponseBody(orm)
	return reu
}

// AppendResponseBody appends orm to the "response_body" field.
func (reu *RequestExecutionUpdate) AppendResponseBody(orm objects.JSONRawMessage) *RequestExecutionUpdate {
	reu.mutation.AppendResponseBody(orm)
	return reu
}

// ClearResponseBody clears the value of the "response_body" field.
func (reu *RequestExecutionUpdate) ClearResponseBody() *RequestExecutionUpdate {
	reu.mutation.ClearResponseBody()
	return reu
}

// SetResponseChunks sets the "response_chunks" field.
func (reu *RequestExecutionUpdate) SetResponseChunks(orm []objects.JSONRawMessage) *RequestExecutionUpdate {
	reu.mutation.SetResponseChunks(orm)
	return reu
}

// AppendResponseChunks appends orm to the "response_chunks" field.
func (reu *RequestExecutionUpdate) AppendResponseChunks(orm []objects.JSONRawMessage) *RequestExecutionUpdate {
	reu.mutation.AppendResponseChunks(orm)
	return reu
}

// ClearResponseChunks clears the value of the "response_chunks" field.
func (reu *RequestExecutionUpdate) ClearResponseChunks() *RequestExecutionUpdate {
	reu.mutation.ClearResponseChunks()
	return reu
}

// SetErrorMessage sets the "error_message" field.
func (reu *RequestExecutionUpdate) SetErrorMessage(s string) *RequestExecutionUpdate {
	reu.mutation.SetErrorMessage(s)
	return reu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (reu *RequestExecutionUpdate) SetNillableErrorMessage(s *string) *RequestExecutionUpdate {
	if s != nil {
		reu.SetErrorMessage(*s)
	}
	return reu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (reu *RequestExecutionUpdate) ClearErrorMessage() *RequestExecutionUpdate {
	reu.mutation.ClearErrorMessage()
	return reu
}

// SetStatus sets the "status" field.
func (reu *RequestExecutionUpdate) SetStatus(r requestexecution.Status) *RequestExecutionUpdate {
	reu.mutation.SetStatus(r)
	return reu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (reu *RequestExecutionUpdate) SetNillableStatus(r *requestexecution.Status) *RequestExecutionUpdate {
	if r != nil {
		reu.SetStatus(*r)
	}
	return reu
}

// Mutation returns the RequestExecutionMutation object of the builder.
func (reu *RequestExecutionUpdate) Mutation() *RequestExecutionMutation {
	return reu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (reu *RequestExecutionUpdate) Save(ctx context.Context) (int, error) {
	reu.defaults()
	return withHooks(ctx, reu.sqlSave, reu.mutation, reu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reu *RequestExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := reu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (reu *RequestExecutionUpdate) Exec(ctx context.Context) error {
	_, err := reu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reu *RequestExecutionUpdate) ExecX(ctx context.Context) {
	if err := reu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reu *RequestExecutionUpdate) defaults() {
	if _, ok := reu.mutation.UpdatedAt(); !ok {
		v := requestexecution.UpdateDefaultUpdatedAt()
		reu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reu *RequestExecutionUpdate) check() error {
	if v, ok := reu.mutation.Status(); ok {
		if err := requestexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RequestExecution.status": %w`, err)}
		}
	}
	if reu.mutation.RequestCleared() && len(reu.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RequestExecution.request"`)
	}
	return nil
}

func (reu *RequestExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := reu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(requestexecution.Table, requestexecution.Columns, sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt))
	if ps := reu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reu.mutation.UpdatedAt(); ok {
		_spec.SetField(requestexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := reu.mutation.ResponseBody(); ok {
		_spec.SetField(requestexecution.FieldResponseBody, field.TypeJSON, value)
	}
	if value, ok := reu.mutation.AppendedResponseBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, requestexecution.FieldResponseBody, value)
		})
	}
	if reu.mutation.ResponseBodyCleared() {
		_spec.ClearField(requestexecution.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := reu.mutation.ResponseChunks(); ok {
		_spec.SetField(requestexecution.FieldResponseChunks, field.TypeJSON, value)
	}
	if value, ok := reu.mutation.AppendedResponseChunks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, requestexecution.FieldResponseChunks, value)
		})
	}
	if reu.mutation.ResponseChunksCleared() {
		_spec.ClearField(requestexecution.FieldResponseChunks, field.TypeJSON)
	}
	if value, ok := reu.mutation.ErrorMessage(); ok {
		_spec.SetField(requestexecution.FieldErrorMessage, field.TypeString, value)
	}
	if reu.mutation.ErrorMessageCleared() {
		_spec.ClearField(requestexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := reu.mutation.Status(); ok {
		_spec.SetField(requestexecution.FieldStatus, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, reu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	reu.mutation.done = true
	return n, nil
}

// RequestExecutionUpdateOne is the builder for updating a single RequestExecution entity.
type RequestExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestExecutionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (reuo *RequestExecutionUpdateOne) SetUpdatedAt(t time.Time) *RequestExecutionUpdateOne {
	reuo.mutation.SetUpdatedAt(t)
	return reuo
}

// SetResponseBody sets the "response_body" field.
func (reuo *RequestExecutionUpdateOne) SetResponseBody(orm objects.JSONRawMessage) *RequestExecutionUpdateOne {
	reuo.mutation.SetResponseBody(orm)
	return reuo
}

// AppendResponseBody appends orm to the "response_body" field.
func (reuo *RequestExecutionUpdateOne) AppendResponseBody(orm objects.JSONRawMessage) *RequestExecutionUpdateOne {
	reuo.mutation.AppendResponseBody(orm)
	return reuo
}

// ClearResponseBody clears the value of the "response_body" field.
func (reuo *RequestExecutionUpdateOne) ClearResponseBody() *RequestExecutionUpdateOne {
	reuo.mutation.ClearResponseBody()
	return reuo
}

// SetResponseChunks sets the "response_chunks" field.
func (reuo *RequestExecutionUpdateOne) SetResponseChunks(orm []objects.JSONRawMessage) *RequestExecutionUpdateOne {
	reuo.mutation.SetResponseChunks(orm)
	return reuo
}

// AppendResponseChunks appends orm to the "response_chunks" field.
func (reuo *RequestExecutionUpdateOne) AppendResponseChunks(orm []objects.JSONRawMessage) *RequestExecutionUpdateOne {
	reuo.mutation.AppendResponseChunks(orm)
	return reuo
}

// ClearResponseChunks clears the value of the "response_chunks" field.
func (reuo *RequestExecutionUpdateOne) ClearResponseChunks() *RequestExecutionUpdateOne {
	reuo.mutation.ClearResponseChunks()
	return reuo
}

// SetErrorMessage sets the "error_message" field.
func (reuo *RequestExecutionUpdateOne) SetErrorMessage(s string) *RequestExecutionUpdateOne {
	reuo.mutation.SetErrorMessage(s)
	return reuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (reuo *RequestExecutionUpdateOne) SetNillableErrorMessage(s *string) *RequestExecutionUpdateOne {
	if s != nil {
		reuo.SetErrorMessage(*s)
	}
	return reuo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (reuo *RequestExecutionUpdateOne) ClearErrorMessage() *RequestExecutionUpdateOne {
	reuo.mutation.ClearErrorMessage()
	return reuo
}

// SetStatus sets the "status" field.
func (reuo *RequestExecutionUpdateOne) SetStatus(r requestexecution.Status) *RequestExecutionUpdateOne {
	reuo.mutation.SetStatus(r)
	return reuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (reuo *RequestExecutionUpdateOne) SetNillableStatus(r *requestexecution.Status) *RequestExecutionUpdateOne {
	if r != nil {
		reuo.SetStatus(*r)
	}
	return reuo
}

// Mutation returns the RequestExecutionMutation object of the builder.
func (reuo *RequestExecutionUpdateOne) Mutation() *RequestExecutionMutation {
	return reuo.mutation
}

// Where appends a list predicates to the RequestExecutionUpdate builder.
func (reuo *RequestExecutionUpdateOne) Where(ps ...predicate.RequestExecution) *RequestExecutionUpdateOne {
	reuo.mutation.Where(ps...)
	return reuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (reuo *RequestExecutionUpdateOne) Select(field string, fields ...string) *RequestExecutionUpdateOne {
	reuo.fields = append([]string{field}, fields...)
	return reuo
}

// Save executes the query and returns the updated RequestExecution entity.
func (reuo *RequestExecutionUpdateOne) Save(ctx context.Context) (*RequestExecution, error) {
	reuo.defaults()
	return withHooks(ctx, reuo.sqlSave, reuo.mutation, reuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (reuo *RequestExecutionUpdateOne) SaveX(ctx context.Context) *RequestExecution {
	node, err := reuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (reuo *RequestExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := reuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (reuo *RequestExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := reuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (reuo *RequestExecutionUpdateOne) defaults() {
	if _, ok := reuo.mutation.UpdatedAt(); !ok {
		v := requestexecution.UpdateDefaultUpdatedAt()
		reuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (reuo *RequestExecutionUpdateOne) check() error {
	if v, ok := reuo.mutation.Status(); ok {
		if err := requestexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RequestExecution.status": %w`, err)}
		}
	}
	if reuo.mutation.RequestCleared() && len(reuo.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RequestExecution.request"`)
	}
	return nil
}

func (reuo *RequestExecutionUpdateOne) sqlSave(ctx context.Context) (_node *RequestExecution, err error) {
	if err := reuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(requestexecution.Table, requestexecution.Columns, sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt))
	id, ok := reuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RequestExecution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := reuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestexecution.FieldID)
		for _, f := range fields {
			if !requestexecution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requestexecution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := reuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := reuo.mutation.UpdatedAt(); ok {
		_spec.SetField(requestexecution.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := reuo.mutation.ResponseBody(); ok {
		_spec.SetField(requestexecution.FieldResponseBody, field.TypeJSON, value)
	}
	if value, ok := reuo.mutation.AppendedResponseBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, requestexecution.FieldResponseBody, value)
		})
	}
	if reuo.mutation.ResponseBodyCleared() {
		_spec.ClearField(requestexecution.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := reuo.mutation.ResponseChunks(); ok {
		_spec.SetField(requestexecution.FieldResponseChunks, field.TypeJSON, value)
	}
	if value, ok := reuo.mutation.AppendedResponseChunks(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, requestexecution.FieldResponseChunks, value)
		})
	}
	if reuo.mutation.ResponseChunksCleared() {
		_spec.ClearField(requestexecution.FieldResponseChunks, field.TypeJSON)
	}
	if value, ok := reuo.mutation.ErrorMessage(); ok {
		_spec.SetField(requestexecution.FieldErrorMessage, field.TypeString, value)
	}
	if reuo.mutation.ErrorMessageCleared() {
		_spec.ClearField(requestexecution.FieldErrorMessage, field.TypeString)
	}
	if value, ok := reuo.mutation.Status(); ok {
		_spec.SetField(requestexecution.FieldStatus, field.TypeEnum, value)
	}
	_node = &RequestExecution{config: reuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, reuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestexecution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	reuo.mutation.done = true
	return _node, nil
}
