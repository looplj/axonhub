// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/ent/channel"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/objects"
)

// ChannelCreate is the builder for creating a Channel entity.
type ChannelCreate struct {
	config
	mutation *ChannelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChannelCreate) SetCreatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableCreatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChannelCreate) SetUpdatedAt(t time.Time) *ChannelCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChannelCreate) SetNillableUpdatedAt(t *time.Time) *ChannelCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *ChannelCreate) SetType(c channel.Type) *ChannelCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetBaseURL sets the "base_url" field.
func (cc *ChannelCreate) SetBaseURL(s string) *ChannelCreate {
	cc.mutation.SetBaseURL(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ChannelCreate) SetName(s string) *ChannelCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetAPIKey sets the "api_key" field.
func (cc *ChannelCreate) SetAPIKey(s string) *ChannelCreate {
	cc.mutation.SetAPIKey(s)
	return cc
}

// SetSupportedModels sets the "supported_models" field.
func (cc *ChannelCreate) SetSupportedModels(s []string) *ChannelCreate {
	cc.mutation.SetSupportedModels(s)
	return cc
}

// SetDefaultTestModel sets the "default_test_model" field.
func (cc *ChannelCreate) SetDefaultTestModel(s string) *ChannelCreate {
	cc.mutation.SetDefaultTestModel(s)
	return cc
}

// SetSettings sets the "settings" field.
func (cc *ChannelCreate) SetSettings(os *objects.ChannelSettings) *ChannelCreate {
	cc.mutation.SetSettings(os)
	return cc
}

// AddRequestIDs adds the "requests" edge to the Request entity by IDs.
func (cc *ChannelCreate) AddRequestIDs(ids ...int) *ChannelCreate {
	cc.mutation.AddRequestIDs(ids...)
	return cc
}

// AddRequests adds the "requests" edges to the Request entity.
func (cc *ChannelCreate) AddRequests(r ...*Request) *ChannelCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddRequestIDs(ids...)
}

// Mutation returns the ChannelMutation object of the builder.
func (cc *ChannelCreate) Mutation() *ChannelMutation {
	return cc.mutation
}

// Save creates the Channel in the database.
func (cc *ChannelCreate) Save(ctx context.Context) (*Channel, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChannelCreate) SaveX(ctx context.Context) *Channel {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChannelCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChannelCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChannelCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := channel.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := channel.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChannelCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Channel.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Channel.updated_at"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Channel.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := channel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Channel.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.BaseURL(); !ok {
		return &ValidationError{Name: "base_url", err: errors.New(`ent: missing required field "Channel.base_url"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Channel.name"`)}
	}
	if _, ok := cc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "Channel.api_key"`)}
	}
	if v, ok := cc.mutation.APIKey(); ok {
		if err := channel.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "Channel.api_key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SupportedModels(); !ok {
		return &ValidationError{Name: "supported_models", err: errors.New(`ent: missing required field "Channel.supported_models"`)}
	}
	if _, ok := cc.mutation.DefaultTestModel(); !ok {
		return &ValidationError{Name: "default_test_model", err: errors.New(`ent: missing required field "Channel.default_test_model"`)}
	}
	if _, ok := cc.mutation.Settings(); !ok {
		return &ValidationError{Name: "settings", err: errors.New(`ent: missing required field "Channel.settings"`)}
	}
	return nil
}

func (cc *ChannelCreate) sqlSave(ctx context.Context) (*Channel, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChannelCreate) createSpec() (*Channel, *sqlgraph.CreateSpec) {
	var (
		_node = &Channel{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(channel.Table, sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(channel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(channel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(channel.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.BaseURL(); ok {
		_spec.SetField(channel.FieldBaseURL, field.TypeString, value)
		_node.BaseURL = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(channel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.APIKey(); ok {
		_spec.SetField(channel.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := cc.mutation.SupportedModels(); ok {
		_spec.SetField(channel.FieldSupportedModels, field.TypeJSON, value)
		_node.SupportedModels = value
	}
	if value, ok := cc.mutation.DefaultTestModel(); ok {
		_spec.SetField(channel.FieldDefaultTestModel, field.TypeString, value)
		_node.DefaultTestModel = value
	}
	if value, ok := cc.mutation.Settings(); ok {
		_spec.SetField(channel.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if nodes := cc.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Channel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ChannelCreate) OnConflict(opts ...sql.ConflictOption) *ChannelUpsertOne {
	cc.conflict = opts
	return &ChannelUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChannelCreate) OnConflictColumns(columns ...string) *ChannelUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChannelUpsertOne{
		create: cc,
	}
}

type (
	// ChannelUpsertOne is the builder for "upsert"-ing
	//  one Channel node.
	ChannelUpsertOne struct {
		create *ChannelCreate
	}

	// ChannelUpsert is the "OnConflict" setter.
	ChannelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsert) SetUpdatedAt(v time.Time) *ChannelUpsert {
	u.Set(channel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateUpdatedAt() *ChannelUpsert {
	u.SetExcluded(channel.FieldUpdatedAt)
	return u
}

// SetBaseURL sets the "base_url" field.
func (u *ChannelUpsert) SetBaseURL(v string) *ChannelUpsert {
	u.Set(channel.FieldBaseURL, v)
	return u
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateBaseURL() *ChannelUpsert {
	u.SetExcluded(channel.FieldBaseURL)
	return u
}

// SetName sets the "name" field.
func (u *ChannelUpsert) SetName(v string) *ChannelUpsert {
	u.Set(channel.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateName() *ChannelUpsert {
	u.SetExcluded(channel.FieldName)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *ChannelUpsert) SetAPIKey(v string) *ChannelUpsert {
	u.Set(channel.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateAPIKey() *ChannelUpsert {
	u.SetExcluded(channel.FieldAPIKey)
	return u
}

// SetSupportedModels sets the "supported_models" field.
func (u *ChannelUpsert) SetSupportedModels(v []string) *ChannelUpsert {
	u.Set(channel.FieldSupportedModels, v)
	return u
}

// UpdateSupportedModels sets the "supported_models" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateSupportedModels() *ChannelUpsert {
	u.SetExcluded(channel.FieldSupportedModels)
	return u
}

// SetDefaultTestModel sets the "default_test_model" field.
func (u *ChannelUpsert) SetDefaultTestModel(v string) *ChannelUpsert {
	u.Set(channel.FieldDefaultTestModel, v)
	return u
}

// UpdateDefaultTestModel sets the "default_test_model" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateDefaultTestModel() *ChannelUpsert {
	u.SetExcluded(channel.FieldDefaultTestModel)
	return u
}

// SetSettings sets the "settings" field.
func (u *ChannelUpsert) SetSettings(v *objects.ChannelSettings) *ChannelUpsert {
	u.Set(channel.FieldSettings, v)
	return u
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *ChannelUpsert) UpdateSettings() *ChannelUpsert {
	u.SetExcluded(channel.FieldSettings)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChannelUpsertOne) UpdateNewValues() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(channel.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(channel.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChannelUpsertOne) Ignore() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelUpsertOne) DoNothing() *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCreate.OnConflict
// documentation for more info.
func (u *ChannelUpsertOne) Update(set func(*ChannelUpsert)) *ChannelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsertOne) SetUpdatedAt(v time.Time) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateUpdatedAt() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBaseURL sets the "base_url" field.
func (u *ChannelUpsertOne) SetBaseURL(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetBaseURL(v)
	})
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateBaseURL() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateBaseURL()
	})
}

// SetName sets the "name" field.
func (u *ChannelUpsertOne) SetName(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateName() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateName()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ChannelUpsertOne) SetAPIKey(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateAPIKey() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateAPIKey()
	})
}

// SetSupportedModels sets the "supported_models" field.
func (u *ChannelUpsertOne) SetSupportedModels(v []string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSupportedModels(v)
	})
}

// UpdateSupportedModels sets the "supported_models" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateSupportedModels() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSupportedModels()
	})
}

// SetDefaultTestModel sets the "default_test_model" field.
func (u *ChannelUpsertOne) SetDefaultTestModel(v string) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDefaultTestModel(v)
	})
}

// UpdateDefaultTestModel sets the "default_test_model" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateDefaultTestModel() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDefaultTestModel()
	})
}

// SetSettings sets the "settings" field.
func (u *ChannelUpsertOne) SetSettings(v *objects.ChannelSettings) *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *ChannelUpsertOne) UpdateSettings() *ChannelUpsertOne {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSettings()
	})
}

// Exec executes the query.
func (u *ChannelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChannelUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChannelUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChannelCreateBulk is the builder for creating many Channel entities in bulk.
type ChannelCreateBulk struct {
	config
	err      error
	builders []*ChannelCreate
	conflict []sql.ConflictOption
}

// Save creates the Channel entities in the database.
func (ccb *ChannelCreateBulk) Save(ctx context.Context) ([]*Channel, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Channel, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChannelCreateBulk) SaveX(ctx context.Context) []*Channel {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChannelCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Channel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChannelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChannelCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChannelUpsertBulk {
	ccb.conflict = opts
	return &ChannelUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChannelCreateBulk) OnConflictColumns(columns ...string) *ChannelUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChannelUpsertBulk{
		create: ccb,
	}
}

// ChannelUpsertBulk is the builder for "upsert"-ing
// a bulk of Channel nodes.
type ChannelUpsertBulk struct {
	create *ChannelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChannelUpsertBulk) UpdateNewValues() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(channel.FieldCreatedAt)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(channel.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Channel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChannelUpsertBulk) Ignore() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChannelUpsertBulk) DoNothing() *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChannelCreateBulk.OnConflict
// documentation for more info.
func (u *ChannelUpsertBulk) Update(set func(*ChannelUpsert)) *ChannelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChannelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChannelUpsertBulk) SetUpdatedAt(v time.Time) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateUpdatedAt() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBaseURL sets the "base_url" field.
func (u *ChannelUpsertBulk) SetBaseURL(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetBaseURL(v)
	})
}

// UpdateBaseURL sets the "base_url" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateBaseURL() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateBaseURL()
	})
}

// SetName sets the "name" field.
func (u *ChannelUpsertBulk) SetName(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateName() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateName()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ChannelUpsertBulk) SetAPIKey(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateAPIKey() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateAPIKey()
	})
}

// SetSupportedModels sets the "supported_models" field.
func (u *ChannelUpsertBulk) SetSupportedModels(v []string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSupportedModels(v)
	})
}

// UpdateSupportedModels sets the "supported_models" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateSupportedModels() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSupportedModels()
	})
}

// SetDefaultTestModel sets the "default_test_model" field.
func (u *ChannelUpsertBulk) SetDefaultTestModel(v string) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetDefaultTestModel(v)
	})
}

// UpdateDefaultTestModel sets the "default_test_model" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateDefaultTestModel() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateDefaultTestModel()
	})
}

// SetSettings sets the "settings" field.
func (u *ChannelUpsertBulk) SetSettings(v *objects.ChannelSettings) *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *ChannelUpsertBulk) UpdateSettings() *ChannelUpsertBulk {
	return u.Update(func(s *ChannelUpsert) {
		s.UpdateSettings()
	})
}

// Exec executes the query.
func (u *ChannelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChannelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChannelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChannelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
