// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/ent/request"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// RequestBody holds the value of the "request_body" field.
	RequestBody string `json:"request_body,omitempty"`
	// ResponseBody holds the value of the "response_body" field.
	ResponseBody string `json:"response_body,omitempty"`
	// Status holds the value of the "status" field.
	Status request.Status `json:"status,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int64 `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges        RequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// APIKey holds the value of the api_key edge.
	APIKey []*APIKey `json:"api_key,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*RequestExecution `json:"executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedUser       map[string][]*User
	namedAPIKey     map[string][]*APIKey
	namedExecutions map[string][]*RequestExecution
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// APIKeyOrErr returns the APIKey value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) APIKeyOrErr() ([]*APIKey, error) {
	if e.loadedTypes[1] {
		return e.APIKey, nil
	}
	return nil, &NotLoadedError{edge: "api_key"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) ExecutionsOrErr() ([]*RequestExecution, error) {
	if e.loadedTypes[2] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldID, request.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case request.FieldUserID, request.FieldRequestBody, request.FieldResponseBody, request.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case request.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = value.String
			}
		case request.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				r.RequestBody = value.String
			}
		case request.FieldResponseBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value.Valid {
				r.ResponseBody = value.String
			}
		case request.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = request.Status(value.String)
			}
		case request.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Int64
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Request.
// This includes values selected through modifiers, order, etc.
func (r *Request) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Request entity.
func (r *Request) QueryUser() *UserQuery {
	return NewRequestClient(r.config).QueryUser(r)
}

// QueryAPIKey queries the "api_key" edge of the Request entity.
func (r *Request) QueryAPIKey() *APIKeyQuery {
	return NewRequestClient(r.config).QueryAPIKey(r)
}

// QueryExecutions queries the "executions" edge of the Request entity.
func (r *Request) QueryExecutions() *RequestExecutionQuery {
	return NewRequestClient(r.config).QueryExecutions(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return NewRequestClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("user_id=")
	builder.WriteString(r.UserID)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(r.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(r.ResponseBody)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeletedAt))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUser returns the User named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Request) NamedUser(name string) ([]*User, error) {
	if r.Edges.namedUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Request) appendNamedUser(name string, edges ...*User) {
	if r.Edges.namedUser == nil {
		r.Edges.namedUser = make(map[string][]*User)
	}
	if len(edges) == 0 {
		r.Edges.namedUser[name] = []*User{}
	} else {
		r.Edges.namedUser[name] = append(r.Edges.namedUser[name], edges...)
	}
}

// NamedAPIKey returns the APIKey named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Request) NamedAPIKey(name string) ([]*APIKey, error) {
	if r.Edges.namedAPIKey == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedAPIKey[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Request) appendNamedAPIKey(name string, edges ...*APIKey) {
	if r.Edges.namedAPIKey == nil {
		r.Edges.namedAPIKey = make(map[string][]*APIKey)
	}
	if len(edges) == 0 {
		r.Edges.namedAPIKey[name] = []*APIKey{}
	} else {
		r.Edges.namedAPIKey[name] = append(r.Edges.namedAPIKey[name], edges...)
	}
}

// NamedExecutions returns the Executions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Request) NamedExecutions(name string) ([]*RequestExecution, error) {
	if r.Edges.namedExecutions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedExecutions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Request) appendNamedExecutions(name string, edges ...*RequestExecution) {
	if r.Edges.namedExecutions == nil {
		r.Edges.namedExecutions = make(map[string][]*RequestExecution)
	}
	if len(edges) == 0 {
		r.Edges.namedExecutions[name] = []*RequestExecution{}
	} else {
		r.Edges.namedExecutions[name] = append(r.Edges.namedExecutions[name], edges...)
	}
}

// Requests is a parsable slice of Request.
type Requests []*Request
