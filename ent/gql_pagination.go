// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/looplj/axonhub/ent/apikey"
	"github.com/looplj/axonhub/ent/channel"
	"github.com/looplj/axonhub/ent/job"
	"github.com/looplj/axonhub/ent/request"
	"github.com/looplj/axonhub/ent/requestexecution"
	"github.com/looplj/axonhub/ent/user"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// APIKeyEdge is the edge representation of APIKey.
type APIKeyEdge struct {
	Node   *APIKey `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// APIKeyConnection is the connection containing edges to APIKey.
type APIKeyConnection struct {
	Edges      []*APIKeyEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *APIKeyConnection) build(nodes []*APIKey, pager *apikeyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *APIKey
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *APIKey {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *APIKey {
			return nodes[i]
		}
	}
	c.Edges = make([]*APIKeyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &APIKeyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// APIKeyPaginateOption enables pagination customization.
type APIKeyPaginateOption func(*apikeyPager) error

// WithAPIKeyOrder configures pagination ordering.
func WithAPIKeyOrder(order *APIKeyOrder) APIKeyPaginateOption {
	if order == nil {
		order = DefaultAPIKeyOrder
	}
	o := *order
	return func(pager *apikeyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAPIKeyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAPIKeyFilter configures pagination filter.
func WithAPIKeyFilter(filter func(*APIKeyQuery) (*APIKeyQuery, error)) APIKeyPaginateOption {
	return func(pager *apikeyPager) error {
		if filter == nil {
			return errors.New("APIKeyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type apikeyPager struct {
	reverse bool
	order   *APIKeyOrder
	filter  func(*APIKeyQuery) (*APIKeyQuery, error)
}

func newAPIKeyPager(opts []APIKeyPaginateOption, reverse bool) (*apikeyPager, error) {
	pager := &apikeyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAPIKeyOrder
	}
	return pager, nil
}

func (p *apikeyPager) applyFilter(query *APIKeyQuery) (*APIKeyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *apikeyPager) toCursor(ak *APIKey) Cursor {
	return p.order.Field.toCursor(ak)
}

func (p *apikeyPager) applyCursors(query *APIKeyQuery, after, before *Cursor) (*APIKeyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAPIKeyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *apikeyPager) applyOrder(query *APIKeyQuery) *APIKeyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAPIKeyOrder.Field {
		query = query.Order(DefaultAPIKeyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *apikeyPager) orderExpr(query *APIKeyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAPIKeyOrder.Field {
			b.Comma().Ident(DefaultAPIKeyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to APIKey.
func (ak *APIKeyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...APIKeyPaginateOption,
) (*APIKeyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAPIKeyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ak, err = pager.applyFilter(ak); err != nil {
		return nil, err
	}
	conn := &APIKeyConnection{Edges: []*APIKeyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ak.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ak, err = pager.applyCursors(ak, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ak.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ak.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ak = pager.applyOrder(ak)
	nodes, err := ak.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// APIKeyOrderFieldCreatedAt orders APIKey by created_at.
	APIKeyOrderFieldCreatedAt = &APIKeyOrderField{
		Value: func(ak *APIKey) (ent.Value, error) {
			return ak.CreatedAt, nil
		},
		column: apikey.FieldCreatedAt,
		toTerm: apikey.ByCreatedAt,
		toCursor: func(ak *APIKey) Cursor {
			return Cursor{
				ID:    ak.ID,
				Value: ak.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f APIKeyOrderField) String() string {
	var str string
	switch f.column {
	case APIKeyOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f APIKeyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *APIKeyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("APIKeyOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *APIKeyOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid APIKeyOrderField", str)
	}
	return nil
}

// APIKeyOrderField defines the ordering field of APIKey.
type APIKeyOrderField struct {
	// Value extracts the ordering value from the given APIKey.
	Value    func(*APIKey) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) apikey.OrderOption
	toCursor func(*APIKey) Cursor
}

// APIKeyOrder defines the ordering of APIKey.
type APIKeyOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *APIKeyOrderField `json:"field"`
}

// DefaultAPIKeyOrder is the default ordering of APIKey.
var DefaultAPIKeyOrder = &APIKeyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &APIKeyOrderField{
		Value: func(ak *APIKey) (ent.Value, error) {
			return ak.ID, nil
		},
		column: apikey.FieldID,
		toTerm: apikey.ByID,
		toCursor: func(ak *APIKey) Cursor {
			return Cursor{ID: ak.ID}
		},
	},
}

// ToEdge converts APIKey into APIKeyEdge.
func (ak *APIKey) ToEdge(order *APIKeyOrder) *APIKeyEdge {
	if order == nil {
		order = DefaultAPIKeyOrder
	}
	return &APIKeyEdge{
		Node:   ak,
		Cursor: order.Field.toCursor(ak),
	}
}

// ChannelEdge is the edge representation of Channel.
type ChannelEdge struct {
	Node   *Channel `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ChannelConnection is the connection containing edges to Channel.
type ChannelConnection struct {
	Edges      []*ChannelEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ChannelConnection) build(nodes []*Channel, pager *channelPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Channel
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Channel {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Channel {
			return nodes[i]
		}
	}
	c.Edges = make([]*ChannelEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ChannelEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ChannelPaginateOption enables pagination customization.
type ChannelPaginateOption func(*channelPager) error

// WithChannelOrder configures pagination ordering.
func WithChannelOrder(order *ChannelOrder) ChannelPaginateOption {
	if order == nil {
		order = DefaultChannelOrder
	}
	o := *order
	return func(pager *channelPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultChannelOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithChannelFilter configures pagination filter.
func WithChannelFilter(filter func(*ChannelQuery) (*ChannelQuery, error)) ChannelPaginateOption {
	return func(pager *channelPager) error {
		if filter == nil {
			return errors.New("ChannelQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type channelPager struct {
	reverse bool
	order   *ChannelOrder
	filter  func(*ChannelQuery) (*ChannelQuery, error)
}

func newChannelPager(opts []ChannelPaginateOption, reverse bool) (*channelPager, error) {
	pager := &channelPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultChannelOrder
	}
	return pager, nil
}

func (p *channelPager) applyFilter(query *ChannelQuery) (*ChannelQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *channelPager) toCursor(c *Channel) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *channelPager) applyCursors(query *ChannelQuery, after, before *Cursor) (*ChannelQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultChannelOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *channelPager) applyOrder(query *ChannelQuery) *ChannelQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultChannelOrder.Field {
		query = query.Order(DefaultChannelOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *channelPager) orderExpr(query *ChannelQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultChannelOrder.Field {
			b.Comma().Ident(DefaultChannelOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Channel.
func (c *ChannelQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ChannelPaginateOption,
) (*ChannelConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newChannelPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ChannelConnection{Edges: []*ChannelEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ChannelOrderFieldCreatedAt orders Channel by created_at.
	ChannelOrderFieldCreatedAt = &ChannelOrderField{
		Value: func(c *Channel) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: channel.FieldCreatedAt,
		toTerm: channel.ByCreatedAt,
		toCursor: func(c *Channel) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ChannelOrderField) String() string {
	var str string
	switch f.column {
	case ChannelOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ChannelOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ChannelOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ChannelOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ChannelOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ChannelOrderField", str)
	}
	return nil
}

// ChannelOrderField defines the ordering field of Channel.
type ChannelOrderField struct {
	// Value extracts the ordering value from the given Channel.
	Value    func(*Channel) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) channel.OrderOption
	toCursor func(*Channel) Cursor
}

// ChannelOrder defines the ordering of Channel.
type ChannelOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ChannelOrderField `json:"field"`
}

// DefaultChannelOrder is the default ordering of Channel.
var DefaultChannelOrder = &ChannelOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ChannelOrderField{
		Value: func(c *Channel) (ent.Value, error) {
			return c.ID, nil
		},
		column: channel.FieldID,
		toTerm: channel.ByID,
		toCursor: func(c *Channel) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Channel into ChannelEdge.
func (c *Channel) ToEdge(order *ChannelOrder) *ChannelEdge {
	if order == nil {
		order = DefaultChannelOrder
	}
	return &ChannelEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// JobEdge is the edge representation of Job.
type JobEdge struct {
	Node   *Job   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// JobConnection is the connection containing edges to Job.
type JobConnection struct {
	Edges      []*JobEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *JobConnection) build(nodes []*Job, pager *jobPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Job
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Job {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Job {
			return nodes[i]
		}
	}
	c.Edges = make([]*JobEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &JobEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// JobPaginateOption enables pagination customization.
type JobPaginateOption func(*jobPager) error

// WithJobOrder configures pagination ordering.
func WithJobOrder(order *JobOrder) JobPaginateOption {
	if order == nil {
		order = DefaultJobOrder
	}
	o := *order
	return func(pager *jobPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultJobOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithJobFilter configures pagination filter.
func WithJobFilter(filter func(*JobQuery) (*JobQuery, error)) JobPaginateOption {
	return func(pager *jobPager) error {
		if filter == nil {
			return errors.New("JobQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type jobPager struct {
	reverse bool
	order   *JobOrder
	filter  func(*JobQuery) (*JobQuery, error)
}

func newJobPager(opts []JobPaginateOption, reverse bool) (*jobPager, error) {
	pager := &jobPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultJobOrder
	}
	return pager, nil
}

func (p *jobPager) applyFilter(query *JobQuery) (*JobQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *jobPager) toCursor(j *Job) Cursor {
	return p.order.Field.toCursor(j)
}

func (p *jobPager) applyCursors(query *JobQuery, after, before *Cursor) (*JobQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultJobOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *jobPager) applyOrder(query *JobQuery) *JobQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultJobOrder.Field {
		query = query.Order(DefaultJobOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *jobPager) orderExpr(query *JobQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultJobOrder.Field {
			b.Comma().Ident(DefaultJobOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Job.
func (j *JobQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...JobPaginateOption,
) (*JobConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newJobPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if j, err = pager.applyFilter(j); err != nil {
		return nil, err
	}
	conn := &JobConnection{Edges: []*JobEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := j.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if j, err = pager.applyCursors(j, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		j.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := j.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	j = pager.applyOrder(j)
	nodes, err := j.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// JobOrderField defines the ordering field of Job.
type JobOrderField struct {
	// Value extracts the ordering value from the given Job.
	Value    func(*Job) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) job.OrderOption
	toCursor func(*Job) Cursor
}

// JobOrder defines the ordering of Job.
type JobOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *JobOrderField `json:"field"`
}

// DefaultJobOrder is the default ordering of Job.
var DefaultJobOrder = &JobOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &JobOrderField{
		Value: func(j *Job) (ent.Value, error) {
			return j.ID, nil
		},
		column: job.FieldID,
		toTerm: job.ByID,
		toCursor: func(j *Job) Cursor {
			return Cursor{ID: j.ID}
		},
	},
}

// ToEdge converts Job into JobEdge.
func (j *Job) ToEdge(order *JobOrder) *JobEdge {
	if order == nil {
		order = DefaultJobOrder
	}
	return &JobEdge{
		Node:   j,
		Cursor: order.Field.toCursor(j),
	}
}

// RequestEdge is the edge representation of Request.
type RequestEdge struct {
	Node   *Request `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// RequestConnection is the connection containing edges to Request.
type RequestConnection struct {
	Edges      []*RequestEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *RequestConnection) build(nodes []*Request, pager *requestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Request
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Request {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Request {
			return nodes[i]
		}
	}
	c.Edges = make([]*RequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RequestPaginateOption enables pagination customization.
type RequestPaginateOption func(*requestPager) error

// WithRequestOrder configures pagination ordering.
func WithRequestOrder(order *RequestOrder) RequestPaginateOption {
	if order == nil {
		order = DefaultRequestOrder
	}
	o := *order
	return func(pager *requestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRequestFilter configures pagination filter.
func WithRequestFilter(filter func(*RequestQuery) (*RequestQuery, error)) RequestPaginateOption {
	return func(pager *requestPager) error {
		if filter == nil {
			return errors.New("RequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type requestPager struct {
	reverse bool
	order   *RequestOrder
	filter  func(*RequestQuery) (*RequestQuery, error)
}

func newRequestPager(opts []RequestPaginateOption, reverse bool) (*requestPager, error) {
	pager := &requestPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRequestOrder
	}
	return pager, nil
}

func (p *requestPager) applyFilter(query *RequestQuery) (*RequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *requestPager) toCursor(r *Request) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *requestPager) applyCursors(query *RequestQuery, after, before *Cursor) (*RequestQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRequestOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *requestPager) applyOrder(query *RequestQuery) *RequestQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRequestOrder.Field {
		query = query.Order(DefaultRequestOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *requestPager) orderExpr(query *RequestQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRequestOrder.Field {
			b.Comma().Ident(DefaultRequestOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Request.
func (r *RequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RequestPaginateOption,
) (*RequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRequestPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RequestConnection{Edges: []*RequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RequestOrderFieldCreatedAt orders Request by created_at.
	RequestOrderFieldCreatedAt = &RequestOrderField{
		Value: func(r *Request) (ent.Value, error) {
			return r.CreatedAt, nil
		},
		column: request.FieldCreatedAt,
		toTerm: request.ByCreatedAt,
		toCursor: func(r *Request) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RequestOrderField) String() string {
	var str string
	switch f.column {
	case RequestOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RequestOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RequestOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RequestOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *RequestOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RequestOrderField", str)
	}
	return nil
}

// RequestOrderField defines the ordering field of Request.
type RequestOrderField struct {
	// Value extracts the ordering value from the given Request.
	Value    func(*Request) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) request.OrderOption
	toCursor func(*Request) Cursor
}

// RequestOrder defines the ordering of Request.
type RequestOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *RequestOrderField `json:"field"`
}

// DefaultRequestOrder is the default ordering of Request.
var DefaultRequestOrder = &RequestOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RequestOrderField{
		Value: func(r *Request) (ent.Value, error) {
			return r.ID, nil
		},
		column: request.FieldID,
		toTerm: request.ByID,
		toCursor: func(r *Request) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Request into RequestEdge.
func (r *Request) ToEdge(order *RequestOrder) *RequestEdge {
	if order == nil {
		order = DefaultRequestOrder
	}
	return &RequestEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RequestExecutionEdge is the edge representation of RequestExecution.
type RequestExecutionEdge struct {
	Node   *RequestExecution `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// RequestExecutionConnection is the connection containing edges to RequestExecution.
type RequestExecutionConnection struct {
	Edges      []*RequestExecutionEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *RequestExecutionConnection) build(nodes []*RequestExecution, pager *requestexecutionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *RequestExecution
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *RequestExecution {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *RequestExecution {
			return nodes[i]
		}
	}
	c.Edges = make([]*RequestExecutionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RequestExecutionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RequestExecutionPaginateOption enables pagination customization.
type RequestExecutionPaginateOption func(*requestexecutionPager) error

// WithRequestExecutionOrder configures pagination ordering.
func WithRequestExecutionOrder(order *RequestExecutionOrder) RequestExecutionPaginateOption {
	if order == nil {
		order = DefaultRequestExecutionOrder
	}
	o := *order
	return func(pager *requestexecutionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRequestExecutionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRequestExecutionFilter configures pagination filter.
func WithRequestExecutionFilter(filter func(*RequestExecutionQuery) (*RequestExecutionQuery, error)) RequestExecutionPaginateOption {
	return func(pager *requestexecutionPager) error {
		if filter == nil {
			return errors.New("RequestExecutionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type requestexecutionPager struct {
	reverse bool
	order   *RequestExecutionOrder
	filter  func(*RequestExecutionQuery) (*RequestExecutionQuery, error)
}

func newRequestExecutionPager(opts []RequestExecutionPaginateOption, reverse bool) (*requestexecutionPager, error) {
	pager := &requestexecutionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRequestExecutionOrder
	}
	return pager, nil
}

func (p *requestexecutionPager) applyFilter(query *RequestExecutionQuery) (*RequestExecutionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *requestexecutionPager) toCursor(re *RequestExecution) Cursor {
	return p.order.Field.toCursor(re)
}

func (p *requestexecutionPager) applyCursors(query *RequestExecutionQuery, after, before *Cursor) (*RequestExecutionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRequestExecutionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *requestexecutionPager) applyOrder(query *RequestExecutionQuery) *RequestExecutionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRequestExecutionOrder.Field {
		query = query.Order(DefaultRequestExecutionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *requestexecutionPager) orderExpr(query *RequestExecutionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRequestExecutionOrder.Field {
			b.Comma().Ident(DefaultRequestExecutionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to RequestExecution.
func (re *RequestExecutionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RequestExecutionPaginateOption,
) (*RequestExecutionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRequestExecutionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if re, err = pager.applyFilter(re); err != nil {
		return nil, err
	}
	conn := &RequestExecutionConnection{Edges: []*RequestExecutionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := re.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if re, err = pager.applyCursors(re, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		re.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := re.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	re = pager.applyOrder(re)
	nodes, err := re.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RequestExecutionOrderFieldCreatedAt orders RequestExecution by created_at.
	RequestExecutionOrderFieldCreatedAt = &RequestExecutionOrderField{
		Value: func(re *RequestExecution) (ent.Value, error) {
			return re.CreatedAt, nil
		},
		column: requestexecution.FieldCreatedAt,
		toTerm: requestexecution.ByCreatedAt,
		toCursor: func(re *RequestExecution) Cursor {
			return Cursor{
				ID:    re.ID,
				Value: re.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RequestExecutionOrderField) String() string {
	var str string
	switch f.column {
	case RequestExecutionOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RequestExecutionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RequestExecutionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RequestExecutionOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *RequestExecutionOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RequestExecutionOrderField", str)
	}
	return nil
}

// RequestExecutionOrderField defines the ordering field of RequestExecution.
type RequestExecutionOrderField struct {
	// Value extracts the ordering value from the given RequestExecution.
	Value    func(*RequestExecution) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) requestexecution.OrderOption
	toCursor func(*RequestExecution) Cursor
}

// RequestExecutionOrder defines the ordering of RequestExecution.
type RequestExecutionOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *RequestExecutionOrderField `json:"field"`
}

// DefaultRequestExecutionOrder is the default ordering of RequestExecution.
var DefaultRequestExecutionOrder = &RequestExecutionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RequestExecutionOrderField{
		Value: func(re *RequestExecution) (ent.Value, error) {
			return re.ID, nil
		},
		column: requestexecution.FieldID,
		toTerm: requestexecution.ByID,
		toCursor: func(re *RequestExecution) Cursor {
			return Cursor{ID: re.ID}
		},
	},
}

// ToEdge converts RequestExecution into RequestExecutionEdge.
func (re *RequestExecution) ToEdge(order *RequestExecutionOrder) *RequestExecutionEdge {
	if order == nil {
		order = DefaultRequestExecutionOrder
	}
	return &RequestExecutionEdge{
		Node:   re,
		Cursor: order.Field.toCursor(re),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
