// Code generated by ent, DO NOT EDIT.

package requestexecution

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/looplj/axonhub/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUserID, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldChannelID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldModelID, v))
}

// RequestBody applies equality check predicate on the "request_body" field. It's identical to RequestBodyEQ.
func RequestBody(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestBody, v))
}

// ResponseBody applies equality check predicate on the "response_body" field. It's identical to ResponseBodyEQ.
func ResponseBody(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldResponseBody, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldUserID, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldRequestID, vs...))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldChannelID, v))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldChannelID, v))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldChannelID, v))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldChannelID, v))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldModelID, v))
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldModelID, v))
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldModelID, v))
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldModelID, v))
}

// RequestBodyEQ applies the EQ predicate on the "request_body" field.
func RequestBodyEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestBody, v))
}

// RequestBodyNEQ applies the NEQ predicate on the "request_body" field.
func RequestBodyNEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldRequestBody, v))
}

// RequestBodyIn applies the In predicate on the "request_body" field.
func RequestBodyIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldRequestBody, vs...))
}

// RequestBodyNotIn applies the NotIn predicate on the "request_body" field.
func RequestBodyNotIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldRequestBody, vs...))
}

// RequestBodyGT applies the GT predicate on the "request_body" field.
func RequestBodyGT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldRequestBody, v))
}

// RequestBodyGTE applies the GTE predicate on the "request_body" field.
func RequestBodyGTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldRequestBody, v))
}

// RequestBodyLT applies the LT predicate on the "request_body" field.
func RequestBodyLT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldRequestBody, v))
}

// RequestBodyLTE applies the LTE predicate on the "request_body" field.
func RequestBodyLTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldRequestBody, v))
}

// RequestBodyContains applies the Contains predicate on the "request_body" field.
func RequestBodyContains(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContains(FieldRequestBody, v))
}

// RequestBodyHasPrefix applies the HasPrefix predicate on the "request_body" field.
func RequestBodyHasPrefix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasPrefix(FieldRequestBody, v))
}

// RequestBodyHasSuffix applies the HasSuffix predicate on the "request_body" field.
func RequestBodyHasSuffix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasSuffix(FieldRequestBody, v))
}

// RequestBodyEqualFold applies the EqualFold predicate on the "request_body" field.
func RequestBodyEqualFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEqualFold(FieldRequestBody, v))
}

// RequestBodyContainsFold applies the ContainsFold predicate on the "request_body" field.
func RequestBodyContainsFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContainsFold(FieldRequestBody, v))
}

// ResponseBodyEQ applies the EQ predicate on the "response_body" field.
func ResponseBodyEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldResponseBody, v))
}

// ResponseBodyNEQ applies the NEQ predicate on the "response_body" field.
func ResponseBodyNEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldResponseBody, v))
}

// ResponseBodyIn applies the In predicate on the "response_body" field.
func ResponseBodyIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldResponseBody, vs...))
}

// ResponseBodyNotIn applies the NotIn predicate on the "response_body" field.
func ResponseBodyNotIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldResponseBody, vs...))
}

// ResponseBodyGT applies the GT predicate on the "response_body" field.
func ResponseBodyGT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldResponseBody, v))
}

// ResponseBodyGTE applies the GTE predicate on the "response_body" field.
func ResponseBodyGTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldResponseBody, v))
}

// ResponseBodyLT applies the LT predicate on the "response_body" field.
func ResponseBodyLT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldResponseBody, v))
}

// ResponseBodyLTE applies the LTE predicate on the "response_body" field.
func ResponseBodyLTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldResponseBody, v))
}

// ResponseBodyContains applies the Contains predicate on the "response_body" field.
func ResponseBodyContains(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContains(FieldResponseBody, v))
}

// ResponseBodyHasPrefix applies the HasPrefix predicate on the "response_body" field.
func ResponseBodyHasPrefix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasPrefix(FieldResponseBody, v))
}

// ResponseBodyHasSuffix applies the HasSuffix predicate on the "response_body" field.
func ResponseBodyHasSuffix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasSuffix(FieldResponseBody, v))
}

// ResponseBodyIsNil applies the IsNil predicate on the "response_body" field.
func ResponseBodyIsNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIsNull(FieldResponseBody))
}

// ResponseBodyNotNil applies the NotNil predicate on the "response_body" field.
func ResponseBodyNotNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotNull(FieldResponseBody))
}

// ResponseBodyEqualFold applies the EqualFold predicate on the "response_body" field.
func ResponseBodyEqualFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEqualFold(FieldResponseBody, v))
}

// ResponseBodyContainsFold applies the ContainsFold predicate on the "response_body" field.
func ResponseBodyContainsFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContainsFold(FieldResponseBody, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// HasRequest applies the HasEdge predicate on the "request" edge.
func HasRequest() predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := newRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.NotPredicates(p))
}
