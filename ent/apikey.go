// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/ent/apikey"
	"github.com/looplj/axonhub/ent/user"
)

// APIKey is the model entity for the APIKey schema.
type APIKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Key holds the value of the "key" field.
	Key int `json:"key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APIKeyQuery when eager-loading is set.
	Edges        APIKeyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// APIKeyEdges holds the relations/edges for other nodes in the graph.
type APIKeyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Requests holds the value of the requests edge.
	Requests []*Request `json:"requests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRequests map[string][]*Request
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APIKeyEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e APIKeyEdges) RequestsOrErr() ([]*Request, error) {
	if e.loadedTypes[1] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikey.FieldID, apikey.FieldUserID, apikey.FieldKey:
			values[i] = new(sql.NullInt64)
		case apikey.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIKey fields.
func (ak *APIKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ak.ID = int(value.Int64)
		case apikey.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ak.UserID = int(value.Int64)
			}
		case apikey.FieldKey:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ak.Key = int(value.Int64)
			}
		case apikey.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ak.Name = value.String
			}
		default:
			ak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APIKey.
// This includes values selected through modifiers, order, etc.
func (ak *APIKey) Value(name string) (ent.Value, error) {
	return ak.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the APIKey entity.
func (ak *APIKey) QueryUser() *UserQuery {
	return NewAPIKeyClient(ak.config).QueryUser(ak)
}

// QueryRequests queries the "requests" edge of the APIKey entity.
func (ak *APIKey) QueryRequests() *RequestQuery {
	return NewAPIKeyClient(ak.config).QueryRequests(ak)
}

// Update returns a builder for updating this APIKey.
// Note that you need to call APIKey.Unwrap() before calling this method if this APIKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (ak *APIKey) Update() *APIKeyUpdateOne {
	return NewAPIKeyClient(ak.config).UpdateOne(ak)
}

// Unwrap unwraps the APIKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ak *APIKey) Unwrap() *APIKey {
	_tx, ok := ak.config.driver.(*txDriver)
	if !ok {
		panic("ent: APIKey is not a transactional entity")
	}
	ak.config.driver = _tx.drv
	return ak
}

// String implements the fmt.Stringer.
func (ak *APIKey) String() string {
	var builder strings.Builder
	builder.WriteString("APIKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ak.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ak.UserID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(fmt.Sprintf("%v", ak.Key))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ak.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRequests returns the Requests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ak *APIKey) NamedRequests(name string) ([]*Request, error) {
	if ak.Edges.namedRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ak.Edges.namedRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ak *APIKey) appendNamedRequests(name string, edges ...*Request) {
	if ak.Edges.namedRequests == nil {
		ak.Edges.namedRequests = make(map[string][]*Request)
	}
	if len(edges) == 0 {
		ak.Edges.namedRequests[name] = []*Request{}
	} else {
		ak.Edges.namedRequests[name] = append(ak.Edges.namedRequests[name], edges...)
	}
}

// APIKeys is a parsable slice of APIKey.
type APIKeys []*APIKey
