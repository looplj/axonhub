package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/looplj/axonhub/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// APIKeys is the resolver for the apiKeys field.
func (r *queryResolver) APIKeys(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.APIKeyWhereInput) (*ent.APIKeyConnection, error) {
	return r.client.APIKey.Query().Paginate(ctx, after, first, before, last, ent.WithAPIKeyFilter(func(q *ent.APIKeyQuery) (*ent.APIKeyQuery, error) {
		return where.Filter(q)
	}))
}

// Channels is the resolver for the channels field.
func (r *queryResolver) Channels(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.ChannelWhereInput) (*ent.ChannelConnection, error) {
	return r.client.Channel.Query().Paginate(ctx, after, first, before, last, ent.WithChannelFilter(func(q *ent.ChannelQuery) (*ent.ChannelQuery, error) {
		return where.Filter(q)
	}))
}

// Requests is the resolver for the requests field.
func (r *queryResolver) Requests(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.RequestWhereInput) (*ent.RequestConnection, error) {
	return r.client.Request.Query().Paginate(ctx, after, first, before, last, ent.WithRequestFilter(func(q *ent.RequestQuery) (*ent.RequestQuery, error) {
		return where.Filter(q)
	}))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserFilter(func(q *ent.UserQuery) (*ent.UserQuery, error) {
		return where.Filter(q)
	}))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
