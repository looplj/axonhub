directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type APIKey implements Node {
  id: ID!
  userID: ID!
  key: String!
  name: String!
  user: User!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
}
"""
A connection to a list of items.
"""
type APIKeyConnection {
  """
  A list of edges.
  """
  edges: [APIKeyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type APIKeyEdge {
  """
  The item at the end of the edge.
  """
  node: APIKey
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
APIKeyWhereInput is used for filtering APIKey objects.
Input was generated by ent.
"""
input APIKeyWhereInput {
  not: APIKeyWhereInput
  and: [APIKeyWhereInput!]
  or: [APIKeyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
}
type Channel implements Node {
  id: ID!
  type: ChannelType!
  baseURL: String!
  name: String!
  supportedModels: [String!]!
  defaultTestModel: String!
  settings: ChannelSettings!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
}
"""
A connection to a list of items.
"""
type ChannelConnection {
  """
  A list of edges.
  """
  edges: [ChannelEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ChannelEdge {
  """
  The item at the end of the edge.
  """
  node: Channel
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ChannelType is enum for the field type
"""
enum ChannelType @goModel(model: "github.com/looplj/axonhub/ent/channel.Type") {
  openai
  anthropic
  gemini
  deepseek
  doubao
  kimi
}
"""
ChannelWhereInput is used for filtering Channel objects.
Input was generated by ent.
"""
input ChannelWhereInput {
  not: ChannelWhereInput
  and: [ChannelWhereInput!]
  or: [ChannelWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  type field predicates
  """
  type: ChannelType
  typeNEQ: ChannelType
  typeIn: [ChannelType!]
  typeNotIn: [ChannelType!]
  """
  base_url field predicates
  """
  baseURL: String
  baseURLNEQ: String
  baseURLIn: [String!]
  baseURLNotIn: [String!]
  baseURLGT: String
  baseURLGTE: String
  baseURLLT: String
  baseURLLTE: String
  baseURLContains: String
  baseURLHasPrefix: String
  baseURLHasSuffix: String
  baseURLEqualFold: String
  baseURLContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  default_test_model field predicates
  """
  defaultTestModel: String
  defaultTestModelNEQ: String
  defaultTestModelIn: [String!]
  defaultTestModelNotIn: [String!]
  defaultTestModelGT: String
  defaultTestModelGTE: String
  defaultTestModelLT: String
  defaultTestModelLTE: String
  defaultTestModelContains: String
  defaultTestModelHasPrefix: String
  defaultTestModelHasSuffix: String
  defaultTestModelEqualFold: String
  defaultTestModelContainsFold: String
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
}
"""
CreateAPIKeyInput is used for create APIKey object.
Input was generated by ent.
"""
input CreateAPIKeyInput {
  key: String!
  name: String!
  userID: ID!
  requestIDs: [ID!]
}
"""
CreateChannelInput is used for create Channel object.
Input was generated by ent.
"""
input CreateChannelInput {
  type: ChannelType!
  baseURL: String!
  name: String!
  apiKey: String!
  supportedModels: [String!]!
  defaultTestModel: String!
  settings: ChannelSettingsInput!
}
"""
CreateRequestInput is used for create Request object.
Input was generated by ent.
"""
input CreateRequestInput {
  requestBody: String!
  responseBody: String!
  status: RequestStatus!
  deletedAt: Int
  userID: ID!
  apiKeyID: ID!
  executionIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Job implements Node {
  id: ID!
  ownerID: Int!
  type: String!
  context: String!
}
"""
JobWhereInput is used for filtering Job objects.
Input was generated by ent.
"""
input JobWhereInput {
  not: JobWhereInput
  and: [JobWhereInput!]
  or: [JobWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  owner_id field predicates
  """
  ownerID: Int
  ownerIDNEQ: Int
  ownerIDIn: [Int!]
  ownerIDNotIn: [Int!]
  ownerIDGT: Int
  ownerIDGTE: Int
  ownerIDLT: Int
  ownerIDLTE: Int
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  context field predicates
  """
  context: String
  contextNEQ: String
  contextIn: [String!]
  contextNotIn: [String!]
  contextGT: String
  contextGTE: String
  contextLT: String
  contextLTE: String
  contextContains: String
  contextHasPrefix: String
  contextHasSuffix: String
  contextEqualFold: String
  contextContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/looplj/axonhub/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for APIKeys returned from the connection.
    """
    where: APIKeyWhereInput
  ): APIKeyConnection!
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Channels returned from the connection.
    """
    where: ChannelWhereInput
  ): ChannelConnection!
  requestExecutions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for RequestExecutions returned from the connection.
    """
    where: RequestExecutionWhereInput
  ): RequestExecutionConnection!
}
type Request implements Node {
  id: ID!
  userID: ID!
  apiKeyID: ID!
  requestBody: String!
  responseBody: String!
  status: RequestStatus!
  deletedAt: Int!
  user: User!
  apiKey: APIKey!
  executions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for RequestExecutions returned from the connection.
    """
    where: RequestExecutionWhereInput
  ): RequestExecutionConnection!
}
"""
A connection to a list of items.
"""
type RequestConnection {
  """
  A list of edges.
  """
  edges: [RequestEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RequestEdge {
  """
  The item at the end of the edge.
  """
  node: Request
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RequestExecution implements Node {
  id: ID!
  userID: Int!
  requestID: ID!
  request: Request!
}
"""
A connection to a list of items.
"""
type RequestExecutionConnection {
  """
  A list of edges.
  """
  edges: [RequestExecutionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RequestExecutionEdge {
  """
  The item at the end of the edge.
  """
  node: RequestExecution
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
RequestExecutionWhereInput is used for filtering RequestExecution objects.
Input was generated by ent.
"""
input RequestExecutionWhereInput {
  not: RequestExecutionWhereInput
  and: [RequestExecutionWhereInput!]
  or: [RequestExecutionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: Int
  userIDNEQ: Int
  userIDIn: [Int!]
  userIDNotIn: [Int!]
  userIDGT: Int
  userIDGTE: Int
  userIDLT: Int
  userIDLTE: Int
  """
  request_id field predicates
  """
  requestID: ID
  requestIDNEQ: ID
  requestIDIn: [ID!]
  requestIDNotIn: [ID!]
  """
  request edge predicates
  """
  hasRequest: Boolean
  hasRequestWith: [RequestWhereInput!]
}
"""
RequestStatus is enum for the field status
"""
enum RequestStatus @goModel(model: "github.com/looplj/axonhub/ent/request.Status") {
  pending
  processing
  completed
  failed
}
"""
RequestWhereInput is used for filtering Request objects.
Input was generated by ent.
"""
input RequestWhereInput {
  not: RequestWhereInput
  and: [RequestWhereInput!]
  or: [RequestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  api_key_id field predicates
  """
  apiKeyID: ID
  apiKeyIDNEQ: ID
  apiKeyIDIn: [ID!]
  apiKeyIDNotIn: [ID!]
  """
  request_body field predicates
  """
  requestBody: String
  requestBodyNEQ: String
  requestBodyIn: [String!]
  requestBodyNotIn: [String!]
  requestBodyGT: String
  requestBodyGTE: String
  requestBodyLT: String
  requestBodyLTE: String
  requestBodyContains: String
  requestBodyHasPrefix: String
  requestBodyHasSuffix: String
  requestBodyEqualFold: String
  requestBodyContainsFold: String
  """
  response_body field predicates
  """
  responseBody: String
  responseBodyNEQ: String
  responseBodyIn: [String!]
  responseBodyNotIn: [String!]
  responseBodyGT: String
  responseBodyGTE: String
  responseBodyLT: String
  responseBodyLTE: String
  responseBodyContains: String
  responseBodyHasPrefix: String
  responseBodyHasSuffix: String
  responseBodyEqualFold: String
  responseBodyContainsFold: String
  """
  status field predicates
  """
  status: RequestStatus
  statusNEQ: RequestStatus
  statusIn: [RequestStatus!]
  statusNotIn: [RequestStatus!]
  """
  deleted_at field predicates
  """
  deletedAt: Int
  deletedAtNEQ: Int
  deletedAtIn: [Int!]
  deletedAtNotIn: [Int!]
  deletedAtGT: Int
  deletedAtGTE: Int
  deletedAtLT: Int
  deletedAtLTE: Int
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  api_key edge predicates
  """
  hasAPIKey: Boolean
  hasAPIKeyWith: [APIKeyWhereInput!]
  """
  executions edge predicates
  """
  hasExecutions: Boolean
  hasExecutionsWith: [RequestExecutionWhereInput!]
}
"""
UpdateAPIKeyInput is used for update APIKey object.
Input was generated by ent.
"""
input UpdateAPIKeyInput {
  name: String
  addRequestIDs: [ID!]
  removeRequestIDs: [ID!]
  clearRequests: Boolean
}
"""
UpdateChannelInput is used for update Channel object.
Input was generated by ent.
"""
input UpdateChannelInput {
  baseURL: String
  name: String
  apiKey: String
  supportedModels: [String!]
  appendSupportedModels: [String!]
  defaultTestModel: String
  settings: ChannelSettingsInput
  addRequestIDs: [ID!]
  removeRequestIDs: [ID!]
  clearRequests: Boolean
}
"""
UpdateRequestInput is used for update Request object.
Input was generated by ent.
"""
input UpdateRequestInput {
  responseBody: String
  status: RequestStatus
  deletedAt: Int
  addExecutionIDs: [ID!]
  removeExecutionIDs: [ID!]
  clearExecutions: Boolean
}
type User implements Node {
  id: ID!
  email: String!
  name: String!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
  apiKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for APIKeys returned from the connection.
    """
    where: APIKeyWhereInput
  ): APIKeyConnection!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
  """
  api_keys edge predicates
  """
  hasAPIKeys: Boolean
  hasAPIKeysWith: [APIKeyWhereInput!]
}
