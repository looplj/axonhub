directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type APIKey implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: ID!
  key: String!
  name: String!
  user: User!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Requests returned from the connection.
    """
    orderBy: RequestOrder

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
}
"""
A connection to a list of items.
"""
type APIKeyConnection {
  """
  A list of edges.
  """
  edges: [APIKeyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type APIKeyEdge {
  """
  The item at the end of the edge.
  """
  node: APIKey
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for APIKey connections
"""
input APIKeyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order APIKeys.
  """
  field: APIKeyOrderField!
}
"""
Properties by which APIKey connections can be ordered.
"""
enum APIKeyOrderField {
  CREATED_AT
}
"""
APIKeyWhereInput is used for filtering APIKey objects.
Input was generated by ent.
"""
input APIKeyWhereInput {
  not: APIKeyWhereInput
  and: [APIKeyWhereInput!]
  or: [APIKeyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyEqualFold: String
  keyContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
}
type Channel implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  type: ChannelType!
  baseURL: String!
  name: String!
  supportedModels: [String!]!
  defaultTestModel: String!
  settings: ChannelSettings
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Requests returned from the connection.
    """
    orderBy: RequestOrder

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
  executions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RequestExecutions returned from the connection.
    """
    orderBy: RequestExecutionOrder

    """
    Filtering options for RequestExecutions returned from the connection.
    """
    where: RequestExecutionWhereInput
  ): RequestExecutionConnection!
}
"""
A connection to a list of items.
"""
type ChannelConnection {
  """
  A list of edges.
  """
  edges: [ChannelEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ChannelEdge {
  """
  The item at the end of the edge.
  """
  node: Channel
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Channel connections
"""
input ChannelOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Channels.
  """
  field: ChannelOrderField!
}
"""
Properties by which Channel connections can be ordered.
"""
enum ChannelOrderField {
  CREATED_AT
}
"""
ChannelType is enum for the field type
"""
enum ChannelType @goModel(model: "github.com/looplj/axonhub/ent/channel.Type") {
  openai
  anthropic
  gemini
  deepseek
  doubao
  kimi
}
"""
ChannelWhereInput is used for filtering Channel objects.
Input was generated by ent.
"""
input ChannelWhereInput {
  not: ChannelWhereInput
  and: [ChannelWhereInput!]
  or: [ChannelWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  type field predicates
  """
  type: ChannelType
  typeNEQ: ChannelType
  typeIn: [ChannelType!]
  typeNotIn: [ChannelType!]
  """
  base_url field predicates
  """
  baseURL: String
  baseURLNEQ: String
  baseURLIn: [String!]
  baseURLNotIn: [String!]
  baseURLGT: String
  baseURLGTE: String
  baseURLLT: String
  baseURLLTE: String
  baseURLContains: String
  baseURLHasPrefix: String
  baseURLHasSuffix: String
  baseURLEqualFold: String
  baseURLContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  default_test_model field predicates
  """
  defaultTestModel: String
  defaultTestModelNEQ: String
  defaultTestModelIn: [String!]
  defaultTestModelNotIn: [String!]
  defaultTestModelGT: String
  defaultTestModelGTE: String
  defaultTestModelLT: String
  defaultTestModelLTE: String
  defaultTestModelContains: String
  defaultTestModelHasPrefix: String
  defaultTestModelHasSuffix: String
  defaultTestModelEqualFold: String
  defaultTestModelContainsFold: String
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
  """
  executions edge predicates
  """
  hasExecutions: Boolean
  hasExecutionsWith: [RequestExecutionWhereInput!]
}
"""
CreateAPIKeyInput is used for create APIKey object.
Input was generated by ent.
"""
input CreateAPIKeyInput {
  createdAt: Time
  updatedAt: Time
  key: String!
  name: String!
  userID: ID!
}
"""
CreateChannelInput is used for create Channel object.
Input was generated by ent.
"""
input CreateChannelInput {
  createdAt: Time
  updatedAt: Time
  type: ChannelType!
  baseURL: String!
  name: String!
  apiKey: String!
  supportedModels: [String!]!
  defaultTestModel: String!
  settings: ChannelSettingsInput
}
"""
CreateRequestInput is used for create Request object.
Input was generated by ent.
"""
input CreateRequestInput {
  createdAt: Time
  updatedAt: Time
  modelID: String!
  requestBody: JSONRawMessageInput!
  responseBody: JSONRawMessageInput
  status: RequestStatus!
  userID: ID!
  apiKeyID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  name: String!
  requestIDs: [ID!]
  apiKeyIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Job implements Node {
  id: ID!
  ownerID: Int!
  type: String!
  context: String!
}
"""
JobWhereInput is used for filtering Job objects.
Input was generated by ent.
"""
input JobWhereInput {
  not: JobWhereInput
  and: [JobWhereInput!]
  or: [JobWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  owner_id field predicates
  """
  ownerID: Int
  ownerIDNEQ: Int
  ownerIDIn: [Int!]
  ownerIDNotIn: [Int!]
  ownerIDGT: Int
  ownerIDGTE: Int
  ownerIDLT: Int
  ownerIDLTE: Int
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  context field predicates
  """
  context: String
  contextNEQ: String
  contextIn: [String!]
  contextNotIn: [String!]
  contextGT: String
  contextGTE: String
  contextLT: String
  contextLTE: String
  contextContains: String
  contextHasPrefix: String
  contextHasSuffix: String
  contextEqualFold: String
  contextContainsFold: String
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/looplj/axonhub/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for APIKeys returned from the connection.
    """
    orderBy: APIKeyOrder

    """
    Filtering options for APIKeys returned from the connection.
    """
    where: APIKeyWhereInput
  ): APIKeyConnection!
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Channels returned from the connection.
    """
    orderBy: ChannelOrder

    """
    Filtering options for Channels returned from the connection.
    """
    where: ChannelWhereInput
  ): ChannelConnection!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Requests returned from the connection.
    """
    orderBy: RequestOrder

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Request implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: ID!
  apiKeyID: ID
  modelID: String!
  requestBody: JSONRawMessage!
  responseBody: JSONRawMessage
  status: RequestStatus!
  user: User!
  apiKey: APIKey
  executions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RequestExecutions returned from the connection.
    """
    orderBy: RequestExecutionOrder

    """
    Filtering options for RequestExecutions returned from the connection.
    """
    where: RequestExecutionWhereInput
  ): RequestExecutionConnection!
}
"""
A connection to a list of items.
"""
type RequestConnection {
  """
  A list of edges.
  """
  edges: [RequestEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RequestEdge {
  """
  The item at the end of the edge.
  """
  node: Request
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RequestExecution implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  userID: Int!
  requestID: ID!
  channelID: ID!
  modelID: String!
  requestBody: JSONRawMessage!
  responseBody: JSONRawMessage
  responseChunks: [JSONRawMessage!]
  errorMessage: String
  status: RequestExecutionStatus!
  request: Request!
  channel: Channel!
}
"""
A connection to a list of items.
"""
type RequestExecutionConnection {
  """
  A list of edges.
  """
  edges: [RequestExecutionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RequestExecutionEdge {
  """
  The item at the end of the edge.
  """
  node: RequestExecution
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for RequestExecution connections
"""
input RequestExecutionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RequestExecutions.
  """
  field: RequestExecutionOrderField!
}
"""
Properties by which RequestExecution connections can be ordered.
"""
enum RequestExecutionOrderField {
  CREATED_AT
}
"""
RequestExecutionStatus is enum for the field status
"""
enum RequestExecutionStatus @goModel(model: "github.com/looplj/axonhub/ent/requestexecution.Status") {
  pending
  processing
  completed
  failed
}
"""
RequestExecutionWhereInput is used for filtering RequestExecution objects.
Input was generated by ent.
"""
input RequestExecutionWhereInput {
  not: RequestExecutionWhereInput
  and: [RequestExecutionWhereInput!]
  or: [RequestExecutionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user_id field predicates
  """
  userID: Int
  userIDNEQ: Int
  userIDIn: [Int!]
  userIDNotIn: [Int!]
  userIDGT: Int
  userIDGTE: Int
  userIDLT: Int
  userIDLTE: Int
  """
  request_id field predicates
  """
  requestID: ID
  requestIDNEQ: ID
  requestIDIn: [ID!]
  requestIDNotIn: [ID!]
  """
  channel_id field predicates
  """
  channelID: ID
  channelIDNEQ: ID
  channelIDIn: [ID!]
  channelIDNotIn: [ID!]
  """
  model_id field predicates
  """
  modelID: String
  modelIDNEQ: String
  modelIDIn: [String!]
  modelIDNotIn: [String!]
  modelIDGT: String
  modelIDGTE: String
  modelIDLT: String
  modelIDLTE: String
  modelIDContains: String
  modelIDHasPrefix: String
  modelIDHasSuffix: String
  modelIDEqualFold: String
  modelIDContainsFold: String
  """
  error_message field predicates
  """
  errorMessage: String
  errorMessageNEQ: String
  errorMessageIn: [String!]
  errorMessageNotIn: [String!]
  errorMessageGT: String
  errorMessageGTE: String
  errorMessageLT: String
  errorMessageLTE: String
  errorMessageContains: String
  errorMessageHasPrefix: String
  errorMessageHasSuffix: String
  errorMessageIsNil: Boolean
  errorMessageNotNil: Boolean
  errorMessageEqualFold: String
  errorMessageContainsFold: String
  """
  status field predicates
  """
  status: RequestExecutionStatus
  statusNEQ: RequestExecutionStatus
  statusIn: [RequestExecutionStatus!]
  statusNotIn: [RequestExecutionStatus!]
  """
  request edge predicates
  """
  hasRequest: Boolean
  hasRequestWith: [RequestWhereInput!]
  """
  channel edge predicates
  """
  hasChannel: Boolean
  hasChannelWith: [ChannelWhereInput!]
}
"""
Ordering options for Request connections
"""
input RequestOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Requests.
  """
  field: RequestOrderField!
}
"""
Properties by which Request connections can be ordered.
"""
enum RequestOrderField {
  CREATED_AT
}
"""
RequestStatus is enum for the field status
"""
enum RequestStatus @goModel(model: "github.com/looplj/axonhub/ent/request.Status") {
  pending
  processing
  completed
  failed
}
"""
RequestWhereInput is used for filtering Request objects.
Input was generated by ent.
"""
input RequestWhereInput {
  not: RequestWhereInput
  and: [RequestWhereInput!]
  or: [RequestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  api_key_id field predicates
  """
  apiKeyID: ID
  apiKeyIDNEQ: ID
  apiKeyIDIn: [ID!]
  apiKeyIDNotIn: [ID!]
  apiKeyIDIsNil: Boolean
  apiKeyIDNotNil: Boolean
  """
  model_id field predicates
  """
  modelID: String
  modelIDNEQ: String
  modelIDIn: [String!]
  modelIDNotIn: [String!]
  modelIDGT: String
  modelIDGTE: String
  modelIDLT: String
  modelIDLTE: String
  modelIDContains: String
  modelIDHasPrefix: String
  modelIDHasSuffix: String
  modelIDEqualFold: String
  modelIDContainsFold: String
  """
  status field predicates
  """
  status: RequestStatus
  statusNEQ: RequestStatus
  statusIn: [RequestStatus!]
  statusNotIn: [RequestStatus!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  api_key edge predicates
  """
  hasAPIKey: Boolean
  hasAPIKeyWith: [APIKeyWhereInput!]
  """
  executions edge predicates
  """
  hasExecutions: Boolean
  hasExecutionsWith: [RequestExecutionWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAPIKeyInput is used for update APIKey object.
Input was generated by ent.
"""
input UpdateAPIKeyInput {
  updatedAt: Time
  name: String
}
"""
UpdateChannelInput is used for update Channel object.
Input was generated by ent.
"""
input UpdateChannelInput {
  updatedAt: Time
  baseURL: String
  name: String
  apiKey: String
  supportedModels: [String!]
  appendSupportedModels: [String!]
  defaultTestModel: String
  settings: ChannelSettingsInput
  clearSettings: Boolean
}
"""
UpdateRequestInput is used for update Request object.
Input was generated by ent.
"""
input UpdateRequestInput {
  updatedAt: Time
  responseBody: JSONRawMessageInput
  appendResponseBody: JSONRawMessageInput
  clearResponseBody: Boolean
  status: RequestStatus
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  email: String
  name: String
  addRequestIDs: [ID!]
  removeRequestIDs: [ID!]
  clearRequests: Boolean
  addAPIKeyIDs: [ID!]
  removeAPIKeyIDs: [ID!]
  clearAPIKeys: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  name: String!
  requests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Requests returned from the connection.
    """
    orderBy: RequestOrder

    """
    Filtering options for Requests returned from the connection.
    """
    where: RequestWhereInput
  ): RequestConnection!
  apiKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for APIKeys returned from the connection.
    """
    orderBy: APIKeyOrder

    """
    Filtering options for APIKeys returned from the connection.
    """
    where: APIKeyWhereInput
  ): APIKeyConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  requests edge predicates
  """
  hasRequests: Boolean
  hasRequestsWith: [RequestWhereInput!]
  """
  api_keys edge predicates
  """
  hasAPIKeys: Boolean
  hasAPIKeysWith: [APIKeyWhereInput!]
}
