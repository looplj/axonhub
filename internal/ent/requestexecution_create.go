// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/requestexecution"
	"github.com/looplj/axonhub/internal/objects"
)

// RequestExecutionCreate is the builder for creating a RequestExecution entity.
type RequestExecutionCreate struct {
	config
	mutation *RequestExecutionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rec *RequestExecutionCreate) SetCreatedAt(t time.Time) *RequestExecutionCreate {
	rec.mutation.SetCreatedAt(t)
	return rec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rec *RequestExecutionCreate) SetNillableCreatedAt(t *time.Time) *RequestExecutionCreate {
	if t != nil {
		rec.SetCreatedAt(*t)
	}
	return rec
}

// SetUpdatedAt sets the "updated_at" field.
func (rec *RequestExecutionCreate) SetUpdatedAt(t time.Time) *RequestExecutionCreate {
	rec.mutation.SetUpdatedAt(t)
	return rec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rec *RequestExecutionCreate) SetNillableUpdatedAt(t *time.Time) *RequestExecutionCreate {
	if t != nil {
		rec.SetUpdatedAt(*t)
	}
	return rec
}

// SetUserID sets the "user_id" field.
func (rec *RequestExecutionCreate) SetUserID(i int) *RequestExecutionCreate {
	rec.mutation.SetUserID(i)
	return rec
}

// SetRequestID sets the "request_id" field.
func (rec *RequestExecutionCreate) SetRequestID(i int) *RequestExecutionCreate {
	rec.mutation.SetRequestID(i)
	return rec
}

// SetChannelID sets the "channel_id" field.
func (rec *RequestExecutionCreate) SetChannelID(i int) *RequestExecutionCreate {
	rec.mutation.SetChannelID(i)
	return rec
}

// SetModelID sets the "model_id" field.
func (rec *RequestExecutionCreate) SetModelID(s string) *RequestExecutionCreate {
	rec.mutation.SetModelID(s)
	return rec
}

// SetFormat sets the "format" field.
func (rec *RequestExecutionCreate) SetFormat(s string) *RequestExecutionCreate {
	rec.mutation.SetFormat(s)
	return rec
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (rec *RequestExecutionCreate) SetNillableFormat(s *string) *RequestExecutionCreate {
	if s != nil {
		rec.SetFormat(*s)
	}
	return rec
}

// SetRequestBody sets the "request_body" field.
func (rec *RequestExecutionCreate) SetRequestBody(orm objects.JSONRawMessage) *RequestExecutionCreate {
	rec.mutation.SetRequestBody(orm)
	return rec
}

// SetResponseBody sets the "response_body" field.
func (rec *RequestExecutionCreate) SetResponseBody(orm objects.JSONRawMessage) *RequestExecutionCreate {
	rec.mutation.SetResponseBody(orm)
	return rec
}

// SetResponseChunks sets the "response_chunks" field.
func (rec *RequestExecutionCreate) SetResponseChunks(orm []objects.JSONRawMessage) *RequestExecutionCreate {
	rec.mutation.SetResponseChunks(orm)
	return rec
}

// SetErrorMessage sets the "error_message" field.
func (rec *RequestExecutionCreate) SetErrorMessage(s string) *RequestExecutionCreate {
	rec.mutation.SetErrorMessage(s)
	return rec
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rec *RequestExecutionCreate) SetNillableErrorMessage(s *string) *RequestExecutionCreate {
	if s != nil {
		rec.SetErrorMessage(*s)
	}
	return rec
}

// SetStatus sets the "status" field.
func (rec *RequestExecutionCreate) SetStatus(r requestexecution.Status) *RequestExecutionCreate {
	rec.mutation.SetStatus(r)
	return rec
}

// SetRequest sets the "request" edge to the Request entity.
func (rec *RequestExecutionCreate) SetRequest(r *Request) *RequestExecutionCreate {
	return rec.SetRequestID(r.ID)
}

// SetChannel sets the "channel" edge to the Channel entity.
func (rec *RequestExecutionCreate) SetChannel(c *Channel) *RequestExecutionCreate {
	return rec.SetChannelID(c.ID)
}

// Mutation returns the RequestExecutionMutation object of the builder.
func (rec *RequestExecutionCreate) Mutation() *RequestExecutionMutation {
	return rec.mutation
}

// Save creates the RequestExecution in the database.
func (rec *RequestExecutionCreate) Save(ctx context.Context) (*RequestExecution, error) {
	rec.defaults()
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RequestExecutionCreate) SaveX(ctx context.Context) *RequestExecution {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RequestExecutionCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RequestExecutionCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *RequestExecutionCreate) defaults() {
	if _, ok := rec.mutation.CreatedAt(); !ok {
		v := requestexecution.DefaultCreatedAt()
		rec.mutation.SetCreatedAt(v)
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		v := requestexecution.DefaultUpdatedAt()
		rec.mutation.SetUpdatedAt(v)
	}
	if _, ok := rec.mutation.Format(); !ok {
		v := requestexecution.DefaultFormat
		rec.mutation.SetFormat(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RequestExecutionCreate) check() error {
	if _, ok := rec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RequestExecution.created_at"`)}
	}
	if _, ok := rec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RequestExecution.updated_at"`)}
	}
	if _, ok := rec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RequestExecution.user_id"`)}
	}
	if _, ok := rec.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "RequestExecution.request_id"`)}
	}
	if _, ok := rec.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "RequestExecution.channel_id"`)}
	}
	if _, ok := rec.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "RequestExecution.model_id"`)}
	}
	if _, ok := rec.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "RequestExecution.format"`)}
	}
	if _, ok := rec.mutation.RequestBody(); !ok {
		return &ValidationError{Name: "request_body", err: errors.New(`ent: missing required field "RequestExecution.request_body"`)}
	}
	if _, ok := rec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RequestExecution.status"`)}
	}
	if v, ok := rec.mutation.Status(); ok {
		if err := requestexecution.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RequestExecution.status": %w`, err)}
		}
	}
	if len(rec.mutation.RequestIDs()) == 0 {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required edge "RequestExecution.request"`)}
	}
	if len(rec.mutation.ChannelIDs()) == 0 {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "RequestExecution.channel"`)}
	}
	return nil
}

func (rec *RequestExecutionCreate) sqlSave(ctx context.Context) (*RequestExecution, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RequestExecutionCreate) createSpec() (*RequestExecution, *sqlgraph.CreateSpec) {
	var (
		_node = &RequestExecution{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(requestexecution.Table, sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rec.conflict
	if value, ok := rec.mutation.CreatedAt(); ok {
		_spec.SetField(requestexecution.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rec.mutation.UpdatedAt(); ok {
		_spec.SetField(requestexecution.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rec.mutation.UserID(); ok {
		_spec.SetField(requestexecution.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := rec.mutation.ModelID(); ok {
		_spec.SetField(requestexecution.FieldModelID, field.TypeString, value)
		_node.ModelID = value
	}
	if value, ok := rec.mutation.Format(); ok {
		_spec.SetField(requestexecution.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := rec.mutation.RequestBody(); ok {
		_spec.SetField(requestexecution.FieldRequestBody, field.TypeJSON, value)
		_node.RequestBody = value
	}
	if value, ok := rec.mutation.ResponseBody(); ok {
		_spec.SetField(requestexecution.FieldResponseBody, field.TypeJSON, value)
		_node.ResponseBody = value
	}
	if value, ok := rec.mutation.ResponseChunks(); ok {
		_spec.SetField(requestexecution.FieldResponseChunks, field.TypeJSON, value)
		_node.ResponseChunks = value
	}
	if value, ok := rec.mutation.ErrorMessage(); ok {
		_spec.SetField(requestexecution.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := rec.mutation.Status(); ok {
		_spec.SetField(requestexecution.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rec.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestexecution.RequestTable,
			Columns: []string{requestexecution.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestexecution.ChannelTable,
			Columns: []string{requestexecution.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChannelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RequestExecution.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestExecutionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rec *RequestExecutionCreate) OnConflict(opts ...sql.ConflictOption) *RequestExecutionUpsertOne {
	rec.conflict = opts
	return &RequestExecutionUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *RequestExecutionCreate) OnConflictColumns(columns ...string) *RequestExecutionUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &RequestExecutionUpsertOne{
		create: rec,
	}
}

type (
	// RequestExecutionUpsertOne is the builder for "upsert"-ing
	//  one RequestExecution node.
	RequestExecutionUpsertOne struct {
		create *RequestExecutionCreate
	}

	// RequestExecutionUpsert is the "OnConflict" setter.
	RequestExecutionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestExecutionUpsert) SetUpdatedAt(v time.Time) *RequestExecutionUpsert {
	u.Set(requestexecution.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestExecutionUpsert) UpdateUpdatedAt() *RequestExecutionUpsert {
	u.SetExcluded(requestexecution.FieldUpdatedAt)
	return u
}

// SetResponseBody sets the "response_body" field.
func (u *RequestExecutionUpsert) SetResponseBody(v objects.JSONRawMessage) *RequestExecutionUpsert {
	u.Set(requestexecution.FieldResponseBody, v)
	return u
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestExecutionUpsert) UpdateResponseBody() *RequestExecutionUpsert {
	u.SetExcluded(requestexecution.FieldResponseBody)
	return u
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestExecutionUpsert) ClearResponseBody() *RequestExecutionUpsert {
	u.SetNull(requestexecution.FieldResponseBody)
	return u
}

// SetResponseChunks sets the "response_chunks" field.
func (u *RequestExecutionUpsert) SetResponseChunks(v []objects.JSONRawMessage) *RequestExecutionUpsert {
	u.Set(requestexecution.FieldResponseChunks, v)
	return u
}

// UpdateResponseChunks sets the "response_chunks" field to the value that was provided on create.
func (u *RequestExecutionUpsert) UpdateResponseChunks() *RequestExecutionUpsert {
	u.SetExcluded(requestexecution.FieldResponseChunks)
	return u
}

// ClearResponseChunks clears the value of the "response_chunks" field.
func (u *RequestExecutionUpsert) ClearResponseChunks() *RequestExecutionUpsert {
	u.SetNull(requestexecution.FieldResponseChunks)
	return u
}

// SetErrorMessage sets the "error_message" field.
func (u *RequestExecutionUpsert) SetErrorMessage(v string) *RequestExecutionUpsert {
	u.Set(requestexecution.FieldErrorMessage, v)
	return u
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *RequestExecutionUpsert) UpdateErrorMessage() *RequestExecutionUpsert {
	u.SetExcluded(requestexecution.FieldErrorMessage)
	return u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *RequestExecutionUpsert) ClearErrorMessage() *RequestExecutionUpsert {
	u.SetNull(requestexecution.FieldErrorMessage)
	return u
}

// SetStatus sets the "status" field.
func (u *RequestExecutionUpsert) SetStatus(v requestexecution.Status) *RequestExecutionUpsert {
	u.Set(requestexecution.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestExecutionUpsert) UpdateStatus() *RequestExecutionUpsert {
	u.SetExcluded(requestexecution.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RequestExecutionUpsertOne) UpdateNewValues() *RequestExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(requestexecution.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(requestexecution.FieldUserID)
		}
		if _, exists := u.create.mutation.RequestID(); exists {
			s.SetIgnore(requestexecution.FieldRequestID)
		}
		if _, exists := u.create.mutation.ChannelID(); exists {
			s.SetIgnore(requestexecution.FieldChannelID)
		}
		if _, exists := u.create.mutation.ModelID(); exists {
			s.SetIgnore(requestexecution.FieldModelID)
		}
		if _, exists := u.create.mutation.Format(); exists {
			s.SetIgnore(requestexecution.FieldFormat)
		}
		if _, exists := u.create.mutation.RequestBody(); exists {
			s.SetIgnore(requestexecution.FieldRequestBody)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RequestExecutionUpsertOne) Ignore() *RequestExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestExecutionUpsertOne) DoNothing() *RequestExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestExecutionCreate.OnConflict
// documentation for more info.
func (u *RequestExecutionUpsertOne) Update(set func(*RequestExecutionUpsert)) *RequestExecutionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestExecutionUpsertOne) SetUpdatedAt(v time.Time) *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestExecutionUpsertOne) UpdateUpdatedAt() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *RequestExecutionUpsertOne) SetResponseBody(v objects.JSONRawMessage) *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestExecutionUpsertOne) UpdateResponseBody() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestExecutionUpsertOne) ClearResponseBody() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearResponseBody()
	})
}

// SetResponseChunks sets the "response_chunks" field.
func (u *RequestExecutionUpsertOne) SetResponseChunks(v []objects.JSONRawMessage) *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetResponseChunks(v)
	})
}

// UpdateResponseChunks sets the "response_chunks" field to the value that was provided on create.
func (u *RequestExecutionUpsertOne) UpdateResponseChunks() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateResponseChunks()
	})
}

// ClearResponseChunks clears the value of the "response_chunks" field.
func (u *RequestExecutionUpsertOne) ClearResponseChunks() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearResponseChunks()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *RequestExecutionUpsertOne) SetErrorMessage(v string) *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *RequestExecutionUpsertOne) UpdateErrorMessage() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *RequestExecutionUpsertOne) ClearErrorMessage() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearErrorMessage()
	})
}

// SetStatus sets the "status" field.
func (u *RequestExecutionUpsertOne) SetStatus(v requestexecution.Status) *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestExecutionUpsertOne) UpdateStatus() *RequestExecutionUpsertOne {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *RequestExecutionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestExecutionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestExecutionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RequestExecutionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RequestExecutionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RequestExecutionCreateBulk is the builder for creating many RequestExecution entities in bulk.
type RequestExecutionCreateBulk struct {
	config
	err      error
	builders []*RequestExecutionCreate
	conflict []sql.ConflictOption
}

// Save creates the RequestExecution entities in the database.
func (recb *RequestExecutionCreateBulk) Save(ctx context.Context) ([]*RequestExecution, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RequestExecution, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RequestExecutionCreateBulk) SaveX(ctx context.Context) []*RequestExecution {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RequestExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RequestExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RequestExecution.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestExecutionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (recb *RequestExecutionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RequestExecutionUpsertBulk {
	recb.conflict = opts
	return &RequestExecutionUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *RequestExecutionCreateBulk) OnConflictColumns(columns ...string) *RequestExecutionUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &RequestExecutionUpsertBulk{
		create: recb,
	}
}

// RequestExecutionUpsertBulk is the builder for "upsert"-ing
// a bulk of RequestExecution nodes.
type RequestExecutionUpsertBulk struct {
	create *RequestExecutionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RequestExecutionUpsertBulk) UpdateNewValues() *RequestExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(requestexecution.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(requestexecution.FieldUserID)
			}
			if _, exists := b.mutation.RequestID(); exists {
				s.SetIgnore(requestexecution.FieldRequestID)
			}
			if _, exists := b.mutation.ChannelID(); exists {
				s.SetIgnore(requestexecution.FieldChannelID)
			}
			if _, exists := b.mutation.ModelID(); exists {
				s.SetIgnore(requestexecution.FieldModelID)
			}
			if _, exists := b.mutation.Format(); exists {
				s.SetIgnore(requestexecution.FieldFormat)
			}
			if _, exists := b.mutation.RequestBody(); exists {
				s.SetIgnore(requestexecution.FieldRequestBody)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RequestExecution.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RequestExecutionUpsertBulk) Ignore() *RequestExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestExecutionUpsertBulk) DoNothing() *RequestExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestExecutionCreateBulk.OnConflict
// documentation for more info.
func (u *RequestExecutionUpsertBulk) Update(set func(*RequestExecutionUpsert)) *RequestExecutionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestExecutionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestExecutionUpsertBulk) SetUpdatedAt(v time.Time) *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestExecutionUpsertBulk) UpdateUpdatedAt() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *RequestExecutionUpsertBulk) SetResponseBody(v objects.JSONRawMessage) *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestExecutionUpsertBulk) UpdateResponseBody() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestExecutionUpsertBulk) ClearResponseBody() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearResponseBody()
	})
}

// SetResponseChunks sets the "response_chunks" field.
func (u *RequestExecutionUpsertBulk) SetResponseChunks(v []objects.JSONRawMessage) *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetResponseChunks(v)
	})
}

// UpdateResponseChunks sets the "response_chunks" field to the value that was provided on create.
func (u *RequestExecutionUpsertBulk) UpdateResponseChunks() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateResponseChunks()
	})
}

// ClearResponseChunks clears the value of the "response_chunks" field.
func (u *RequestExecutionUpsertBulk) ClearResponseChunks() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearResponseChunks()
	})
}

// SetErrorMessage sets the "error_message" field.
func (u *RequestExecutionUpsertBulk) SetErrorMessage(v string) *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetErrorMessage(v)
	})
}

// UpdateErrorMessage sets the "error_message" field to the value that was provided on create.
func (u *RequestExecutionUpsertBulk) UpdateErrorMessage() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateErrorMessage()
	})
}

// ClearErrorMessage clears the value of the "error_message" field.
func (u *RequestExecutionUpsertBulk) ClearErrorMessage() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.ClearErrorMessage()
	})
}

// SetStatus sets the "status" field.
func (u *RequestExecutionUpsertBulk) SetStatus(v requestexecution.Status) *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestExecutionUpsertBulk) UpdateStatus() *RequestExecutionUpsertBulk {
	return u.Update(func(s *RequestExecutionUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *RequestExecutionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RequestExecutionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestExecutionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestExecutionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
