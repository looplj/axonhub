// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// APIKeysColumns holds the columns for the "api_keys" table.
	APIKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "key", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"enabled", "disabled"}, Default: "enabled"},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// APIKeysTable holds the schema information for the "api_keys" table.
	APIKeysTable = &schema.Table{
		Name:       "api_keys",
		Columns:    APIKeysColumns,
		PrimaryKey: []*schema.Column{APIKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "api_keys_users_api_keys",
				Columns:    []*schema.Column{APIKeysColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "api_keys_by_user_id",
				Unique:  false,
				Columns: []*schema.Column{APIKeysColumns[8]},
			},
			{
				Name:    "api_keys_by_key",
				Unique:  true,
				Columns: []*schema.Column{APIKeysColumns[4]},
			},
		},
	}
	// ChannelsColumns holds the columns for the "channels" table.
	ChannelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"openai", "anthropic", "anthropic_aws", "gemini", "deepseek", "doubao", "kimi"}},
		{Name: "base_url", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"enabled", "disabled"}, Default: "enabled"},
		{Name: "credentials", Type: field.TypeJSON},
		{Name: "supported_models", Type: field.TypeJSON},
		{Name: "default_test_model", Type: field.TypeString},
		{Name: "settings", Type: field.TypeJSON, Nullable: true},
	}
	// ChannelsTable holds the schema information for the "channels" table.
	ChannelsTable = &schema.Table{
		Name:       "channels",
		Columns:    ChannelsColumns,
		PrimaryKey: []*schema.Column{ChannelsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "channels_by_name",
				Unique:  true,
				Columns: []*schema.Column{ChannelsColumns[6]},
			},
		},
	}
	// JobsColumns holds the columns for the "jobs" table.
	JobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "owner_id", Type: field.TypeInt},
		{Name: "type", Type: field.TypeString},
		{Name: "context", Type: field.TypeString},
	}
	// JobsTable holds the schema information for the "jobs" table.
	JobsTable = &schema.Table{
		Name:       "jobs",
		Columns:    JobsColumns,
		PrimaryKey: []*schema.Column{JobsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "jobs_by_owner_id_type",
				Unique:  true,
				Columns: []*schema.Column{JobsColumns[1], JobsColumns[2]},
			},
		},
	}
	// RequestsColumns holds the columns for the "requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "model_id", Type: field.TypeString},
		{Name: "format", Type: field.TypeString, Default: "openai/chat_completions"},
		{Name: "request_body", Type: field.TypeJSON},
		{Name: "response_body", Type: field.TypeJSON, Nullable: true},
		{Name: "response_chunks", Type: field.TypeJSON, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "completed", "failed"}},
		{Name: "api_key_id", Type: field.TypeInt, Nullable: true},
		{Name: "channel_requests", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// RequestsTable holds the schema information for the "requests" table.
	RequestsTable = &schema.Table{
		Name:       "requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "requests_api_keys_requests",
				Columns:    []*schema.Column{RequestsColumns[10]},
				RefColumns: []*schema.Column{APIKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "requests_channels_requests",
				Columns:    []*schema.Column{RequestsColumns[11]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "requests_users_requests",
				Columns:    []*schema.Column{RequestsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "requests_by_user_id",
				Unique:  false,
				Columns: []*schema.Column{RequestsColumns[12]},
			},
			{
				Name:    "requests_by_api_key_id",
				Unique:  false,
				Columns: []*schema.Column{RequestsColumns[10]},
			},
		},
	}
	// RequestExecutionsColumns holds the columns for the "request_executions" table.
	RequestExecutionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "model_id", Type: field.TypeString},
		{Name: "format", Type: field.TypeString, Default: "openai/chat_completions"},
		{Name: "request_body", Type: field.TypeJSON},
		{Name: "response_body", Type: field.TypeJSON, Nullable: true},
		{Name: "response_chunks", Type: field.TypeJSON, Nullable: true},
		{Name: "error_message", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "completed", "failed"}},
		{Name: "channel_id", Type: field.TypeInt},
		{Name: "request_id", Type: field.TypeInt},
	}
	// RequestExecutionsTable holds the schema information for the "request_executions" table.
	RequestExecutionsTable = &schema.Table{
		Name:       "request_executions",
		Columns:    RequestExecutionsColumns,
		PrimaryKey: []*schema.Column{RequestExecutionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "request_executions_channels_executions",
				Columns:    []*schema.Column{RequestExecutionsColumns[11]},
				RefColumns: []*schema.Column{ChannelsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "request_executions_requests_executions",
				Columns:    []*schema.Column{RequestExecutionsColumns[12]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "request_executions_by_request_id",
				Unique:  true,
				Columns: []*schema.Column{RequestExecutionsColumns[12]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "roles_by_code",
				Unique:  true,
				Columns: []*schema.Column{RolesColumns[4]},
			},
		},
	}
	// SystemsColumns holds the columns for the "systems" table.
	SystemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "value", Type: field.TypeString},
	}
	// SystemsTable holds the schema information for the "systems" table.
	SystemsTable = &schema.Table{
		Name:       "systems",
		Columns:    SystemsColumns,
		PrimaryKey: []*schema.Column{SystemsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeInt, Default: 0},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"activated", "deactivated"}, Default: "activated"},
		{Name: "prefer_language", Type: field.TypeString, Default: "en"},
		{Name: "password", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString, Default: ""},
		{Name: "last_name", Type: field.TypeString, Default: ""},
		{Name: "is_owner", Type: field.TypeBool, Default: false},
		{Name: "scopes", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "role_id", Type: field.TypeInt},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0], UserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_user_id",
				Columns:    []*schema.Column{UserRolesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_roles_role_id",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		APIKeysTable,
		ChannelsTable,
		JobsTable,
		RequestsTable,
		RequestExecutionsTable,
		RolesTable,
		SystemsTable,
		UsersTable,
		UserRolesTable,
	}
)

func init() {
	APIKeysTable.ForeignKeys[0].RefTable = UsersTable
	RequestsTable.ForeignKeys[0].RefTable = APIKeysTable
	RequestsTable.ForeignKeys[1].RefTable = ChannelsTable
	RequestsTable.ForeignKeys[2].RefTable = UsersTable
	RequestExecutionsTable.ForeignKeys[0].RefTable = ChannelsTable
	RequestExecutionsTable.ForeignKeys[1].RefTable = RequestsTable
	UserRolesTable.ForeignKeys[0].RefTable = UsersTable
	UserRolesTable.ForeignKeys[1].RefTable = RolesTable
}
