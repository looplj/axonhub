// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/usagelog"
	"github.com/looplj/axonhub/internal/ent/user"
)

// UsageLogCreate is the builder for creating a UsageLog entity.
type UsageLogCreate struct {
	config
	mutation *UsageLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ulc *UsageLogCreate) SetCreatedAt(t time.Time) *UsageLogCreate {
	ulc.mutation.SetCreatedAt(t)
	return ulc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCreatedAt(t *time.Time) *UsageLogCreate {
	if t != nil {
		ulc.SetCreatedAt(*t)
	}
	return ulc
}

// SetUpdatedAt sets the "updated_at" field.
func (ulc *UsageLogCreate) SetUpdatedAt(t time.Time) *UsageLogCreate {
	ulc.mutation.SetUpdatedAt(t)
	return ulc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableUpdatedAt(t *time.Time) *UsageLogCreate {
	if t != nil {
		ulc.SetUpdatedAt(*t)
	}
	return ulc
}

// SetDeletedAt sets the "deleted_at" field.
func (ulc *UsageLogCreate) SetDeletedAt(i int) *UsageLogCreate {
	ulc.mutation.SetDeletedAt(i)
	return ulc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableDeletedAt(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetDeletedAt(*i)
	}
	return ulc
}

// SetUserID sets the "user_id" field.
func (ulc *UsageLogCreate) SetUserID(i int) *UsageLogCreate {
	ulc.mutation.SetUserID(i)
	return ulc
}

// SetRequestID sets the "request_id" field.
func (ulc *UsageLogCreate) SetRequestID(i int) *UsageLogCreate {
	ulc.mutation.SetRequestID(i)
	return ulc
}

// SetChannelID sets the "channel_id" field.
func (ulc *UsageLogCreate) SetChannelID(i int) *UsageLogCreate {
	ulc.mutation.SetChannelID(i)
	return ulc
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableChannelID(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetChannelID(*i)
	}
	return ulc
}

// SetModelID sets the "model_id" field.
func (ulc *UsageLogCreate) SetModelID(s string) *UsageLogCreate {
	ulc.mutation.SetModelID(s)
	return ulc
}

// SetPromptTokens sets the "prompt_tokens" field.
func (ulc *UsageLogCreate) SetPromptTokens(i int) *UsageLogCreate {
	ulc.mutation.SetPromptTokens(i)
	return ulc
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillablePromptTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetPromptTokens(*i)
	}
	return ulc
}

// SetCompletionTokens sets the "completion_tokens" field.
func (ulc *UsageLogCreate) SetCompletionTokens(i int) *UsageLogCreate {
	ulc.mutation.SetCompletionTokens(i)
	return ulc
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCompletionTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetCompletionTokens(*i)
	}
	return ulc
}

// SetTotalTokens sets the "total_tokens" field.
func (ulc *UsageLogCreate) SetTotalTokens(i int) *UsageLogCreate {
	ulc.mutation.SetTotalTokens(i)
	return ulc
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableTotalTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetTotalTokens(*i)
	}
	return ulc
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (ulc *UsageLogCreate) SetPromptAudioTokens(i int) *UsageLogCreate {
	ulc.mutation.SetPromptAudioTokens(i)
	return ulc
}

// SetNillablePromptAudioTokens sets the "prompt_audio_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillablePromptAudioTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetPromptAudioTokens(*i)
	}
	return ulc
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (ulc *UsageLogCreate) SetPromptCachedTokens(i int) *UsageLogCreate {
	ulc.mutation.SetPromptCachedTokens(i)
	return ulc
}

// SetNillablePromptCachedTokens sets the "prompt_cached_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillablePromptCachedTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetPromptCachedTokens(*i)
	}
	return ulc
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (ulc *UsageLogCreate) SetCompletionAudioTokens(i int) *UsageLogCreate {
	ulc.mutation.SetCompletionAudioTokens(i)
	return ulc
}

// SetNillableCompletionAudioTokens sets the "completion_audio_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCompletionAudioTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetCompletionAudioTokens(*i)
	}
	return ulc
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (ulc *UsageLogCreate) SetCompletionReasoningTokens(i int) *UsageLogCreate {
	ulc.mutation.SetCompletionReasoningTokens(i)
	return ulc
}

// SetNillableCompletionReasoningTokens sets the "completion_reasoning_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCompletionReasoningTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetCompletionReasoningTokens(*i)
	}
	return ulc
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (ulc *UsageLogCreate) SetCompletionAcceptedPredictionTokens(i int) *UsageLogCreate {
	ulc.mutation.SetCompletionAcceptedPredictionTokens(i)
	return ulc
}

// SetNillableCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCompletionAcceptedPredictionTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetCompletionAcceptedPredictionTokens(*i)
	}
	return ulc
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (ulc *UsageLogCreate) SetCompletionRejectedPredictionTokens(i int) *UsageLogCreate {
	ulc.mutation.SetCompletionRejectedPredictionTokens(i)
	return ulc
}

// SetNillableCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableCompletionRejectedPredictionTokens(i *int) *UsageLogCreate {
	if i != nil {
		ulc.SetCompletionRejectedPredictionTokens(*i)
	}
	return ulc
}

// SetSource sets the "source" field.
func (ulc *UsageLogCreate) SetSource(u usagelog.Source) *UsageLogCreate {
	ulc.mutation.SetSource(u)
	return ulc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableSource(u *usagelog.Source) *UsageLogCreate {
	if u != nil {
		ulc.SetSource(*u)
	}
	return ulc
}

// SetFormat sets the "format" field.
func (ulc *UsageLogCreate) SetFormat(s string) *UsageLogCreate {
	ulc.mutation.SetFormat(s)
	return ulc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (ulc *UsageLogCreate) SetNillableFormat(s *string) *UsageLogCreate {
	if s != nil {
		ulc.SetFormat(*s)
	}
	return ulc
}

// SetUser sets the "user" edge to the User entity.
func (ulc *UsageLogCreate) SetUser(u *User) *UsageLogCreate {
	return ulc.SetUserID(u.ID)
}

// SetRequest sets the "request" edge to the Request entity.
func (ulc *UsageLogCreate) SetRequest(r *Request) *UsageLogCreate {
	return ulc.SetRequestID(r.ID)
}

// SetChannel sets the "channel" edge to the Channel entity.
func (ulc *UsageLogCreate) SetChannel(c *Channel) *UsageLogCreate {
	return ulc.SetChannelID(c.ID)
}

// Mutation returns the UsageLogMutation object of the builder.
func (ulc *UsageLogCreate) Mutation() *UsageLogMutation {
	return ulc.mutation
}

// Save creates the UsageLog in the database.
func (ulc *UsageLogCreate) Save(ctx context.Context) (*UsageLog, error) {
	if err := ulc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ulc.sqlSave, ulc.mutation, ulc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UsageLogCreate) SaveX(ctx context.Context) *UsageLog {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulc *UsageLogCreate) Exec(ctx context.Context) error {
	_, err := ulc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulc *UsageLogCreate) ExecX(ctx context.Context) {
	if err := ulc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulc *UsageLogCreate) defaults() error {
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		if usagelog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized usagelog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := usagelog.DefaultCreatedAt()
		ulc.mutation.SetCreatedAt(v)
	}
	if _, ok := ulc.mutation.UpdatedAt(); !ok {
		if usagelog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usagelog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usagelog.DefaultUpdatedAt()
		ulc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ulc.mutation.DeletedAt(); !ok {
		v := usagelog.DefaultDeletedAt
		ulc.mutation.SetDeletedAt(v)
	}
	if _, ok := ulc.mutation.PromptTokens(); !ok {
		v := usagelog.DefaultPromptTokens
		ulc.mutation.SetPromptTokens(v)
	}
	if _, ok := ulc.mutation.CompletionTokens(); !ok {
		v := usagelog.DefaultCompletionTokens
		ulc.mutation.SetCompletionTokens(v)
	}
	if _, ok := ulc.mutation.TotalTokens(); !ok {
		v := usagelog.DefaultTotalTokens
		ulc.mutation.SetTotalTokens(v)
	}
	if _, ok := ulc.mutation.PromptAudioTokens(); !ok {
		v := usagelog.DefaultPromptAudioTokens
		ulc.mutation.SetPromptAudioTokens(v)
	}
	if _, ok := ulc.mutation.PromptCachedTokens(); !ok {
		v := usagelog.DefaultPromptCachedTokens
		ulc.mutation.SetPromptCachedTokens(v)
	}
	if _, ok := ulc.mutation.CompletionAudioTokens(); !ok {
		v := usagelog.DefaultCompletionAudioTokens
		ulc.mutation.SetCompletionAudioTokens(v)
	}
	if _, ok := ulc.mutation.CompletionReasoningTokens(); !ok {
		v := usagelog.DefaultCompletionReasoningTokens
		ulc.mutation.SetCompletionReasoningTokens(v)
	}
	if _, ok := ulc.mutation.CompletionAcceptedPredictionTokens(); !ok {
		v := usagelog.DefaultCompletionAcceptedPredictionTokens
		ulc.mutation.SetCompletionAcceptedPredictionTokens(v)
	}
	if _, ok := ulc.mutation.CompletionRejectedPredictionTokens(); !ok {
		v := usagelog.DefaultCompletionRejectedPredictionTokens
		ulc.mutation.SetCompletionRejectedPredictionTokens(v)
	}
	if _, ok := ulc.mutation.Source(); !ok {
		v := usagelog.DefaultSource
		ulc.mutation.SetSource(v)
	}
	if _, ok := ulc.mutation.Format(); !ok {
		v := usagelog.DefaultFormat
		ulc.mutation.SetFormat(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ulc *UsageLogCreate) check() error {
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UsageLog.created_at"`)}
	}
	if _, ok := ulc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UsageLog.updated_at"`)}
	}
	if _, ok := ulc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "UsageLog.deleted_at"`)}
	}
	if _, ok := ulc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UsageLog.user_id"`)}
	}
	if _, ok := ulc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "UsageLog.request_id"`)}
	}
	if _, ok := ulc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "UsageLog.model_id"`)}
	}
	if _, ok := ulc.mutation.PromptTokens(); !ok {
		return &ValidationError{Name: "prompt_tokens", err: errors.New(`ent: missing required field "UsageLog.prompt_tokens"`)}
	}
	if _, ok := ulc.mutation.CompletionTokens(); !ok {
		return &ValidationError{Name: "completion_tokens", err: errors.New(`ent: missing required field "UsageLog.completion_tokens"`)}
	}
	if _, ok := ulc.mutation.TotalTokens(); !ok {
		return &ValidationError{Name: "total_tokens", err: errors.New(`ent: missing required field "UsageLog.total_tokens"`)}
	}
	if _, ok := ulc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "UsageLog.source"`)}
	}
	if v, ok := ulc.mutation.Source(); ok {
		if err := usagelog.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "UsageLog.source": %w`, err)}
		}
	}
	if _, ok := ulc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "UsageLog.format"`)}
	}
	if len(ulc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UsageLog.user"`)}
	}
	if len(ulc.mutation.RequestIDs()) == 0 {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required edge "UsageLog.request"`)}
	}
	return nil
}

func (ulc *UsageLogCreate) sqlSave(ctx context.Context) (*UsageLog, error) {
	if err := ulc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ulc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ulc.mutation.id = &_node.ID
	ulc.mutation.done = true
	return _node, nil
}

func (ulc *UsageLogCreate) createSpec() (*UsageLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UsageLog{config: ulc.config}
		_spec = sqlgraph.NewCreateSpec(usagelog.Table, sqlgraph.NewFieldSpec(usagelog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ulc.conflict
	if value, ok := ulc.mutation.CreatedAt(); ok {
		_spec.SetField(usagelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ulc.mutation.UpdatedAt(); ok {
		_spec.SetField(usagelog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ulc.mutation.DeletedAt(); ok {
		_spec.SetField(usagelog.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := ulc.mutation.ModelID(); ok {
		_spec.SetField(usagelog.FieldModelID, field.TypeString, value)
		_node.ModelID = value
	}
	if value, ok := ulc.mutation.PromptTokens(); ok {
		_spec.SetField(usagelog.FieldPromptTokens, field.TypeInt, value)
		_node.PromptTokens = value
	}
	if value, ok := ulc.mutation.CompletionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionTokens, field.TypeInt, value)
		_node.CompletionTokens = value
	}
	if value, ok := ulc.mutation.TotalTokens(); ok {
		_spec.SetField(usagelog.FieldTotalTokens, field.TypeInt, value)
		_node.TotalTokens = value
	}
	if value, ok := ulc.mutation.PromptAudioTokens(); ok {
		_spec.SetField(usagelog.FieldPromptAudioTokens, field.TypeInt, value)
		_node.PromptAudioTokens = value
	}
	if value, ok := ulc.mutation.PromptCachedTokens(); ok {
		_spec.SetField(usagelog.FieldPromptCachedTokens, field.TypeInt, value)
		_node.PromptCachedTokens = value
	}
	if value, ok := ulc.mutation.CompletionAudioTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAudioTokens, field.TypeInt, value)
		_node.CompletionAudioTokens = value
	}
	if value, ok := ulc.mutation.CompletionReasoningTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionReasoningTokens, field.TypeInt, value)
		_node.CompletionReasoningTokens = value
	}
	if value, ok := ulc.mutation.CompletionAcceptedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt, value)
		_node.CompletionAcceptedPredictionTokens = value
	}
	if value, ok := ulc.mutation.CompletionRejectedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt, value)
		_node.CompletionRejectedPredictionTokens = value
	}
	if value, ok := ulc.mutation.Source(); ok {
		_spec.SetField(usagelog.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := ulc.mutation.Format(); ok {
		_spec.SetField(usagelog.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if nodes := ulc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.UserTable,
			Columns: []string{usagelog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.RequestTable,
			Columns: []string{usagelog.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.ChannelTable,
			Columns: []string{usagelog.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChannelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UsageLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsageLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ulc *UsageLogCreate) OnConflict(opts ...sql.ConflictOption) *UsageLogUpsertOne {
	ulc.conflict = opts
	return &UsageLogUpsertOne{
		create: ulc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ulc *UsageLogCreate) OnConflictColumns(columns ...string) *UsageLogUpsertOne {
	ulc.conflict = append(ulc.conflict, sql.ConflictColumns(columns...))
	return &UsageLogUpsertOne{
		create: ulc,
	}
}

type (
	// UsageLogUpsertOne is the builder for "upsert"-ing
	//  one UsageLog node.
	UsageLogUpsertOne struct {
		create *UsageLogCreate
	}

	// UsageLogUpsert is the "OnConflict" setter.
	UsageLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UsageLogUpsert) SetUpdatedAt(v time.Time) *UsageLogUpsert {
	u.Set(usagelog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateUpdatedAt() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsageLogUpsert) SetDeletedAt(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateDeletedAt() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UsageLogUpsert) AddDeletedAt(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldDeletedAt, v)
	return u
}

// SetChannelID sets the "channel_id" field.
func (u *UsageLogUpsert) SetChannelID(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldChannelID, v)
	return u
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateChannelID() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldChannelID)
	return u
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *UsageLogUpsert) ClearChannelID() *UsageLogUpsert {
	u.SetNull(usagelog.FieldChannelID)
	return u
}

// SetPromptTokens sets the "prompt_tokens" field.
func (u *UsageLogUpsert) SetPromptTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldPromptTokens, v)
	return u
}

// UpdatePromptTokens sets the "prompt_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdatePromptTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldPromptTokens)
	return u
}

// AddPromptTokens adds v to the "prompt_tokens" field.
func (u *UsageLogUpsert) AddPromptTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldPromptTokens, v)
	return u
}

// SetCompletionTokens sets the "completion_tokens" field.
func (u *UsageLogUpsert) SetCompletionTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldCompletionTokens, v)
	return u
}

// UpdateCompletionTokens sets the "completion_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateCompletionTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldCompletionTokens)
	return u
}

// AddCompletionTokens adds v to the "completion_tokens" field.
func (u *UsageLogUpsert) AddCompletionTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldCompletionTokens, v)
	return u
}

// SetTotalTokens sets the "total_tokens" field.
func (u *UsageLogUpsert) SetTotalTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldTotalTokens, v)
	return u
}

// UpdateTotalTokens sets the "total_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateTotalTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldTotalTokens)
	return u
}

// AddTotalTokens adds v to the "total_tokens" field.
func (u *UsageLogUpsert) AddTotalTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldTotalTokens, v)
	return u
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (u *UsageLogUpsert) SetPromptAudioTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldPromptAudioTokens, v)
	return u
}

// UpdatePromptAudioTokens sets the "prompt_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdatePromptAudioTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldPromptAudioTokens)
	return u
}

// AddPromptAudioTokens adds v to the "prompt_audio_tokens" field.
func (u *UsageLogUpsert) AddPromptAudioTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldPromptAudioTokens, v)
	return u
}

// ClearPromptAudioTokens clears the value of the "prompt_audio_tokens" field.
func (u *UsageLogUpsert) ClearPromptAudioTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldPromptAudioTokens)
	return u
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (u *UsageLogUpsert) SetPromptCachedTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldPromptCachedTokens, v)
	return u
}

// UpdatePromptCachedTokens sets the "prompt_cached_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdatePromptCachedTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldPromptCachedTokens)
	return u
}

// AddPromptCachedTokens adds v to the "prompt_cached_tokens" field.
func (u *UsageLogUpsert) AddPromptCachedTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldPromptCachedTokens, v)
	return u
}

// ClearPromptCachedTokens clears the value of the "prompt_cached_tokens" field.
func (u *UsageLogUpsert) ClearPromptCachedTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldPromptCachedTokens)
	return u
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (u *UsageLogUpsert) SetCompletionAudioTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldCompletionAudioTokens, v)
	return u
}

// UpdateCompletionAudioTokens sets the "completion_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateCompletionAudioTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldCompletionAudioTokens)
	return u
}

// AddCompletionAudioTokens adds v to the "completion_audio_tokens" field.
func (u *UsageLogUpsert) AddCompletionAudioTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldCompletionAudioTokens, v)
	return u
}

// ClearCompletionAudioTokens clears the value of the "completion_audio_tokens" field.
func (u *UsageLogUpsert) ClearCompletionAudioTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldCompletionAudioTokens)
	return u
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (u *UsageLogUpsert) SetCompletionReasoningTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldCompletionReasoningTokens, v)
	return u
}

// UpdateCompletionReasoningTokens sets the "completion_reasoning_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateCompletionReasoningTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldCompletionReasoningTokens)
	return u
}

// AddCompletionReasoningTokens adds v to the "completion_reasoning_tokens" field.
func (u *UsageLogUpsert) AddCompletionReasoningTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldCompletionReasoningTokens, v)
	return u
}

// ClearCompletionReasoningTokens clears the value of the "completion_reasoning_tokens" field.
func (u *UsageLogUpsert) ClearCompletionReasoningTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldCompletionReasoningTokens)
	return u
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsert) SetCompletionAcceptedPredictionTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldCompletionAcceptedPredictionTokens, v)
	return u
}

// UpdateCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateCompletionAcceptedPredictionTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldCompletionAcceptedPredictionTokens)
	return u
}

// AddCompletionAcceptedPredictionTokens adds v to the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsert) AddCompletionAcceptedPredictionTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldCompletionAcceptedPredictionTokens, v)
	return u
}

// ClearCompletionAcceptedPredictionTokens clears the value of the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsert) ClearCompletionAcceptedPredictionTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldCompletionAcceptedPredictionTokens)
	return u
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsert) SetCompletionRejectedPredictionTokens(v int) *UsageLogUpsert {
	u.Set(usagelog.FieldCompletionRejectedPredictionTokens, v)
	return u
}

// UpdateCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsert) UpdateCompletionRejectedPredictionTokens() *UsageLogUpsert {
	u.SetExcluded(usagelog.FieldCompletionRejectedPredictionTokens)
	return u
}

// AddCompletionRejectedPredictionTokens adds v to the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsert) AddCompletionRejectedPredictionTokens(v int) *UsageLogUpsert {
	u.Add(usagelog.FieldCompletionRejectedPredictionTokens, v)
	return u
}

// ClearCompletionRejectedPredictionTokens clears the value of the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsert) ClearCompletionRejectedPredictionTokens() *UsageLogUpsert {
	u.SetNull(usagelog.FieldCompletionRejectedPredictionTokens)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UsageLogUpsertOne) UpdateNewValues() *UsageLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usagelog.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(usagelog.FieldUserID)
		}
		if _, exists := u.create.mutation.RequestID(); exists {
			s.SetIgnore(usagelog.FieldRequestID)
		}
		if _, exists := u.create.mutation.ModelID(); exists {
			s.SetIgnore(usagelog.FieldModelID)
		}
		if _, exists := u.create.mutation.Source(); exists {
			s.SetIgnore(usagelog.FieldSource)
		}
		if _, exists := u.create.mutation.Format(); exists {
			s.SetIgnore(usagelog.FieldFormat)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UsageLogUpsertOne) Ignore() *UsageLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsageLogUpsertOne) DoNothing() *UsageLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsageLogCreate.OnConflict
// documentation for more info.
func (u *UsageLogUpsertOne) Update(set func(*UsageLogUpsert)) *UsageLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsageLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UsageLogUpsertOne) SetUpdatedAt(v time.Time) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateUpdatedAt() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsageLogUpsertOne) SetDeletedAt(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UsageLogUpsertOne) AddDeletedAt(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateDeletedAt() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *UsageLogUpsertOne) SetChannelID(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateChannelID() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *UsageLogUpsertOne) ClearChannelID() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearChannelID()
	})
}

// SetPromptTokens sets the "prompt_tokens" field.
func (u *UsageLogUpsertOne) SetPromptTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptTokens(v)
	})
}

// AddPromptTokens adds v to the "prompt_tokens" field.
func (u *UsageLogUpsertOne) AddPromptTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptTokens(v)
	})
}

// UpdatePromptTokens sets the "prompt_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdatePromptTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptTokens()
	})
}

// SetCompletionTokens sets the "completion_tokens" field.
func (u *UsageLogUpsertOne) SetCompletionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionTokens(v)
	})
}

// AddCompletionTokens adds v to the "completion_tokens" field.
func (u *UsageLogUpsertOne) AddCompletionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionTokens(v)
	})
}

// UpdateCompletionTokens sets the "completion_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateCompletionTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionTokens()
	})
}

// SetTotalTokens sets the "total_tokens" field.
func (u *UsageLogUpsertOne) SetTotalTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetTotalTokens(v)
	})
}

// AddTotalTokens adds v to the "total_tokens" field.
func (u *UsageLogUpsertOne) AddTotalTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddTotalTokens(v)
	})
}

// UpdateTotalTokens sets the "total_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateTotalTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateTotalTokens()
	})
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (u *UsageLogUpsertOne) SetPromptAudioTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptAudioTokens(v)
	})
}

// AddPromptAudioTokens adds v to the "prompt_audio_tokens" field.
func (u *UsageLogUpsertOne) AddPromptAudioTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptAudioTokens(v)
	})
}

// UpdatePromptAudioTokens sets the "prompt_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdatePromptAudioTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptAudioTokens()
	})
}

// ClearPromptAudioTokens clears the value of the "prompt_audio_tokens" field.
func (u *UsageLogUpsertOne) ClearPromptAudioTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearPromptAudioTokens()
	})
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (u *UsageLogUpsertOne) SetPromptCachedTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptCachedTokens(v)
	})
}

// AddPromptCachedTokens adds v to the "prompt_cached_tokens" field.
func (u *UsageLogUpsertOne) AddPromptCachedTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptCachedTokens(v)
	})
}

// UpdatePromptCachedTokens sets the "prompt_cached_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdatePromptCachedTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptCachedTokens()
	})
}

// ClearPromptCachedTokens clears the value of the "prompt_cached_tokens" field.
func (u *UsageLogUpsertOne) ClearPromptCachedTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearPromptCachedTokens()
	})
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (u *UsageLogUpsertOne) SetCompletionAudioTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionAudioTokens(v)
	})
}

// AddCompletionAudioTokens adds v to the "completion_audio_tokens" field.
func (u *UsageLogUpsertOne) AddCompletionAudioTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionAudioTokens(v)
	})
}

// UpdateCompletionAudioTokens sets the "completion_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateCompletionAudioTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionAudioTokens()
	})
}

// ClearCompletionAudioTokens clears the value of the "completion_audio_tokens" field.
func (u *UsageLogUpsertOne) ClearCompletionAudioTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionAudioTokens()
	})
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertOne) SetCompletionReasoningTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionReasoningTokens(v)
	})
}

// AddCompletionReasoningTokens adds v to the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertOne) AddCompletionReasoningTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionReasoningTokens(v)
	})
}

// UpdateCompletionReasoningTokens sets the "completion_reasoning_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateCompletionReasoningTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionReasoningTokens()
	})
}

// ClearCompletionReasoningTokens clears the value of the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertOne) ClearCompletionReasoningTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionReasoningTokens()
	})
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertOne) SetCompletionAcceptedPredictionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionAcceptedPredictionTokens(v)
	})
}

// AddCompletionAcceptedPredictionTokens adds v to the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertOne) AddCompletionAcceptedPredictionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionAcceptedPredictionTokens(v)
	})
}

// UpdateCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateCompletionAcceptedPredictionTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionAcceptedPredictionTokens()
	})
}

// ClearCompletionAcceptedPredictionTokens clears the value of the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertOne) ClearCompletionAcceptedPredictionTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionAcceptedPredictionTokens()
	})
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertOne) SetCompletionRejectedPredictionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionRejectedPredictionTokens(v)
	})
}

// AddCompletionRejectedPredictionTokens adds v to the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertOne) AddCompletionRejectedPredictionTokens(v int) *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionRejectedPredictionTokens(v)
	})
}

// UpdateCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertOne) UpdateCompletionRejectedPredictionTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionRejectedPredictionTokens()
	})
}

// ClearCompletionRejectedPredictionTokens clears the value of the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertOne) ClearCompletionRejectedPredictionTokens() *UsageLogUpsertOne {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionRejectedPredictionTokens()
	})
}

// Exec executes the query.
func (u *UsageLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UsageLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsageLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UsageLogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UsageLogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UsageLogCreateBulk is the builder for creating many UsageLog entities in bulk.
type UsageLogCreateBulk struct {
	config
	err      error
	builders []*UsageLogCreate
	conflict []sql.ConflictOption
}

// Save creates the UsageLog entities in the database.
func (ulcb *UsageLogCreateBulk) Save(ctx context.Context) ([]*UsageLog, error) {
	if ulcb.err != nil {
		return nil, ulcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ulcb.builders))
	nodes := make([]*UsageLog, len(ulcb.builders))
	mutators := make([]Mutator, len(ulcb.builders))
	for i := range ulcb.builders {
		func(i int, root context.Context) {
			builder := ulcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsageLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ulcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ulcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ulcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ulcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ulcb *UsageLogCreateBulk) SaveX(ctx context.Context) []*UsageLog {
	v, err := ulcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulcb *UsageLogCreateBulk) Exec(ctx context.Context) error {
	_, err := ulcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulcb *UsageLogCreateBulk) ExecX(ctx context.Context) {
	if err := ulcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UsageLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsageLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ulcb *UsageLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *UsageLogUpsertBulk {
	ulcb.conflict = opts
	return &UsageLogUpsertBulk{
		create: ulcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ulcb *UsageLogCreateBulk) OnConflictColumns(columns ...string) *UsageLogUpsertBulk {
	ulcb.conflict = append(ulcb.conflict, sql.ConflictColumns(columns...))
	return &UsageLogUpsertBulk{
		create: ulcb,
	}
}

// UsageLogUpsertBulk is the builder for "upsert"-ing
// a bulk of UsageLog nodes.
type UsageLogUpsertBulk struct {
	create *UsageLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UsageLogUpsertBulk) UpdateNewValues() *UsageLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usagelog.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(usagelog.FieldUserID)
			}
			if _, exists := b.mutation.RequestID(); exists {
				s.SetIgnore(usagelog.FieldRequestID)
			}
			if _, exists := b.mutation.ModelID(); exists {
				s.SetIgnore(usagelog.FieldModelID)
			}
			if _, exists := b.mutation.Source(); exists {
				s.SetIgnore(usagelog.FieldSource)
			}
			if _, exists := b.mutation.Format(); exists {
				s.SetIgnore(usagelog.FieldFormat)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UsageLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UsageLogUpsertBulk) Ignore() *UsageLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsageLogUpsertBulk) DoNothing() *UsageLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsageLogCreateBulk.OnConflict
// documentation for more info.
func (u *UsageLogUpsertBulk) Update(set func(*UsageLogUpsert)) *UsageLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsageLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UsageLogUpsertBulk) SetUpdatedAt(v time.Time) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateUpdatedAt() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsageLogUpsertBulk) SetDeletedAt(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *UsageLogUpsertBulk) AddDeletedAt(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateDeletedAt() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetChannelID sets the "channel_id" field.
func (u *UsageLogUpsertBulk) SetChannelID(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetChannelID(v)
	})
}

// UpdateChannelID sets the "channel_id" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateChannelID() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateChannelID()
	})
}

// ClearChannelID clears the value of the "channel_id" field.
func (u *UsageLogUpsertBulk) ClearChannelID() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearChannelID()
	})
}

// SetPromptTokens sets the "prompt_tokens" field.
func (u *UsageLogUpsertBulk) SetPromptTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptTokens(v)
	})
}

// AddPromptTokens adds v to the "prompt_tokens" field.
func (u *UsageLogUpsertBulk) AddPromptTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptTokens(v)
	})
}

// UpdatePromptTokens sets the "prompt_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdatePromptTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptTokens()
	})
}

// SetCompletionTokens sets the "completion_tokens" field.
func (u *UsageLogUpsertBulk) SetCompletionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionTokens(v)
	})
}

// AddCompletionTokens adds v to the "completion_tokens" field.
func (u *UsageLogUpsertBulk) AddCompletionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionTokens(v)
	})
}

// UpdateCompletionTokens sets the "completion_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateCompletionTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionTokens()
	})
}

// SetTotalTokens sets the "total_tokens" field.
func (u *UsageLogUpsertBulk) SetTotalTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetTotalTokens(v)
	})
}

// AddTotalTokens adds v to the "total_tokens" field.
func (u *UsageLogUpsertBulk) AddTotalTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddTotalTokens(v)
	})
}

// UpdateTotalTokens sets the "total_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateTotalTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateTotalTokens()
	})
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (u *UsageLogUpsertBulk) SetPromptAudioTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptAudioTokens(v)
	})
}

// AddPromptAudioTokens adds v to the "prompt_audio_tokens" field.
func (u *UsageLogUpsertBulk) AddPromptAudioTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptAudioTokens(v)
	})
}

// UpdatePromptAudioTokens sets the "prompt_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdatePromptAudioTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptAudioTokens()
	})
}

// ClearPromptAudioTokens clears the value of the "prompt_audio_tokens" field.
func (u *UsageLogUpsertBulk) ClearPromptAudioTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearPromptAudioTokens()
	})
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (u *UsageLogUpsertBulk) SetPromptCachedTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetPromptCachedTokens(v)
	})
}

// AddPromptCachedTokens adds v to the "prompt_cached_tokens" field.
func (u *UsageLogUpsertBulk) AddPromptCachedTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddPromptCachedTokens(v)
	})
}

// UpdatePromptCachedTokens sets the "prompt_cached_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdatePromptCachedTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdatePromptCachedTokens()
	})
}

// ClearPromptCachedTokens clears the value of the "prompt_cached_tokens" field.
func (u *UsageLogUpsertBulk) ClearPromptCachedTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearPromptCachedTokens()
	})
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (u *UsageLogUpsertBulk) SetCompletionAudioTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionAudioTokens(v)
	})
}

// AddCompletionAudioTokens adds v to the "completion_audio_tokens" field.
func (u *UsageLogUpsertBulk) AddCompletionAudioTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionAudioTokens(v)
	})
}

// UpdateCompletionAudioTokens sets the "completion_audio_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateCompletionAudioTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionAudioTokens()
	})
}

// ClearCompletionAudioTokens clears the value of the "completion_audio_tokens" field.
func (u *UsageLogUpsertBulk) ClearCompletionAudioTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionAudioTokens()
	})
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertBulk) SetCompletionReasoningTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionReasoningTokens(v)
	})
}

// AddCompletionReasoningTokens adds v to the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertBulk) AddCompletionReasoningTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionReasoningTokens(v)
	})
}

// UpdateCompletionReasoningTokens sets the "completion_reasoning_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateCompletionReasoningTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionReasoningTokens()
	})
}

// ClearCompletionReasoningTokens clears the value of the "completion_reasoning_tokens" field.
func (u *UsageLogUpsertBulk) ClearCompletionReasoningTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionReasoningTokens()
	})
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertBulk) SetCompletionAcceptedPredictionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionAcceptedPredictionTokens(v)
	})
}

// AddCompletionAcceptedPredictionTokens adds v to the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertBulk) AddCompletionAcceptedPredictionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionAcceptedPredictionTokens(v)
	})
}

// UpdateCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateCompletionAcceptedPredictionTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionAcceptedPredictionTokens()
	})
}

// ClearCompletionAcceptedPredictionTokens clears the value of the "completion_accepted_prediction_tokens" field.
func (u *UsageLogUpsertBulk) ClearCompletionAcceptedPredictionTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionAcceptedPredictionTokens()
	})
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertBulk) SetCompletionRejectedPredictionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.SetCompletionRejectedPredictionTokens(v)
	})
}

// AddCompletionRejectedPredictionTokens adds v to the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertBulk) AddCompletionRejectedPredictionTokens(v int) *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.AddCompletionRejectedPredictionTokens(v)
	})
}

// UpdateCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field to the value that was provided on create.
func (u *UsageLogUpsertBulk) UpdateCompletionRejectedPredictionTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.UpdateCompletionRejectedPredictionTokens()
	})
}

// ClearCompletionRejectedPredictionTokens clears the value of the "completion_rejected_prediction_tokens" field.
func (u *UsageLogUpsertBulk) ClearCompletionRejectedPredictionTokens() *UsageLogUpsertBulk {
	return u.Update(func(s *UsageLogUpsert) {
		s.ClearCompletionRejectedPredictionTokens()
	})
}

// Exec executes the query.
func (u *UsageLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UsageLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UsageLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsageLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
