// Code generated by ent, DO NOT EDIT.

package channel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/looplj/axonhub/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDeletedAt, v))
}

// BaseURL applies equality check predicate on the "base_url" field. It's identical to BaseURLEQ.
func BaseURL(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldBaseURL, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldName, v))
}

// DefaultTestModel applies equality check predicate on the "default_test_model" field. It's identical to DefaultTestModelEQ.
func DefaultTestModel(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDefaultTestModel, v))
}

// OrderingWeight applies equality check predicate on the "ordering_weight" field. It's identical to OrderingWeightEQ.
func OrderingWeight(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldOrderingWeight, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldDeletedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldType, vs...))
}

// BaseURLEQ applies the EQ predicate on the "base_url" field.
func BaseURLEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldBaseURL, v))
}

// BaseURLNEQ applies the NEQ predicate on the "base_url" field.
func BaseURLNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldBaseURL, v))
}

// BaseURLIn applies the In predicate on the "base_url" field.
func BaseURLIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldBaseURL, vs...))
}

// BaseURLNotIn applies the NotIn predicate on the "base_url" field.
func BaseURLNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldBaseURL, vs...))
}

// BaseURLGT applies the GT predicate on the "base_url" field.
func BaseURLGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldBaseURL, v))
}

// BaseURLGTE applies the GTE predicate on the "base_url" field.
func BaseURLGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldBaseURL, v))
}

// BaseURLLT applies the LT predicate on the "base_url" field.
func BaseURLLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldBaseURL, v))
}

// BaseURLLTE applies the LTE predicate on the "base_url" field.
func BaseURLLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldBaseURL, v))
}

// BaseURLContains applies the Contains predicate on the "base_url" field.
func BaseURLContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldBaseURL, v))
}

// BaseURLHasPrefix applies the HasPrefix predicate on the "base_url" field.
func BaseURLHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldBaseURL, v))
}

// BaseURLHasSuffix applies the HasSuffix predicate on the "base_url" field.
func BaseURLHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldBaseURL, v))
}

// BaseURLIsNil applies the IsNil predicate on the "base_url" field.
func BaseURLIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldBaseURL))
}

// BaseURLNotNil applies the NotNil predicate on the "base_url" field.
func BaseURLNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldBaseURL))
}

// BaseURLEqualFold applies the EqualFold predicate on the "base_url" field.
func BaseURLEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldBaseURL, v))
}

// BaseURLContainsFold applies the ContainsFold predicate on the "base_url" field.
func BaseURLContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldBaseURL, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldStatus, vs...))
}

// DefaultTestModelEQ applies the EQ predicate on the "default_test_model" field.
func DefaultTestModelEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldDefaultTestModel, v))
}

// DefaultTestModelNEQ applies the NEQ predicate on the "default_test_model" field.
func DefaultTestModelNEQ(v string) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldDefaultTestModel, v))
}

// DefaultTestModelIn applies the In predicate on the "default_test_model" field.
func DefaultTestModelIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldDefaultTestModel, vs...))
}

// DefaultTestModelNotIn applies the NotIn predicate on the "default_test_model" field.
func DefaultTestModelNotIn(vs ...string) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldDefaultTestModel, vs...))
}

// DefaultTestModelGT applies the GT predicate on the "default_test_model" field.
func DefaultTestModelGT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldDefaultTestModel, v))
}

// DefaultTestModelGTE applies the GTE predicate on the "default_test_model" field.
func DefaultTestModelGTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldDefaultTestModel, v))
}

// DefaultTestModelLT applies the LT predicate on the "default_test_model" field.
func DefaultTestModelLT(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldDefaultTestModel, v))
}

// DefaultTestModelLTE applies the LTE predicate on the "default_test_model" field.
func DefaultTestModelLTE(v string) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldDefaultTestModel, v))
}

// DefaultTestModelContains applies the Contains predicate on the "default_test_model" field.
func DefaultTestModelContains(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContains(FieldDefaultTestModel, v))
}

// DefaultTestModelHasPrefix applies the HasPrefix predicate on the "default_test_model" field.
func DefaultTestModelHasPrefix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasPrefix(FieldDefaultTestModel, v))
}

// DefaultTestModelHasSuffix applies the HasSuffix predicate on the "default_test_model" field.
func DefaultTestModelHasSuffix(v string) predicate.Channel {
	return predicate.Channel(sql.FieldHasSuffix(FieldDefaultTestModel, v))
}

// DefaultTestModelEqualFold applies the EqualFold predicate on the "default_test_model" field.
func DefaultTestModelEqualFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldEqualFold(FieldDefaultTestModel, v))
}

// DefaultTestModelContainsFold applies the ContainsFold predicate on the "default_test_model" field.
func DefaultTestModelContainsFold(v string) predicate.Channel {
	return predicate.Channel(sql.FieldContainsFold(FieldDefaultTestModel, v))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.Channel {
	return predicate.Channel(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.Channel {
	return predicate.Channel(sql.FieldNotNull(FieldSettings))
}

// OrderingWeightEQ applies the EQ predicate on the "ordering_weight" field.
func OrderingWeightEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldEQ(FieldOrderingWeight, v))
}

// OrderingWeightNEQ applies the NEQ predicate on the "ordering_weight" field.
func OrderingWeightNEQ(v int) predicate.Channel {
	return predicate.Channel(sql.FieldNEQ(FieldOrderingWeight, v))
}

// OrderingWeightIn applies the In predicate on the "ordering_weight" field.
func OrderingWeightIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldIn(FieldOrderingWeight, vs...))
}

// OrderingWeightNotIn applies the NotIn predicate on the "ordering_weight" field.
func OrderingWeightNotIn(vs ...int) predicate.Channel {
	return predicate.Channel(sql.FieldNotIn(FieldOrderingWeight, vs...))
}

// OrderingWeightGT applies the GT predicate on the "ordering_weight" field.
func OrderingWeightGT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGT(FieldOrderingWeight, v))
}

// OrderingWeightGTE applies the GTE predicate on the "ordering_weight" field.
func OrderingWeightGTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldGTE(FieldOrderingWeight, v))
}

// OrderingWeightLT applies the LT predicate on the "ordering_weight" field.
func OrderingWeightLT(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLT(FieldOrderingWeight, v))
}

// OrderingWeightLTE applies the LTE predicate on the "ordering_weight" field.
func OrderingWeightLTE(v int) predicate.Channel {
	return predicate.Channel(sql.FieldLTE(FieldOrderingWeight, v))
}

// HasRequests applies the HasEdge predicate on the "requests" edge.
func HasRequests() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestsWith applies the HasEdge predicate on the "requests" edge with a given conditions (other predicates).
func HasRequestsWith(preds ...predicate.Request) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := newRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExecutions applies the HasEdge predicate on the "executions" edge.
func HasExecutions() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExecutionsTable, ExecutionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExecutionsWith applies the HasEdge predicate on the "executions" edge with a given conditions (other predicates).
func HasExecutionsWith(preds ...predicate.RequestExecution) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := newExecutionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsageLogs applies the HasEdge predicate on the "usage_logs" edge.
func HasUsageLogs() predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsageLogsTable, UsageLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsageLogsWith applies the HasEdge predicate on the "usage_logs" edge with a given conditions (other predicates).
func HasUsageLogsWith(preds ...predicate.UsageLog) predicate.Channel {
	return predicate.Channel(func(s *sql.Selector) {
		step := newUsageLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Channel) predicate.Channel {
	return predicate.Channel(sql.NotPredicates(p))
}
