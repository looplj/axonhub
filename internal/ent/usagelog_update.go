// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/predicate"
	"github.com/looplj/axonhub/internal/ent/usagelog"
)

// UsageLogUpdate is the builder for updating UsageLog entities.
type UsageLogUpdate struct {
	config
	hooks     []Hook
	mutation  *UsageLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UsageLogUpdate builder.
func (ulu *UsageLogUpdate) Where(ps ...predicate.UsageLog) *UsageLogUpdate {
	ulu.mutation.Where(ps...)
	return ulu
}

// SetUpdatedAt sets the "updated_at" field.
func (ulu *UsageLogUpdate) SetUpdatedAt(t time.Time) *UsageLogUpdate {
	ulu.mutation.SetUpdatedAt(t)
	return ulu
}

// SetDeletedAt sets the "deleted_at" field.
func (ulu *UsageLogUpdate) SetDeletedAt(i int) *UsageLogUpdate {
	ulu.mutation.ResetDeletedAt()
	ulu.mutation.SetDeletedAt(i)
	return ulu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableDeletedAt(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetDeletedAt(*i)
	}
	return ulu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (ulu *UsageLogUpdate) AddDeletedAt(i int) *UsageLogUpdate {
	ulu.mutation.AddDeletedAt(i)
	return ulu
}

// SetChannelID sets the "channel_id" field.
func (ulu *UsageLogUpdate) SetChannelID(i int) *UsageLogUpdate {
	ulu.mutation.SetChannelID(i)
	return ulu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableChannelID(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetChannelID(*i)
	}
	return ulu
}

// ClearChannelID clears the value of the "channel_id" field.
func (ulu *UsageLogUpdate) ClearChannelID() *UsageLogUpdate {
	ulu.mutation.ClearChannelID()
	return ulu
}

// SetPromptTokens sets the "prompt_tokens" field.
func (ulu *UsageLogUpdate) SetPromptTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetPromptTokens()
	ulu.mutation.SetPromptTokens(i)
	return ulu
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillablePromptTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetPromptTokens(*i)
	}
	return ulu
}

// AddPromptTokens adds i to the "prompt_tokens" field.
func (ulu *UsageLogUpdate) AddPromptTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddPromptTokens(i)
	return ulu
}

// SetCompletionTokens sets the "completion_tokens" field.
func (ulu *UsageLogUpdate) SetCompletionTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetCompletionTokens()
	ulu.mutation.SetCompletionTokens(i)
	return ulu
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableCompletionTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetCompletionTokens(*i)
	}
	return ulu
}

// AddCompletionTokens adds i to the "completion_tokens" field.
func (ulu *UsageLogUpdate) AddCompletionTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddCompletionTokens(i)
	return ulu
}

// SetTotalTokens sets the "total_tokens" field.
func (ulu *UsageLogUpdate) SetTotalTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetTotalTokens()
	ulu.mutation.SetTotalTokens(i)
	return ulu
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableTotalTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetTotalTokens(*i)
	}
	return ulu
}

// AddTotalTokens adds i to the "total_tokens" field.
func (ulu *UsageLogUpdate) AddTotalTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddTotalTokens(i)
	return ulu
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (ulu *UsageLogUpdate) SetPromptAudioTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetPromptAudioTokens()
	ulu.mutation.SetPromptAudioTokens(i)
	return ulu
}

// SetNillablePromptAudioTokens sets the "prompt_audio_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillablePromptAudioTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetPromptAudioTokens(*i)
	}
	return ulu
}

// AddPromptAudioTokens adds i to the "prompt_audio_tokens" field.
func (ulu *UsageLogUpdate) AddPromptAudioTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddPromptAudioTokens(i)
	return ulu
}

// ClearPromptAudioTokens clears the value of the "prompt_audio_tokens" field.
func (ulu *UsageLogUpdate) ClearPromptAudioTokens() *UsageLogUpdate {
	ulu.mutation.ClearPromptAudioTokens()
	return ulu
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (ulu *UsageLogUpdate) SetPromptCachedTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetPromptCachedTokens()
	ulu.mutation.SetPromptCachedTokens(i)
	return ulu
}

// SetNillablePromptCachedTokens sets the "prompt_cached_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillablePromptCachedTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetPromptCachedTokens(*i)
	}
	return ulu
}

// AddPromptCachedTokens adds i to the "prompt_cached_tokens" field.
func (ulu *UsageLogUpdate) AddPromptCachedTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddPromptCachedTokens(i)
	return ulu
}

// ClearPromptCachedTokens clears the value of the "prompt_cached_tokens" field.
func (ulu *UsageLogUpdate) ClearPromptCachedTokens() *UsageLogUpdate {
	ulu.mutation.ClearPromptCachedTokens()
	return ulu
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (ulu *UsageLogUpdate) SetCompletionAudioTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetCompletionAudioTokens()
	ulu.mutation.SetCompletionAudioTokens(i)
	return ulu
}

// SetNillableCompletionAudioTokens sets the "completion_audio_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableCompletionAudioTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetCompletionAudioTokens(*i)
	}
	return ulu
}

// AddCompletionAudioTokens adds i to the "completion_audio_tokens" field.
func (ulu *UsageLogUpdate) AddCompletionAudioTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddCompletionAudioTokens(i)
	return ulu
}

// ClearCompletionAudioTokens clears the value of the "completion_audio_tokens" field.
func (ulu *UsageLogUpdate) ClearCompletionAudioTokens() *UsageLogUpdate {
	ulu.mutation.ClearCompletionAudioTokens()
	return ulu
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (ulu *UsageLogUpdate) SetCompletionReasoningTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetCompletionReasoningTokens()
	ulu.mutation.SetCompletionReasoningTokens(i)
	return ulu
}

// SetNillableCompletionReasoningTokens sets the "completion_reasoning_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableCompletionReasoningTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetCompletionReasoningTokens(*i)
	}
	return ulu
}

// AddCompletionReasoningTokens adds i to the "completion_reasoning_tokens" field.
func (ulu *UsageLogUpdate) AddCompletionReasoningTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddCompletionReasoningTokens(i)
	return ulu
}

// ClearCompletionReasoningTokens clears the value of the "completion_reasoning_tokens" field.
func (ulu *UsageLogUpdate) ClearCompletionReasoningTokens() *UsageLogUpdate {
	ulu.mutation.ClearCompletionReasoningTokens()
	return ulu
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (ulu *UsageLogUpdate) SetCompletionAcceptedPredictionTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetCompletionAcceptedPredictionTokens()
	ulu.mutation.SetCompletionAcceptedPredictionTokens(i)
	return ulu
}

// SetNillableCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableCompletionAcceptedPredictionTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetCompletionAcceptedPredictionTokens(*i)
	}
	return ulu
}

// AddCompletionAcceptedPredictionTokens adds i to the "completion_accepted_prediction_tokens" field.
func (ulu *UsageLogUpdate) AddCompletionAcceptedPredictionTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddCompletionAcceptedPredictionTokens(i)
	return ulu
}

// ClearCompletionAcceptedPredictionTokens clears the value of the "completion_accepted_prediction_tokens" field.
func (ulu *UsageLogUpdate) ClearCompletionAcceptedPredictionTokens() *UsageLogUpdate {
	ulu.mutation.ClearCompletionAcceptedPredictionTokens()
	return ulu
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (ulu *UsageLogUpdate) SetCompletionRejectedPredictionTokens(i int) *UsageLogUpdate {
	ulu.mutation.ResetCompletionRejectedPredictionTokens()
	ulu.mutation.SetCompletionRejectedPredictionTokens(i)
	return ulu
}

// SetNillableCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field if the given value is not nil.
func (ulu *UsageLogUpdate) SetNillableCompletionRejectedPredictionTokens(i *int) *UsageLogUpdate {
	if i != nil {
		ulu.SetCompletionRejectedPredictionTokens(*i)
	}
	return ulu
}

// AddCompletionRejectedPredictionTokens adds i to the "completion_rejected_prediction_tokens" field.
func (ulu *UsageLogUpdate) AddCompletionRejectedPredictionTokens(i int) *UsageLogUpdate {
	ulu.mutation.AddCompletionRejectedPredictionTokens(i)
	return ulu
}

// ClearCompletionRejectedPredictionTokens clears the value of the "completion_rejected_prediction_tokens" field.
func (ulu *UsageLogUpdate) ClearCompletionRejectedPredictionTokens() *UsageLogUpdate {
	ulu.mutation.ClearCompletionRejectedPredictionTokens()
	return ulu
}

// SetChannel sets the "channel" edge to the Channel entity.
func (ulu *UsageLogUpdate) SetChannel(c *Channel) *UsageLogUpdate {
	return ulu.SetChannelID(c.ID)
}

// Mutation returns the UsageLogMutation object of the builder.
func (ulu *UsageLogUpdate) Mutation() *UsageLogMutation {
	return ulu.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (ulu *UsageLogUpdate) ClearChannel() *UsageLogUpdate {
	ulu.mutation.ClearChannel()
	return ulu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UsageLogUpdate) Save(ctx context.Context) (int, error) {
	if err := ulu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ulu.sqlSave, ulu.mutation, ulu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UsageLogUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UsageLogUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UsageLogUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulu *UsageLogUpdate) defaults() error {
	if _, ok := ulu.mutation.UpdatedAt(); !ok {
		if usagelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usagelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usagelog.UpdateDefaultUpdatedAt()
		ulu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ulu *UsageLogUpdate) check() error {
	if ulu.mutation.UserCleared() && len(ulu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageLog.user"`)
	}
	if ulu.mutation.RequestCleared() && len(ulu.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageLog.request"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ulu *UsageLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageLogUpdate {
	ulu.modifiers = append(ulu.modifiers, modifiers...)
	return ulu
}

func (ulu *UsageLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ulu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagelog.Table, usagelog.Columns, sqlgraph.NewFieldSpec(usagelog.FieldID, field.TypeInt))
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.UpdatedAt(); ok {
		_spec.SetField(usagelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ulu.mutation.DeletedAt(); ok {
		_spec.SetField(usagelog.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(usagelog.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.PromptTokens(); ok {
		_spec.SetField(usagelog.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedPromptTokens(); ok {
		_spec.AddField(usagelog.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.CompletionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedCompletionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.TotalTokens(); ok {
		_spec.SetField(usagelog.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedTotalTokens(); ok {
		_spec.AddField(usagelog.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.PromptAudioTokens(); ok {
		_spec.SetField(usagelog.FieldPromptAudioTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedPromptAudioTokens(); ok {
		_spec.AddField(usagelog.FieldPromptAudioTokens, field.TypeInt, value)
	}
	if ulu.mutation.PromptAudioTokensCleared() {
		_spec.ClearField(usagelog.FieldPromptAudioTokens, field.TypeInt)
	}
	if value, ok := ulu.mutation.PromptCachedTokens(); ok {
		_spec.SetField(usagelog.FieldPromptCachedTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedPromptCachedTokens(); ok {
		_spec.AddField(usagelog.FieldPromptCachedTokens, field.TypeInt, value)
	}
	if ulu.mutation.PromptCachedTokensCleared() {
		_spec.ClearField(usagelog.FieldPromptCachedTokens, field.TypeInt)
	}
	if value, ok := ulu.mutation.CompletionAudioTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAudioTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedCompletionAudioTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionAudioTokens, field.TypeInt, value)
	}
	if ulu.mutation.CompletionAudioTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionAudioTokens, field.TypeInt)
	}
	if value, ok := ulu.mutation.CompletionReasoningTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionReasoningTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedCompletionReasoningTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionReasoningTokens, field.TypeInt, value)
	}
	if ulu.mutation.CompletionReasoningTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionReasoningTokens, field.TypeInt)
	}
	if value, ok := ulu.mutation.CompletionAcceptedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedCompletionAcceptedPredictionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt, value)
	}
	if ulu.mutation.CompletionAcceptedPredictionTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt)
	}
	if value, ok := ulu.mutation.CompletionRejectedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt, value)
	}
	if value, ok := ulu.mutation.AddedCompletionRejectedPredictionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt, value)
	}
	if ulu.mutation.CompletionRejectedPredictionTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt)
	}
	if ulu.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.ChannelTable,
			Columns: []string{usagelog.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.ChannelTable,
			Columns: []string{usagelog.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ulu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ulu.mutation.done = true
	return n, nil
}

// UsageLogUpdateOne is the builder for updating a single UsageLog entity.
type UsageLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UsageLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uluo *UsageLogUpdateOne) SetUpdatedAt(t time.Time) *UsageLogUpdateOne {
	uluo.mutation.SetUpdatedAt(t)
	return uluo
}

// SetDeletedAt sets the "deleted_at" field.
func (uluo *UsageLogUpdateOne) SetDeletedAt(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetDeletedAt()
	uluo.mutation.SetDeletedAt(i)
	return uluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableDeletedAt(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetDeletedAt(*i)
	}
	return uluo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (uluo *UsageLogUpdateOne) AddDeletedAt(i int) *UsageLogUpdateOne {
	uluo.mutation.AddDeletedAt(i)
	return uluo
}

// SetChannelID sets the "channel_id" field.
func (uluo *UsageLogUpdateOne) SetChannelID(i int) *UsageLogUpdateOne {
	uluo.mutation.SetChannelID(i)
	return uluo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableChannelID(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetChannelID(*i)
	}
	return uluo
}

// ClearChannelID clears the value of the "channel_id" field.
func (uluo *UsageLogUpdateOne) ClearChannelID() *UsageLogUpdateOne {
	uluo.mutation.ClearChannelID()
	return uluo
}

// SetPromptTokens sets the "prompt_tokens" field.
func (uluo *UsageLogUpdateOne) SetPromptTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetPromptTokens()
	uluo.mutation.SetPromptTokens(i)
	return uluo
}

// SetNillablePromptTokens sets the "prompt_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillablePromptTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetPromptTokens(*i)
	}
	return uluo
}

// AddPromptTokens adds i to the "prompt_tokens" field.
func (uluo *UsageLogUpdateOne) AddPromptTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddPromptTokens(i)
	return uluo
}

// SetCompletionTokens sets the "completion_tokens" field.
func (uluo *UsageLogUpdateOne) SetCompletionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetCompletionTokens()
	uluo.mutation.SetCompletionTokens(i)
	return uluo
}

// SetNillableCompletionTokens sets the "completion_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableCompletionTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetCompletionTokens(*i)
	}
	return uluo
}

// AddCompletionTokens adds i to the "completion_tokens" field.
func (uluo *UsageLogUpdateOne) AddCompletionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddCompletionTokens(i)
	return uluo
}

// SetTotalTokens sets the "total_tokens" field.
func (uluo *UsageLogUpdateOne) SetTotalTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetTotalTokens()
	uluo.mutation.SetTotalTokens(i)
	return uluo
}

// SetNillableTotalTokens sets the "total_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableTotalTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetTotalTokens(*i)
	}
	return uluo
}

// AddTotalTokens adds i to the "total_tokens" field.
func (uluo *UsageLogUpdateOne) AddTotalTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddTotalTokens(i)
	return uluo
}

// SetPromptAudioTokens sets the "prompt_audio_tokens" field.
func (uluo *UsageLogUpdateOne) SetPromptAudioTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetPromptAudioTokens()
	uluo.mutation.SetPromptAudioTokens(i)
	return uluo
}

// SetNillablePromptAudioTokens sets the "prompt_audio_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillablePromptAudioTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetPromptAudioTokens(*i)
	}
	return uluo
}

// AddPromptAudioTokens adds i to the "prompt_audio_tokens" field.
func (uluo *UsageLogUpdateOne) AddPromptAudioTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddPromptAudioTokens(i)
	return uluo
}

// ClearPromptAudioTokens clears the value of the "prompt_audio_tokens" field.
func (uluo *UsageLogUpdateOne) ClearPromptAudioTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearPromptAudioTokens()
	return uluo
}

// SetPromptCachedTokens sets the "prompt_cached_tokens" field.
func (uluo *UsageLogUpdateOne) SetPromptCachedTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetPromptCachedTokens()
	uluo.mutation.SetPromptCachedTokens(i)
	return uluo
}

// SetNillablePromptCachedTokens sets the "prompt_cached_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillablePromptCachedTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetPromptCachedTokens(*i)
	}
	return uluo
}

// AddPromptCachedTokens adds i to the "prompt_cached_tokens" field.
func (uluo *UsageLogUpdateOne) AddPromptCachedTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddPromptCachedTokens(i)
	return uluo
}

// ClearPromptCachedTokens clears the value of the "prompt_cached_tokens" field.
func (uluo *UsageLogUpdateOne) ClearPromptCachedTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearPromptCachedTokens()
	return uluo
}

// SetCompletionAudioTokens sets the "completion_audio_tokens" field.
func (uluo *UsageLogUpdateOne) SetCompletionAudioTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetCompletionAudioTokens()
	uluo.mutation.SetCompletionAudioTokens(i)
	return uluo
}

// SetNillableCompletionAudioTokens sets the "completion_audio_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableCompletionAudioTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetCompletionAudioTokens(*i)
	}
	return uluo
}

// AddCompletionAudioTokens adds i to the "completion_audio_tokens" field.
func (uluo *UsageLogUpdateOne) AddCompletionAudioTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddCompletionAudioTokens(i)
	return uluo
}

// ClearCompletionAudioTokens clears the value of the "completion_audio_tokens" field.
func (uluo *UsageLogUpdateOne) ClearCompletionAudioTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearCompletionAudioTokens()
	return uluo
}

// SetCompletionReasoningTokens sets the "completion_reasoning_tokens" field.
func (uluo *UsageLogUpdateOne) SetCompletionReasoningTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetCompletionReasoningTokens()
	uluo.mutation.SetCompletionReasoningTokens(i)
	return uluo
}

// SetNillableCompletionReasoningTokens sets the "completion_reasoning_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableCompletionReasoningTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetCompletionReasoningTokens(*i)
	}
	return uluo
}

// AddCompletionReasoningTokens adds i to the "completion_reasoning_tokens" field.
func (uluo *UsageLogUpdateOne) AddCompletionReasoningTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddCompletionReasoningTokens(i)
	return uluo
}

// ClearCompletionReasoningTokens clears the value of the "completion_reasoning_tokens" field.
func (uluo *UsageLogUpdateOne) ClearCompletionReasoningTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearCompletionReasoningTokens()
	return uluo
}

// SetCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) SetCompletionAcceptedPredictionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetCompletionAcceptedPredictionTokens()
	uluo.mutation.SetCompletionAcceptedPredictionTokens(i)
	return uluo
}

// SetNillableCompletionAcceptedPredictionTokens sets the "completion_accepted_prediction_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableCompletionAcceptedPredictionTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetCompletionAcceptedPredictionTokens(*i)
	}
	return uluo
}

// AddCompletionAcceptedPredictionTokens adds i to the "completion_accepted_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) AddCompletionAcceptedPredictionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddCompletionAcceptedPredictionTokens(i)
	return uluo
}

// ClearCompletionAcceptedPredictionTokens clears the value of the "completion_accepted_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) ClearCompletionAcceptedPredictionTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearCompletionAcceptedPredictionTokens()
	return uluo
}

// SetCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) SetCompletionRejectedPredictionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.ResetCompletionRejectedPredictionTokens()
	uluo.mutation.SetCompletionRejectedPredictionTokens(i)
	return uluo
}

// SetNillableCompletionRejectedPredictionTokens sets the "completion_rejected_prediction_tokens" field if the given value is not nil.
func (uluo *UsageLogUpdateOne) SetNillableCompletionRejectedPredictionTokens(i *int) *UsageLogUpdateOne {
	if i != nil {
		uluo.SetCompletionRejectedPredictionTokens(*i)
	}
	return uluo
}

// AddCompletionRejectedPredictionTokens adds i to the "completion_rejected_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) AddCompletionRejectedPredictionTokens(i int) *UsageLogUpdateOne {
	uluo.mutation.AddCompletionRejectedPredictionTokens(i)
	return uluo
}

// ClearCompletionRejectedPredictionTokens clears the value of the "completion_rejected_prediction_tokens" field.
func (uluo *UsageLogUpdateOne) ClearCompletionRejectedPredictionTokens() *UsageLogUpdateOne {
	uluo.mutation.ClearCompletionRejectedPredictionTokens()
	return uluo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (uluo *UsageLogUpdateOne) SetChannel(c *Channel) *UsageLogUpdateOne {
	return uluo.SetChannelID(c.ID)
}

// Mutation returns the UsageLogMutation object of the builder.
func (uluo *UsageLogUpdateOne) Mutation() *UsageLogMutation {
	return uluo.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (uluo *UsageLogUpdateOne) ClearChannel() *UsageLogUpdateOne {
	uluo.mutation.ClearChannel()
	return uluo
}

// Where appends a list predicates to the UsageLogUpdate builder.
func (uluo *UsageLogUpdateOne) Where(ps ...predicate.UsageLog) *UsageLogUpdateOne {
	uluo.mutation.Where(ps...)
	return uluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UsageLogUpdateOne) Select(field string, fields ...string) *UsageLogUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UsageLog entity.
func (uluo *UsageLogUpdateOne) Save(ctx context.Context) (*UsageLog, error) {
	if err := uluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uluo.sqlSave, uluo.mutation, uluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UsageLogUpdateOne) SaveX(ctx context.Context) *UsageLog {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UsageLogUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UsageLogUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uluo *UsageLogUpdateOne) defaults() error {
	if _, ok := uluo.mutation.UpdatedAt(); !ok {
		if usagelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized usagelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := usagelog.UpdateDefaultUpdatedAt()
		uluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uluo *UsageLogUpdateOne) check() error {
	if uluo.mutation.UserCleared() && len(uluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageLog.user"`)
	}
	if uluo.mutation.RequestCleared() && len(uluo.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageLog.request"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uluo *UsageLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UsageLogUpdateOne {
	uluo.modifiers = append(uluo.modifiers, modifiers...)
	return uluo
}

func (uluo *UsageLogUpdateOne) sqlSave(ctx context.Context) (_node *UsageLog, err error) {
	if err := uluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagelog.Table, usagelog.Columns, sqlgraph.NewFieldSpec(usagelog.FieldID, field.TypeInt))
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsageLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usagelog.FieldID)
		for _, f := range fields {
			if !usagelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usagelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.UpdatedAt(); ok {
		_spec.SetField(usagelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uluo.mutation.DeletedAt(); ok {
		_spec.SetField(usagelog.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(usagelog.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.PromptTokens(); ok {
		_spec.SetField(usagelog.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedPromptTokens(); ok {
		_spec.AddField(usagelog.FieldPromptTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.CompletionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedCompletionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.TotalTokens(); ok {
		_spec.SetField(usagelog.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedTotalTokens(); ok {
		_spec.AddField(usagelog.FieldTotalTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.PromptAudioTokens(); ok {
		_spec.SetField(usagelog.FieldPromptAudioTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedPromptAudioTokens(); ok {
		_spec.AddField(usagelog.FieldPromptAudioTokens, field.TypeInt, value)
	}
	if uluo.mutation.PromptAudioTokensCleared() {
		_spec.ClearField(usagelog.FieldPromptAudioTokens, field.TypeInt)
	}
	if value, ok := uluo.mutation.PromptCachedTokens(); ok {
		_spec.SetField(usagelog.FieldPromptCachedTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedPromptCachedTokens(); ok {
		_spec.AddField(usagelog.FieldPromptCachedTokens, field.TypeInt, value)
	}
	if uluo.mutation.PromptCachedTokensCleared() {
		_spec.ClearField(usagelog.FieldPromptCachedTokens, field.TypeInt)
	}
	if value, ok := uluo.mutation.CompletionAudioTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAudioTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedCompletionAudioTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionAudioTokens, field.TypeInt, value)
	}
	if uluo.mutation.CompletionAudioTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionAudioTokens, field.TypeInt)
	}
	if value, ok := uluo.mutation.CompletionReasoningTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionReasoningTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedCompletionReasoningTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionReasoningTokens, field.TypeInt, value)
	}
	if uluo.mutation.CompletionReasoningTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionReasoningTokens, field.TypeInt)
	}
	if value, ok := uluo.mutation.CompletionAcceptedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedCompletionAcceptedPredictionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt, value)
	}
	if uluo.mutation.CompletionAcceptedPredictionTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionAcceptedPredictionTokens, field.TypeInt)
	}
	if value, ok := uluo.mutation.CompletionRejectedPredictionTokens(); ok {
		_spec.SetField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt, value)
	}
	if value, ok := uluo.mutation.AddedCompletionRejectedPredictionTokens(); ok {
		_spec.AddField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt, value)
	}
	if uluo.mutation.CompletionRejectedPredictionTokensCleared() {
		_spec.ClearField(usagelog.FieldCompletionRejectedPredictionTokens, field.TypeInt)
	}
	if uluo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.ChannelTable,
			Columns: []string{usagelog.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usagelog.ChannelTable,
			Columns: []string{usagelog.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uluo.modifiers...)
	_node = &UsageLog{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uluo.mutation.done = true
	return _node, nil
}
