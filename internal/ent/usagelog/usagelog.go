// Code generated by ent, DO NOT EDIT.

package usagelog

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usagelog type in the database.
	Label = "usage_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldModelID holds the string denoting the model_id field in the database.
	FieldModelID = "model_id"
	// FieldPromptTokens holds the string denoting the prompt_tokens field in the database.
	FieldPromptTokens = "prompt_tokens"
	// FieldCompletionTokens holds the string denoting the completion_tokens field in the database.
	FieldCompletionTokens = "completion_tokens"
	// FieldTotalTokens holds the string denoting the total_tokens field in the database.
	FieldTotalTokens = "total_tokens"
	// FieldPromptAudioTokens holds the string denoting the prompt_audio_tokens field in the database.
	FieldPromptAudioTokens = "prompt_audio_tokens"
	// FieldPromptCachedTokens holds the string denoting the prompt_cached_tokens field in the database.
	FieldPromptCachedTokens = "prompt_cached_tokens"
	// FieldCompletionAudioTokens holds the string denoting the completion_audio_tokens field in the database.
	FieldCompletionAudioTokens = "completion_audio_tokens"
	// FieldCompletionReasoningTokens holds the string denoting the completion_reasoning_tokens field in the database.
	FieldCompletionReasoningTokens = "completion_reasoning_tokens"
	// FieldCompletionAcceptedPredictionTokens holds the string denoting the completion_accepted_prediction_tokens field in the database.
	FieldCompletionAcceptedPredictionTokens = "completion_accepted_prediction_tokens"
	// FieldCompletionRejectedPredictionTokens holds the string denoting the completion_rejected_prediction_tokens field in the database.
	FieldCompletionRejectedPredictionTokens = "completion_rejected_prediction_tokens"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRequest holds the string denoting the request edge name in mutations.
	EdgeRequest = "request"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// Table holds the table name of the usagelog in the database.
	Table = "usage_logs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "usage_logs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// RequestTable is the table that holds the request relation/edge.
	RequestTable = "usage_logs"
	// RequestInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestInverseTable = "requests"
	// RequestColumn is the table column denoting the request relation/edge.
	RequestColumn = "request_id"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "usage_logs"
	// ChannelInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelInverseTable = "channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "channel_id"
)

// Columns holds all SQL columns for usagelog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserID,
	FieldRequestID,
	FieldChannelID,
	FieldModelID,
	FieldPromptTokens,
	FieldCompletionTokens,
	FieldTotalTokens,
	FieldPromptAudioTokens,
	FieldPromptCachedTokens,
	FieldCompletionAudioTokens,
	FieldCompletionReasoningTokens,
	FieldCompletionAcceptedPredictionTokens,
	FieldCompletionRejectedPredictionTokens,
	FieldSource,
	FieldFormat,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/looplj/axonhub/internal/ent/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeletedAt holds the default value on creation for the "deleted_at" field.
	DefaultDeletedAt int
	// DefaultPromptTokens holds the default value on creation for the "prompt_tokens" field.
	DefaultPromptTokens int
	// DefaultCompletionTokens holds the default value on creation for the "completion_tokens" field.
	DefaultCompletionTokens int
	// DefaultTotalTokens holds the default value on creation for the "total_tokens" field.
	DefaultTotalTokens int
	// DefaultPromptAudioTokens holds the default value on creation for the "prompt_audio_tokens" field.
	DefaultPromptAudioTokens int
	// DefaultPromptCachedTokens holds the default value on creation for the "prompt_cached_tokens" field.
	DefaultPromptCachedTokens int
	// DefaultCompletionAudioTokens holds the default value on creation for the "completion_audio_tokens" field.
	DefaultCompletionAudioTokens int
	// DefaultCompletionReasoningTokens holds the default value on creation for the "completion_reasoning_tokens" field.
	DefaultCompletionReasoningTokens int
	// DefaultCompletionAcceptedPredictionTokens holds the default value on creation for the "completion_accepted_prediction_tokens" field.
	DefaultCompletionAcceptedPredictionTokens int
	// DefaultCompletionRejectedPredictionTokens holds the default value on creation for the "completion_rejected_prediction_tokens" field.
	DefaultCompletionRejectedPredictionTokens int
	// DefaultFormat holds the default value on creation for the "format" field.
	DefaultFormat string
)

// Source defines the type for the "source" enum field.
type Source string

// SourceAPI is the default value of the Source enum.
const DefaultSource = SourceAPI

// Source values.
const (
	SourceAPI        Source = "api"
	SourcePlayground Source = "playground"
	SourceTest       Source = "test"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceAPI, SourcePlayground, SourceTest:
		return nil
	default:
		return fmt.Errorf("usagelog: invalid enum value for source field: %q", s)
	}
}

// OrderOption defines the ordering options for the UsageLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByModelID orders the results by the model_id field.
func ByModelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModelID, opts...).ToFunc()
}

// ByPromptTokens orders the results by the prompt_tokens field.
func ByPromptTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptTokens, opts...).ToFunc()
}

// ByCompletionTokens orders the results by the completion_tokens field.
func ByCompletionTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionTokens, opts...).ToFunc()
}

// ByTotalTokens orders the results by the total_tokens field.
func ByTotalTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalTokens, opts...).ToFunc()
}

// ByPromptAudioTokens orders the results by the prompt_audio_tokens field.
func ByPromptAudioTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptAudioTokens, opts...).ToFunc()
}

// ByPromptCachedTokens orders the results by the prompt_cached_tokens field.
func ByPromptCachedTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptCachedTokens, opts...).ToFunc()
}

// ByCompletionAudioTokens orders the results by the completion_audio_tokens field.
func ByCompletionAudioTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionAudioTokens, opts...).ToFunc()
}

// ByCompletionReasoningTokens orders the results by the completion_reasoning_tokens field.
func ByCompletionReasoningTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionReasoningTokens, opts...).ToFunc()
}

// ByCompletionAcceptedPredictionTokens orders the results by the completion_accepted_prediction_tokens field.
func ByCompletionAcceptedPredictionTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionAcceptedPredictionTokens, opts...).ToFunc()
}

// ByCompletionRejectedPredictionTokens orders the results by the completion_rejected_prediction_tokens field.
func ByCompletionRejectedPredictionTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionRejectedPredictionTokens, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequestField orders the results by request field.
func ByRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByChannelField orders the results by channel field.
func ByChannelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChannelStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
	)
}
func newChannelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChannelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Source) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Source) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Source(str)
	if err := SourceValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Source", str)
	}
	return nil
}
