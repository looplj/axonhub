// Code generated by ent, DO NOT EDIT.

package usagelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/looplj/axonhub/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldDeletedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldUserID, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldRequestID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldChannelID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldModelID, v))
}

// PromptTokens applies equality check predicate on the "prompt_tokens" field. It's identical to PromptTokensEQ.
func PromptTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptTokens, v))
}

// CompletionTokens applies equality check predicate on the "completion_tokens" field. It's identical to CompletionTokensEQ.
func CompletionTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionTokens, v))
}

// TotalTokens applies equality check predicate on the "total_tokens" field. It's identical to TotalTokensEQ.
func TotalTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldTotalTokens, v))
}

// PromptAudioTokens applies equality check predicate on the "prompt_audio_tokens" field. It's identical to PromptAudioTokensEQ.
func PromptAudioTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptAudioTokens, v))
}

// PromptCachedTokens applies equality check predicate on the "prompt_cached_tokens" field. It's identical to PromptCachedTokensEQ.
func PromptCachedTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptCachedTokens, v))
}

// CompletionAudioTokens applies equality check predicate on the "completion_audio_tokens" field. It's identical to CompletionAudioTokensEQ.
func CompletionAudioTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionAudioTokens, v))
}

// CompletionReasoningTokens applies equality check predicate on the "completion_reasoning_tokens" field. It's identical to CompletionReasoningTokensEQ.
func CompletionReasoningTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionReasoningTokens, v))
}

// CompletionAcceptedPredictionTokens applies equality check predicate on the "completion_accepted_prediction_tokens" field. It's identical to CompletionAcceptedPredictionTokensEQ.
func CompletionAcceptedPredictionTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionRejectedPredictionTokens applies equality check predicate on the "completion_rejected_prediction_tokens" field. It's identical to CompletionRejectedPredictionTokensEQ.
func CompletionRejectedPredictionTokens(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionRejectedPredictionTokens, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldFormat, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldDeletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldUserID, vs...))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldRequestID, vs...))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldChannelID, vs...))
}

// ChannelIDIsNil applies the IsNil predicate on the "channel_id" field.
func ChannelIDIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldChannelID))
}

// ChannelIDNotNil applies the NotNil predicate on the "channel_id" field.
func ChannelIDNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldChannelID))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldModelID, v))
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldModelID, v))
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldModelID, v))
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldModelID, v))
}

// ModelIDContains applies the Contains predicate on the "model_id" field.
func ModelIDContains(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldContains(FieldModelID, v))
}

// ModelIDHasPrefix applies the HasPrefix predicate on the "model_id" field.
func ModelIDHasPrefix(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldHasPrefix(FieldModelID, v))
}

// ModelIDHasSuffix applies the HasSuffix predicate on the "model_id" field.
func ModelIDHasSuffix(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldHasSuffix(FieldModelID, v))
}

// ModelIDEqualFold applies the EqualFold predicate on the "model_id" field.
func ModelIDEqualFold(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEqualFold(FieldModelID, v))
}

// ModelIDContainsFold applies the ContainsFold predicate on the "model_id" field.
func ModelIDContainsFold(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldContainsFold(FieldModelID, v))
}

// PromptTokensEQ applies the EQ predicate on the "prompt_tokens" field.
func PromptTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptTokens, v))
}

// PromptTokensNEQ applies the NEQ predicate on the "prompt_tokens" field.
func PromptTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldPromptTokens, v))
}

// PromptTokensIn applies the In predicate on the "prompt_tokens" field.
func PromptTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldPromptTokens, vs...))
}

// PromptTokensNotIn applies the NotIn predicate on the "prompt_tokens" field.
func PromptTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldPromptTokens, vs...))
}

// PromptTokensGT applies the GT predicate on the "prompt_tokens" field.
func PromptTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldPromptTokens, v))
}

// PromptTokensGTE applies the GTE predicate on the "prompt_tokens" field.
func PromptTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldPromptTokens, v))
}

// PromptTokensLT applies the LT predicate on the "prompt_tokens" field.
func PromptTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldPromptTokens, v))
}

// PromptTokensLTE applies the LTE predicate on the "prompt_tokens" field.
func PromptTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldPromptTokens, v))
}

// CompletionTokensEQ applies the EQ predicate on the "completion_tokens" field.
func CompletionTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionTokens, v))
}

// CompletionTokensNEQ applies the NEQ predicate on the "completion_tokens" field.
func CompletionTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCompletionTokens, v))
}

// CompletionTokensIn applies the In predicate on the "completion_tokens" field.
func CompletionTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCompletionTokens, vs...))
}

// CompletionTokensNotIn applies the NotIn predicate on the "completion_tokens" field.
func CompletionTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCompletionTokens, vs...))
}

// CompletionTokensGT applies the GT predicate on the "completion_tokens" field.
func CompletionTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCompletionTokens, v))
}

// CompletionTokensGTE applies the GTE predicate on the "completion_tokens" field.
func CompletionTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCompletionTokens, v))
}

// CompletionTokensLT applies the LT predicate on the "completion_tokens" field.
func CompletionTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCompletionTokens, v))
}

// CompletionTokensLTE applies the LTE predicate on the "completion_tokens" field.
func CompletionTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCompletionTokens, v))
}

// TotalTokensEQ applies the EQ predicate on the "total_tokens" field.
func TotalTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldTotalTokens, v))
}

// TotalTokensNEQ applies the NEQ predicate on the "total_tokens" field.
func TotalTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldTotalTokens, v))
}

// TotalTokensIn applies the In predicate on the "total_tokens" field.
func TotalTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldTotalTokens, vs...))
}

// TotalTokensNotIn applies the NotIn predicate on the "total_tokens" field.
func TotalTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldTotalTokens, vs...))
}

// TotalTokensGT applies the GT predicate on the "total_tokens" field.
func TotalTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldTotalTokens, v))
}

// TotalTokensGTE applies the GTE predicate on the "total_tokens" field.
func TotalTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldTotalTokens, v))
}

// TotalTokensLT applies the LT predicate on the "total_tokens" field.
func TotalTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldTotalTokens, v))
}

// TotalTokensLTE applies the LTE predicate on the "total_tokens" field.
func TotalTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldTotalTokens, v))
}

// PromptAudioTokensEQ applies the EQ predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptAudioTokens, v))
}

// PromptAudioTokensNEQ applies the NEQ predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldPromptAudioTokens, v))
}

// PromptAudioTokensIn applies the In predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldPromptAudioTokens, vs...))
}

// PromptAudioTokensNotIn applies the NotIn predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldPromptAudioTokens, vs...))
}

// PromptAudioTokensGT applies the GT predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldPromptAudioTokens, v))
}

// PromptAudioTokensGTE applies the GTE predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldPromptAudioTokens, v))
}

// PromptAudioTokensLT applies the LT predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldPromptAudioTokens, v))
}

// PromptAudioTokensLTE applies the LTE predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldPromptAudioTokens, v))
}

// PromptAudioTokensIsNil applies the IsNil predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldPromptAudioTokens))
}

// PromptAudioTokensNotNil applies the NotNil predicate on the "prompt_audio_tokens" field.
func PromptAudioTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldPromptAudioTokens))
}

// PromptCachedTokensEQ applies the EQ predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldPromptCachedTokens, v))
}

// PromptCachedTokensNEQ applies the NEQ predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldPromptCachedTokens, v))
}

// PromptCachedTokensIn applies the In predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldPromptCachedTokens, vs...))
}

// PromptCachedTokensNotIn applies the NotIn predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldPromptCachedTokens, vs...))
}

// PromptCachedTokensGT applies the GT predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldPromptCachedTokens, v))
}

// PromptCachedTokensGTE applies the GTE predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldPromptCachedTokens, v))
}

// PromptCachedTokensLT applies the LT predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldPromptCachedTokens, v))
}

// PromptCachedTokensLTE applies the LTE predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldPromptCachedTokens, v))
}

// PromptCachedTokensIsNil applies the IsNil predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldPromptCachedTokens))
}

// PromptCachedTokensNotNil applies the NotNil predicate on the "prompt_cached_tokens" field.
func PromptCachedTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldPromptCachedTokens))
}

// CompletionAudioTokensEQ applies the EQ predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensNEQ applies the NEQ predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensIn applies the In predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCompletionAudioTokens, vs...))
}

// CompletionAudioTokensNotIn applies the NotIn predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCompletionAudioTokens, vs...))
}

// CompletionAudioTokensGT applies the GT predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensGTE applies the GTE predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensLT applies the LT predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensLTE applies the LTE predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCompletionAudioTokens, v))
}

// CompletionAudioTokensIsNil applies the IsNil predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldCompletionAudioTokens))
}

// CompletionAudioTokensNotNil applies the NotNil predicate on the "completion_audio_tokens" field.
func CompletionAudioTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldCompletionAudioTokens))
}

// CompletionReasoningTokensEQ applies the EQ predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensNEQ applies the NEQ predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensIn applies the In predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCompletionReasoningTokens, vs...))
}

// CompletionReasoningTokensNotIn applies the NotIn predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCompletionReasoningTokens, vs...))
}

// CompletionReasoningTokensGT applies the GT predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensGTE applies the GTE predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensLT applies the LT predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensLTE applies the LTE predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCompletionReasoningTokens, v))
}

// CompletionReasoningTokensIsNil applies the IsNil predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldCompletionReasoningTokens))
}

// CompletionReasoningTokensNotNil applies the NotNil predicate on the "completion_reasoning_tokens" field.
func CompletionReasoningTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldCompletionReasoningTokens))
}

// CompletionAcceptedPredictionTokensEQ applies the EQ predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensNEQ applies the NEQ predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensIn applies the In predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCompletionAcceptedPredictionTokens, vs...))
}

// CompletionAcceptedPredictionTokensNotIn applies the NotIn predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCompletionAcceptedPredictionTokens, vs...))
}

// CompletionAcceptedPredictionTokensGT applies the GT predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensGTE applies the GTE predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensLT applies the LT predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensLTE applies the LTE predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCompletionAcceptedPredictionTokens, v))
}

// CompletionAcceptedPredictionTokensIsNil applies the IsNil predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldCompletionAcceptedPredictionTokens))
}

// CompletionAcceptedPredictionTokensNotNil applies the NotNil predicate on the "completion_accepted_prediction_tokens" field.
func CompletionAcceptedPredictionTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldCompletionAcceptedPredictionTokens))
}

// CompletionRejectedPredictionTokensEQ applies the EQ predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensNEQ applies the NEQ predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensNEQ(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensIn applies the In predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldCompletionRejectedPredictionTokens, vs...))
}

// CompletionRejectedPredictionTokensNotIn applies the NotIn predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensNotIn(vs ...int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldCompletionRejectedPredictionTokens, vs...))
}

// CompletionRejectedPredictionTokensGT applies the GT predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensGT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensGTE applies the GTE predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensGTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensLT applies the LT predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensLT(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensLTE applies the LTE predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensLTE(v int) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldCompletionRejectedPredictionTokens, v))
}

// CompletionRejectedPredictionTokensIsNil applies the IsNil predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensIsNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIsNull(FieldCompletionRejectedPredictionTokens))
}

// CompletionRejectedPredictionTokensNotNil applies the NotNil predicate on the "completion_rejected_prediction_tokens" field.
func CompletionRejectedPredictionTokensNotNil() predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotNull(FieldCompletionRejectedPredictionTokens))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldSource, vs...))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.UsageLog {
	return predicate.UsageLog(sql.FieldContainsFold(FieldFormat, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequest applies the HasEdge predicate on the "request" edge.
func HasRequest() predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := newRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Channel) predicate.UsageLog {
	return predicate.UsageLog(func(s *sql.Selector) {
		step := newChannelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UsageLog) predicate.UsageLog {
	return predicate.UsageLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UsageLog) predicate.UsageLog {
	return predicate.UsageLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UsageLog) predicate.UsageLog {
	return predicate.UsageLog(sql.NotPredicates(p))
}
