// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/usagelog"
	"github.com/looplj/axonhub/internal/ent/user"
)

// UsageLog is the model entity for the UsageLog schema.
type UsageLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"deleted_at,omitempty"`
	// User ID who made the request
	UserID int `json:"user_id,omitempty"`
	// Related request ID
	RequestID int `json:"request_id,omitempty"`
	// Channel ID used for the request
	ChannelID int `json:"channel_id,omitempty"`
	// Model identifier used for the request
	ModelID string `json:"model_id,omitempty"`
	// Number of tokens in the prompt
	PromptTokens int `json:"prompt_tokens,omitempty"`
	// Number of tokens in the completion
	CompletionTokens int `json:"completion_tokens,omitempty"`
	// Total number of tokens used
	TotalTokens int `json:"total_tokens,omitempty"`
	// Number of audio tokens in the prompt
	PromptAudioTokens int `json:"prompt_audio_tokens,omitempty"`
	// Number of cached tokens in the prompt
	PromptCachedTokens int `json:"prompt_cached_tokens,omitempty"`
	// Number of audio tokens in the completion
	CompletionAudioTokens int `json:"completion_audio_tokens,omitempty"`
	// Number of reasoning tokens in the completion
	CompletionReasoningTokens int `json:"completion_reasoning_tokens,omitempty"`
	// Number of accepted prediction tokens
	CompletionAcceptedPredictionTokens int `json:"completion_accepted_prediction_tokens,omitempty"`
	// Number of rejected prediction tokens
	CompletionRejectedPredictionTokens int `json:"completion_rejected_prediction_tokens,omitempty"`
	// Source of the request
	Source usagelog.Source `json:"source,omitempty"`
	// Request format used
	Format string `json:"format,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsageLogQuery when eager-loading is set.
	Edges        UsageLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UsageLogEdges holds the relations/edges for other nodes in the graph.
type UsageLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsageLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsageLogEdges) RequestOrErr() (*Request, error) {
	if e.Request != nil {
		return e.Request, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: request.Label}
	}
	return nil, &NotLoadedError{edge: "request"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsageLogEdges) ChannelOrErr() (*Channel, error) {
	if e.Channel != nil {
		return e.Channel, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: channel.Label}
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsageLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usagelog.FieldID, usagelog.FieldDeletedAt, usagelog.FieldUserID, usagelog.FieldRequestID, usagelog.FieldChannelID, usagelog.FieldPromptTokens, usagelog.FieldCompletionTokens, usagelog.FieldTotalTokens, usagelog.FieldPromptAudioTokens, usagelog.FieldPromptCachedTokens, usagelog.FieldCompletionAudioTokens, usagelog.FieldCompletionReasoningTokens, usagelog.FieldCompletionAcceptedPredictionTokens, usagelog.FieldCompletionRejectedPredictionTokens:
			values[i] = new(sql.NullInt64)
		case usagelog.FieldModelID, usagelog.FieldSource, usagelog.FieldFormat:
			values[i] = new(sql.NullString)
		case usagelog.FieldCreatedAt, usagelog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsageLog fields.
func (ul *UsageLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usagelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ul.ID = int(value.Int64)
		case usagelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ul.CreatedAt = value.Time
			}
		case usagelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ul.UpdatedAt = value.Time
			}
		case usagelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ul.DeletedAt = int(value.Int64)
			}
		case usagelog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ul.UserID = int(value.Int64)
			}
		case usagelog.FieldRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				ul.RequestID = int(value.Int64)
			}
		case usagelog.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				ul.ChannelID = int(value.Int64)
			}
		case usagelog.FieldModelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				ul.ModelID = value.String
			}
		case usagelog.FieldPromptTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_tokens", values[i])
			} else if value.Valid {
				ul.PromptTokens = int(value.Int64)
			}
		case usagelog.FieldCompletionTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_tokens", values[i])
			} else if value.Valid {
				ul.CompletionTokens = int(value.Int64)
			}
		case usagelog.FieldTotalTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_tokens", values[i])
			} else if value.Valid {
				ul.TotalTokens = int(value.Int64)
			}
		case usagelog.FieldPromptAudioTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_audio_tokens", values[i])
			} else if value.Valid {
				ul.PromptAudioTokens = int(value.Int64)
			}
		case usagelog.FieldPromptCachedTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_cached_tokens", values[i])
			} else if value.Valid {
				ul.PromptCachedTokens = int(value.Int64)
			}
		case usagelog.FieldCompletionAudioTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_audio_tokens", values[i])
			} else if value.Valid {
				ul.CompletionAudioTokens = int(value.Int64)
			}
		case usagelog.FieldCompletionReasoningTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_reasoning_tokens", values[i])
			} else if value.Valid {
				ul.CompletionReasoningTokens = int(value.Int64)
			}
		case usagelog.FieldCompletionAcceptedPredictionTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_accepted_prediction_tokens", values[i])
			} else if value.Valid {
				ul.CompletionAcceptedPredictionTokens = int(value.Int64)
			}
		case usagelog.FieldCompletionRejectedPredictionTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completion_rejected_prediction_tokens", values[i])
			} else if value.Valid {
				ul.CompletionRejectedPredictionTokens = int(value.Int64)
			}
		case usagelog.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ul.Source = usagelog.Source(value.String)
			}
		case usagelog.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				ul.Format = value.String
			}
		default:
			ul.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsageLog.
// This includes values selected through modifiers, order, etc.
func (ul *UsageLog) Value(name string) (ent.Value, error) {
	return ul.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UsageLog entity.
func (ul *UsageLog) QueryUser() *UserQuery {
	return NewUsageLogClient(ul.config).QueryUser(ul)
}

// QueryRequest queries the "request" edge of the UsageLog entity.
func (ul *UsageLog) QueryRequest() *RequestQuery {
	return NewUsageLogClient(ul.config).QueryRequest(ul)
}

// QueryChannel queries the "channel" edge of the UsageLog entity.
func (ul *UsageLog) QueryChannel() *ChannelQuery {
	return NewUsageLogClient(ul.config).QueryChannel(ul)
}

// Update returns a builder for updating this UsageLog.
// Note that you need to call UsageLog.Unwrap() before calling this method if this UsageLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UsageLog) Update() *UsageLogUpdateOne {
	return NewUsageLogClient(ul.config).UpdateOne(ul)
}

// Unwrap unwraps the UsageLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ul *UsageLog) Unwrap() *UsageLog {
	_tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsageLog is not a transactional entity")
	}
	ul.config.driver = _tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UsageLog) String() string {
	var builder strings.Builder
	builder.WriteString("UsageLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ul.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ul.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ul.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ul.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ul.UserID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", ul.RequestID))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", ul.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(ul.ModelID)
	builder.WriteString(", ")
	builder.WriteString("prompt_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.PromptTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.CompletionTokens))
	builder.WriteString(", ")
	builder.WriteString("total_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.TotalTokens))
	builder.WriteString(", ")
	builder.WriteString("prompt_audio_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.PromptAudioTokens))
	builder.WriteString(", ")
	builder.WriteString("prompt_cached_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.PromptCachedTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_audio_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.CompletionAudioTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_reasoning_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.CompletionReasoningTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_accepted_prediction_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.CompletionAcceptedPredictionTokens))
	builder.WriteString(", ")
	builder.WriteString("completion_rejected_prediction_tokens=")
	builder.WriteString(fmt.Sprintf("%v", ul.CompletionRejectedPredictionTokens))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", ul.Source))
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(ul.Format)
	builder.WriteByte(')')
	return builder.String()
}

// UsageLogs is a parsable slice of UsageLog.
type UsageLogs []*UsageLog
