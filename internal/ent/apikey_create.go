// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/apikey"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/user"
)

// APIKeyCreate is the builder for creating a APIKey entity.
type APIKeyCreate struct {
	config
	mutation *APIKeyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (akc *APIKeyCreate) SetCreatedAt(t time.Time) *APIKeyCreate {
	akc.mutation.SetCreatedAt(t)
	return akc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akc *APIKeyCreate) SetNillableCreatedAt(t *time.Time) *APIKeyCreate {
	if t != nil {
		akc.SetCreatedAt(*t)
	}
	return akc
}

// SetUpdatedAt sets the "updated_at" field.
func (akc *APIKeyCreate) SetUpdatedAt(t time.Time) *APIKeyCreate {
	akc.mutation.SetUpdatedAt(t)
	return akc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akc *APIKeyCreate) SetNillableUpdatedAt(t *time.Time) *APIKeyCreate {
	if t != nil {
		akc.SetUpdatedAt(*t)
	}
	return akc
}

// SetDeletedAt sets the "deleted_at" field.
func (akc *APIKeyCreate) SetDeletedAt(i int) *APIKeyCreate {
	akc.mutation.SetDeletedAt(i)
	return akc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (akc *APIKeyCreate) SetNillableDeletedAt(i *int) *APIKeyCreate {
	if i != nil {
		akc.SetDeletedAt(*i)
	}
	return akc
}

// SetUserID sets the "user_id" field.
func (akc *APIKeyCreate) SetUserID(i int) *APIKeyCreate {
	akc.mutation.SetUserID(i)
	return akc
}

// SetKey sets the "key" field.
func (akc *APIKeyCreate) SetKey(s string) *APIKeyCreate {
	akc.mutation.SetKey(s)
	return akc
}

// SetName sets the "name" field.
func (akc *APIKeyCreate) SetName(s string) *APIKeyCreate {
	akc.mutation.SetName(s)
	return akc
}

// SetUser sets the "user" edge to the User entity.
func (akc *APIKeyCreate) SetUser(u *User) *APIKeyCreate {
	return akc.SetUserID(u.ID)
}

// AddRequestIDs adds the "requests" edge to the Request entity by IDs.
func (akc *APIKeyCreate) AddRequestIDs(ids ...int) *APIKeyCreate {
	akc.mutation.AddRequestIDs(ids...)
	return akc
}

// AddRequests adds the "requests" edges to the Request entity.
func (akc *APIKeyCreate) AddRequests(r ...*Request) *APIKeyCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return akc.AddRequestIDs(ids...)
}

// Mutation returns the APIKeyMutation object of the builder.
func (akc *APIKeyCreate) Mutation() *APIKeyMutation {
	return akc.mutation
}

// Save creates the APIKey in the database.
func (akc *APIKeyCreate) Save(ctx context.Context) (*APIKey, error) {
	if err := akc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, akc.sqlSave, akc.mutation, akc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (akc *APIKeyCreate) SaveX(ctx context.Context) *APIKey {
	v, err := akc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akc *APIKeyCreate) Exec(ctx context.Context) error {
	_, err := akc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akc *APIKeyCreate) ExecX(ctx context.Context) {
	if err := akc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akc *APIKeyCreate) defaults() error {
	if _, ok := akc.mutation.CreatedAt(); !ok {
		if apikey.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized apikey.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := apikey.DefaultCreatedAt()
		akc.mutation.SetCreatedAt(v)
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		if apikey.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized apikey.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := apikey.DefaultUpdatedAt()
		akc.mutation.SetUpdatedAt(v)
	}
	if _, ok := akc.mutation.DeletedAt(); !ok {
		v := apikey.DefaultDeletedAt
		akc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (akc *APIKeyCreate) check() error {
	if _, ok := akc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "APIKey.created_at"`)}
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "APIKey.updated_at"`)}
	}
	if _, ok := akc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "APIKey.deleted_at"`)}
	}
	if _, ok := akc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "APIKey.user_id"`)}
	}
	if _, ok := akc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "APIKey.key"`)}
	}
	if _, ok := akc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "APIKey.name"`)}
	}
	if len(akc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "APIKey.user"`)}
	}
	return nil
}

func (akc *APIKeyCreate) sqlSave(ctx context.Context) (*APIKey, error) {
	if err := akc.check(); err != nil {
		return nil, err
	}
	_node, _spec := akc.createSpec()
	if err := sqlgraph.CreateNode(ctx, akc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	akc.mutation.id = &_node.ID
	akc.mutation.done = true
	return _node, nil
}

func (akc *APIKeyCreate) createSpec() (*APIKey, *sqlgraph.CreateSpec) {
	var (
		_node = &APIKey{config: akc.config}
		_spec = sqlgraph.NewCreateSpec(apikey.Table, sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt))
	)
	_spec.OnConflict = akc.conflict
	if value, ok := akc.mutation.CreatedAt(); ok {
		_spec.SetField(apikey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := akc.mutation.UpdatedAt(); ok {
		_spec.SetField(apikey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := akc.mutation.DeletedAt(); ok {
		_spec.SetField(apikey.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := akc.mutation.Key(); ok {
		_spec.SetField(apikey.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := akc.mutation.Name(); ok {
		_spec.SetField(apikey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := akc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := akc.mutation.RequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.RequestsTable,
			Columns: []string{apikey.RequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.APIKey.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APIKeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (akc *APIKeyCreate) OnConflict(opts ...sql.ConflictOption) *APIKeyUpsertOne {
	akc.conflict = opts
	return &APIKeyUpsertOne{
		create: akc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.APIKey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akc *APIKeyCreate) OnConflictColumns(columns ...string) *APIKeyUpsertOne {
	akc.conflict = append(akc.conflict, sql.ConflictColumns(columns...))
	return &APIKeyUpsertOne{
		create: akc,
	}
}

type (
	// APIKeyUpsertOne is the builder for "upsert"-ing
	//  one APIKey node.
	APIKeyUpsertOne struct {
		create *APIKeyCreate
	}

	// APIKeyUpsert is the "OnConflict" setter.
	APIKeyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *APIKeyUpsert) SetUpdatedAt(v time.Time) *APIKeyUpsert {
	u.Set(apikey.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIKeyUpsert) UpdateUpdatedAt() *APIKeyUpsert {
	u.SetExcluded(apikey.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIKeyUpsert) SetDeletedAt(v int) *APIKeyUpsert {
	u.Set(apikey.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIKeyUpsert) UpdateDeletedAt() *APIKeyUpsert {
	u.SetExcluded(apikey.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIKeyUpsert) AddDeletedAt(v int) *APIKeyUpsert {
	u.Add(apikey.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *APIKeyUpsert) SetName(v string) *APIKeyUpsert {
	u.Set(apikey.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APIKeyUpsert) UpdateName() *APIKeyUpsert {
	u.SetExcluded(apikey.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.APIKey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *APIKeyUpsertOne) UpdateNewValues() *APIKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(apikey.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(apikey.FieldUserID)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(apikey.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.APIKey.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *APIKeyUpsertOne) Ignore() *APIKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APIKeyUpsertOne) DoNothing() *APIKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APIKeyCreate.OnConflict
// documentation for more info.
func (u *APIKeyUpsertOne) Update(set func(*APIKeyUpsert)) *APIKeyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APIKeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *APIKeyUpsertOne) SetUpdatedAt(v time.Time) *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIKeyUpsertOne) UpdateUpdatedAt() *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIKeyUpsertOne) SetDeletedAt(v int) *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIKeyUpsertOne) AddDeletedAt(v int) *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIKeyUpsertOne) UpdateDeletedAt() *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *APIKeyUpsertOne) SetName(v string) *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APIKeyUpsertOne) UpdateName() *APIKeyUpsertOne {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *APIKeyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APIKeyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APIKeyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *APIKeyUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *APIKeyUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// APIKeyCreateBulk is the builder for creating many APIKey entities in bulk.
type APIKeyCreateBulk struct {
	config
	err      error
	builders []*APIKeyCreate
	conflict []sql.ConflictOption
}

// Save creates the APIKey entities in the database.
func (akcb *APIKeyCreateBulk) Save(ctx context.Context) ([]*APIKey, error) {
	if akcb.err != nil {
		return nil, akcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(akcb.builders))
	nodes := make([]*APIKey, len(akcb.builders))
	mutators := make([]Mutator, len(akcb.builders))
	for i := range akcb.builders {
		func(i int, root context.Context) {
			builder := akcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APIKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = akcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akcb *APIKeyCreateBulk) SaveX(ctx context.Context) []*APIKey {
	v, err := akcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akcb *APIKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := akcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akcb *APIKeyCreateBulk) ExecX(ctx context.Context) {
	if err := akcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.APIKey.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.APIKeyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (akcb *APIKeyCreateBulk) OnConflict(opts ...sql.ConflictOption) *APIKeyUpsertBulk {
	akcb.conflict = opts
	return &APIKeyUpsertBulk{
		create: akcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.APIKey.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (akcb *APIKeyCreateBulk) OnConflictColumns(columns ...string) *APIKeyUpsertBulk {
	akcb.conflict = append(akcb.conflict, sql.ConflictColumns(columns...))
	return &APIKeyUpsertBulk{
		create: akcb,
	}
}

// APIKeyUpsertBulk is the builder for "upsert"-ing
// a bulk of APIKey nodes.
type APIKeyUpsertBulk struct {
	create *APIKeyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.APIKey.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *APIKeyUpsertBulk) UpdateNewValues() *APIKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(apikey.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(apikey.FieldUserID)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(apikey.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.APIKey.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *APIKeyUpsertBulk) Ignore() *APIKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *APIKeyUpsertBulk) DoNothing() *APIKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the APIKeyCreateBulk.OnConflict
// documentation for more info.
func (u *APIKeyUpsertBulk) Update(set func(*APIKeyUpsert)) *APIKeyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&APIKeyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *APIKeyUpsertBulk) SetUpdatedAt(v time.Time) *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *APIKeyUpsertBulk) UpdateUpdatedAt() *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *APIKeyUpsertBulk) SetDeletedAt(v int) *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *APIKeyUpsertBulk) AddDeletedAt(v int) *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *APIKeyUpsertBulk) UpdateDeletedAt() *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *APIKeyUpsertBulk) SetName(v string) *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *APIKeyUpsertBulk) UpdateName() *APIKeyUpsertBulk {
	return u.Update(func(s *APIKeyUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *APIKeyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the APIKeyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for APIKeyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *APIKeyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
