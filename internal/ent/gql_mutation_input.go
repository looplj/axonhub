// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/user"
	"github.com/looplj/axonhub/internal/objects"
)

// CreateAPIKeyInput represents a mutation input for creating apikeys.
type CreateAPIKeyInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
}

// Mutate applies the CreateAPIKeyInput on the APIKeyMutation builder.
func (i *CreateAPIKeyInput) Mutate(m *APIKeyMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateAPIKeyInput on the APIKeyCreate builder.
func (c *APIKeyCreate) SetInput(i CreateAPIKeyInput) *APIKeyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAPIKeyInput represents a mutation input for updating apikeys.
type UpdateAPIKeyInput struct {
	UpdatedAt *time.Time
	Name      *string
}

// Mutate applies the UpdateAPIKeyInput on the APIKeyMutation builder.
func (i *UpdateAPIKeyInput) Mutate(m *APIKeyMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateAPIKeyInput on the APIKeyUpdate builder.
func (c *APIKeyUpdate) SetInput(i UpdateAPIKeyInput) *APIKeyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAPIKeyInput on the APIKeyUpdateOne builder.
func (c *APIKeyUpdateOne) SetInput(i UpdateAPIKeyInput) *APIKeyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateChannelInput represents a mutation input for creating channels.
type CreateChannelInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Type             channel.Type
	BaseURL          *string
	Name             string
	Status           *channel.Status
	Credentials      *objects.ChannelCredentials
	SupportedModels  []string
	DefaultTestModel string
	Settings         *objects.ChannelSettings
	OrderingWeight   *int
}

// Mutate applies the CreateChannelInput on the ChannelMutation builder.
func (i *CreateChannelInput) Mutate(m *ChannelMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetType(i.Type)
	if v := i.BaseURL; v != nil {
		m.SetBaseURL(*v)
	}
	m.SetName(i.Name)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Credentials; v != nil {
		m.SetCredentials(v)
	}
	if v := i.SupportedModels; v != nil {
		m.SetSupportedModels(v)
	}
	m.SetDefaultTestModel(i.DefaultTestModel)
	if v := i.Settings; v != nil {
		m.SetSettings(v)
	}
	if v := i.OrderingWeight; v != nil {
		m.SetOrderingWeight(*v)
	}
}

// SetInput applies the change-set in the CreateChannelInput on the ChannelCreate builder.
func (c *ChannelCreate) SetInput(i CreateChannelInput) *ChannelCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateChannelInput represents a mutation input for updating channels.
type UpdateChannelInput struct {
	UpdatedAt             *time.Time
	ClearBaseURL          bool
	BaseURL               *string
	Name                  *string
	Status                *channel.Status
	Credentials           *objects.ChannelCredentials
	SupportedModels       []string
	AppendSupportedModels []string
	DefaultTestModel      *string
	ClearSettings         bool
	Settings              *objects.ChannelSettings
	OrderingWeight        *int
}

// Mutate applies the UpdateChannelInput on the ChannelMutation builder.
func (i *UpdateChannelInput) Mutate(m *ChannelMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearBaseURL {
		m.ClearBaseURL()
	}
	if v := i.BaseURL; v != nil {
		m.SetBaseURL(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Credentials; v != nil {
		m.SetCredentials(v)
	}
	if v := i.SupportedModels; v != nil {
		m.SetSupportedModels(v)
	}
	if i.AppendSupportedModels != nil {
		m.AppendSupportedModels(i.SupportedModels)
	}
	if v := i.DefaultTestModel; v != nil {
		m.SetDefaultTestModel(*v)
	}
	if i.ClearSettings {
		m.ClearSettings()
	}
	if v := i.Settings; v != nil {
		m.SetSettings(v)
	}
	if v := i.OrderingWeight; v != nil {
		m.SetOrderingWeight(*v)
	}
}

// SetInput applies the change-set in the UpdateChannelInput on the ChannelUpdate builder.
func (c *ChannelUpdate) SetInput(i UpdateChannelInput) *ChannelUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateChannelInput on the ChannelUpdateOne builder.
func (c *ChannelUpdateOne) SetInput(i UpdateChannelInput) *ChannelUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRequestInput represents a mutation input for creating requests.
type CreateRequestInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Source         *request.Source
	ModelID        string
	Format         *string
	RequestBody    objects.JSONRawMessage
	ResponseBody   objects.JSONRawMessage
	ResponseChunks []objects.JSONRawMessage
	Status         request.Status
	UserID         int
	APIKeyID       *int
	ChannelID      *int
}

// Mutate applies the CreateRequestInput on the RequestMutation builder.
func (i *CreateRequestInput) Mutate(m *RequestMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	m.SetModelID(i.ModelID)
	if v := i.Format; v != nil {
		m.SetFormat(*v)
	}
	if v := i.RequestBody; v != nil {
		m.SetRequestBody(v)
	}
	if v := i.ResponseBody; v != nil {
		m.SetResponseBody(v)
	}
	if v := i.ResponseChunks; v != nil {
		m.SetResponseChunks(v)
	}
	m.SetStatus(i.Status)
	m.SetUserID(i.UserID)
	if v := i.APIKeyID; v != nil {
		m.SetAPIKeyID(*v)
	}
	if v := i.ChannelID; v != nil {
		m.SetChannelID(*v)
	}
}

// SetInput applies the change-set in the CreateRequestInput on the RequestCreate builder.
func (c *RequestCreate) SetInput(i CreateRequestInput) *RequestCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRequestInput represents a mutation input for updating requests.
type UpdateRequestInput struct {
	UpdatedAt            *time.Time
	ClearResponseBody    bool
	ResponseBody         objects.JSONRawMessage
	AppendResponseBody   objects.JSONRawMessage
	ClearResponseChunks  bool
	ResponseChunks       []objects.JSONRawMessage
	AppendResponseChunks []objects.JSONRawMessage
	Status               *request.Status
	ClearChannel         bool
	ChannelID            *int
}

// Mutate applies the UpdateRequestInput on the RequestMutation builder.
func (i *UpdateRequestInput) Mutate(m *RequestMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearResponseBody {
		m.ClearResponseBody()
	}
	if v := i.ResponseBody; v != nil {
		m.SetResponseBody(v)
	}
	if i.AppendResponseBody != nil {
		m.AppendResponseBody(i.ResponseBody)
	}
	if i.ClearResponseChunks {
		m.ClearResponseChunks()
	}
	if v := i.ResponseChunks; v != nil {
		m.SetResponseChunks(v)
	}
	if i.AppendResponseChunks != nil {
		m.AppendResponseChunks(i.ResponseChunks)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearChannel {
		m.ClearChannel()
	}
	if v := i.ChannelID; v != nil {
		m.SetChannelID(*v)
	}
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdate builder.
func (c *RequestUpdate) SetInput(i UpdateRequestInput) *RequestUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRequestInput on the RequestUpdateOne builder.
func (c *RequestUpdateOne) SetInput(i UpdateRequestInput) *RequestUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Code      string
	Name      string
	Scopes    []string
	UserIDs   []int
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCode(i.Code)
	m.SetName(i.Name)
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoleInput represents a mutation input for updating roles.
type UpdateRoleInput struct {
	UpdatedAt     *time.Time
	Name          *string
	ClearScopes   bool
	Scopes        []string
	AppendScopes  []string
	ClearUsers    bool
	AddUserIDs    []int
	RemoveUserIDs []int
}

// Mutate applies the UpdateRoleInput on the RoleMutation builder.
func (i *UpdateRoleInput) Mutate(m *RoleMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdate builder.
func (c *RoleUpdate) SetInput(i UpdateRoleInput) *RoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdateOne builder.
func (c *RoleUpdateOne) SetInput(i UpdateRoleInput) *RoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSystemInput represents a mutation input for creating systems.
type CreateSystemInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Key       string
	Value     string
}

// Mutate applies the CreateSystemInput on the SystemMutation builder.
func (i *CreateSystemInput) Mutate(m *SystemMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetKey(i.Key)
	m.SetValue(i.Value)
}

// SetInput applies the change-set in the CreateSystemInput on the SystemCreate builder.
func (c *SystemCreate) SetInput(i CreateSystemInput) *SystemCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSystemInput represents a mutation input for updating systems.
type UpdateSystemInput struct {
	UpdatedAt *time.Time
	Key       *string
	Value     *string
}

// Mutate applies the UpdateSystemInput on the SystemMutation builder.
func (i *UpdateSystemInput) Mutate(m *SystemMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
}

// SetInput applies the change-set in the UpdateSystemInput on the SystemUpdate builder.
func (c *SystemUpdate) SetInput(i UpdateSystemInput) *SystemUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSystemInput on the SystemUpdateOne builder.
func (c *SystemUpdateOne) SetInput(i UpdateSystemInput) *SystemUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	Email          string
	Status         *user.Status
	PreferLanguage *string
	Password       string
	FirstName      *string
	LastName       *string
	Avatar         *string
	IsOwner        *bool
	Scopes         []string
	RoleIDs        []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PreferLanguage; v != nil {
		m.SetPreferLanguage(*v)
	}
	m.SetPassword(i.Password)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt      *time.Time
	Email          *string
	Status         *user.Status
	PreferLanguage *string
	Password       *string
	FirstName      *string
	LastName       *string
	ClearAvatar    bool
	Avatar         *string
	IsOwner        *bool
	ClearScopes    bool
	Scopes         []string
	AppendScopes   []string
	ClearRoles     bool
	AddRoleIDs     []int
	RemoveRoleIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PreferLanguage; v != nil {
		m.SetPreferLanguage(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.IsOwner; v != nil {
		m.SetIsOwner(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if i.ClearRoles {
		m.ClearRoles()
	}
	if v := i.AddRoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.RemoveRoleIDs; len(v) > 0 {
		m.RemoveRoleIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
