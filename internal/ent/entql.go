// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/looplj/axonhub/internal/ent/apikey"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/ent/job"
	"github.com/looplj/axonhub/internal/ent/predicate"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/requestexecution"
	"github.com/looplj/axonhub/internal/ent/role"
	"github.com/looplj/axonhub/internal/ent/system"
	"github.com/looplj/axonhub/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 8)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apikey.Table,
			Columns: apikey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: apikey.FieldID,
			},
		},
		Type: "APIKey",
		Fields: map[string]*sqlgraph.FieldSpec{
			apikey.FieldCreatedAt: {Type: field.TypeTime, Column: apikey.FieldCreatedAt},
			apikey.FieldUpdatedAt: {Type: field.TypeTime, Column: apikey.FieldUpdatedAt},
			apikey.FieldDeletedAt: {Type: field.TypeInt, Column: apikey.FieldDeletedAt},
			apikey.FieldUserID:    {Type: field.TypeInt, Column: apikey.FieldUserID},
			apikey.FieldKey:       {Type: field.TypeString, Column: apikey.FieldKey},
			apikey.FieldName:      {Type: field.TypeString, Column: apikey.FieldName},
			apikey.FieldStatus:    {Type: field.TypeEnum, Column: apikey.FieldStatus},
			apikey.FieldScopes:    {Type: field.TypeJSON, Column: apikey.FieldScopes},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   channel.Table,
			Columns: channel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: channel.FieldID,
			},
		},
		Type: "Channel",
		Fields: map[string]*sqlgraph.FieldSpec{
			channel.FieldCreatedAt:        {Type: field.TypeTime, Column: channel.FieldCreatedAt},
			channel.FieldUpdatedAt:        {Type: field.TypeTime, Column: channel.FieldUpdatedAt},
			channel.FieldDeletedAt:        {Type: field.TypeInt, Column: channel.FieldDeletedAt},
			channel.FieldType:             {Type: field.TypeEnum, Column: channel.FieldType},
			channel.FieldBaseURL:          {Type: field.TypeString, Column: channel.FieldBaseURL},
			channel.FieldName:             {Type: field.TypeString, Column: channel.FieldName},
			channel.FieldStatus:           {Type: field.TypeEnum, Column: channel.FieldStatus},
			channel.FieldCredentials:      {Type: field.TypeJSON, Column: channel.FieldCredentials},
			channel.FieldSupportedModels:  {Type: field.TypeJSON, Column: channel.FieldSupportedModels},
			channel.FieldDefaultTestModel: {Type: field.TypeString, Column: channel.FieldDefaultTestModel},
			channel.FieldSettings:         {Type: field.TypeJSON, Column: channel.FieldSettings},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
		Type: "Job",
		Fields: map[string]*sqlgraph.FieldSpec{
			job.FieldOwnerID: {Type: field.TypeInt, Column: job.FieldOwnerID},
			job.FieldType:    {Type: field.TypeString, Column: job.FieldType},
			job.FieldContext: {Type: field.TypeString, Column: job.FieldContext},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   request.Table,
			Columns: request.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: request.FieldID,
			},
		},
		Type: "Request",
		Fields: map[string]*sqlgraph.FieldSpec{
			request.FieldCreatedAt:      {Type: field.TypeTime, Column: request.FieldCreatedAt},
			request.FieldUpdatedAt:      {Type: field.TypeTime, Column: request.FieldUpdatedAt},
			request.FieldDeletedAt:      {Type: field.TypeInt, Column: request.FieldDeletedAt},
			request.FieldUserID:         {Type: field.TypeInt, Column: request.FieldUserID},
			request.FieldAPIKeyID:       {Type: field.TypeInt, Column: request.FieldAPIKeyID},
			request.FieldSource:         {Type: field.TypeEnum, Column: request.FieldSource},
			request.FieldModelID:        {Type: field.TypeString, Column: request.FieldModelID},
			request.FieldFormat:         {Type: field.TypeString, Column: request.FieldFormat},
			request.FieldRequestBody:    {Type: field.TypeJSON, Column: request.FieldRequestBody},
			request.FieldResponseBody:   {Type: field.TypeJSON, Column: request.FieldResponseBody},
			request.FieldResponseChunks: {Type: field.TypeJSON, Column: request.FieldResponseChunks},
			request.FieldChannelID:      {Type: field.TypeInt, Column: request.FieldChannelID},
			request.FieldStatus:         {Type: field.TypeEnum, Column: request.FieldStatus},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   requestexecution.Table,
			Columns: requestexecution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestexecution.FieldID,
			},
		},
		Type: "RequestExecution",
		Fields: map[string]*sqlgraph.FieldSpec{
			requestexecution.FieldCreatedAt:      {Type: field.TypeTime, Column: requestexecution.FieldCreatedAt},
			requestexecution.FieldUpdatedAt:      {Type: field.TypeTime, Column: requestexecution.FieldUpdatedAt},
			requestexecution.FieldUserID:         {Type: field.TypeInt, Column: requestexecution.FieldUserID},
			requestexecution.FieldRequestID:      {Type: field.TypeInt, Column: requestexecution.FieldRequestID},
			requestexecution.FieldChannelID:      {Type: field.TypeInt, Column: requestexecution.FieldChannelID},
			requestexecution.FieldModelID:        {Type: field.TypeString, Column: requestexecution.FieldModelID},
			requestexecution.FieldFormat:         {Type: field.TypeString, Column: requestexecution.FieldFormat},
			requestexecution.FieldRequestBody:    {Type: field.TypeJSON, Column: requestexecution.FieldRequestBody},
			requestexecution.FieldResponseBody:   {Type: field.TypeJSON, Column: requestexecution.FieldResponseBody},
			requestexecution.FieldResponseChunks: {Type: field.TypeJSON, Column: requestexecution.FieldResponseChunks},
			requestexecution.FieldErrorMessage:   {Type: field.TypeString, Column: requestexecution.FieldErrorMessage},
			requestexecution.FieldStatus:         {Type: field.TypeEnum, Column: requestexecution.FieldStatus},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreatedAt: {Type: field.TypeTime, Column: role.FieldCreatedAt},
			role.FieldUpdatedAt: {Type: field.TypeTime, Column: role.FieldUpdatedAt},
			role.FieldDeletedAt: {Type: field.TypeInt, Column: role.FieldDeletedAt},
			role.FieldCode:      {Type: field.TypeString, Column: role.FieldCode},
			role.FieldName:      {Type: field.TypeString, Column: role.FieldName},
			role.FieldScopes:    {Type: field.TypeJSON, Column: role.FieldScopes},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   system.Table,
			Columns: system.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: system.FieldID,
			},
		},
		Type: "System",
		Fields: map[string]*sqlgraph.FieldSpec{
			system.FieldCreatedAt: {Type: field.TypeTime, Column: system.FieldCreatedAt},
			system.FieldUpdatedAt: {Type: field.TypeTime, Column: system.FieldUpdatedAt},
			system.FieldDeletedAt: {Type: field.TypeInt, Column: system.FieldDeletedAt},
			system.FieldKey:       {Type: field.TypeString, Column: system.FieldKey},
			system.FieldValue:     {Type: field.TypeString, Column: system.FieldValue},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:      {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:      {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldDeletedAt:      {Type: field.TypeInt, Column: user.FieldDeletedAt},
			user.FieldEmail:          {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldStatus:         {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldPreferLanguage: {Type: field.TypeString, Column: user.FieldPreferLanguage},
			user.FieldPassword:       {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldFirstName:      {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:       {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldAvatar:         {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldIsOwner:        {Type: field.TypeBool, Column: user.FieldIsOwner},
			user.FieldScopes:         {Type: field.TypeJSON, Column: user.FieldScopes},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apikey.UserTable,
			Columns: []string{apikey.UserColumn},
			Bidi:    false,
		},
		"APIKey",
		"User",
	)
	graph.MustAddE(
		"requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apikey.RequestsTable,
			Columns: []string{apikey.RequestsColumn},
			Bidi:    false,
		},
		"APIKey",
		"Request",
	)
	graph.MustAddE(
		"requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.RequestsTable,
			Columns: []string{channel.RequestsColumn},
			Bidi:    false,
		},
		"Channel",
		"Request",
	)
	graph.MustAddE(
		"executions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   channel.ExecutionsTable,
			Columns: []string{channel.ExecutionsColumn},
			Bidi:    false,
		},
		"Channel",
		"RequestExecution",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.UserTable,
			Columns: []string{request.UserColumn},
			Bidi:    false,
		},
		"Request",
		"User",
	)
	graph.MustAddE(
		"api_key",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.APIKeyTable,
			Columns: []string{request.APIKeyColumn},
			Bidi:    false,
		},
		"Request",
		"APIKey",
	)
	graph.MustAddE(
		"executions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
		},
		"Request",
		"RequestExecution",
	)
	graph.MustAddE(
		"channel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ChannelTable,
			Columns: []string{request.ChannelColumn},
			Bidi:    false,
		},
		"Request",
		"Channel",
	)
	graph.MustAddE(
		"request",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestexecution.RequestTable,
			Columns: []string{requestexecution.RequestColumn},
			Bidi:    false,
		},
		"RequestExecution",
		"Request",
	)
	graph.MustAddE(
		"channel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestexecution.ChannelTable,
			Columns: []string{requestexecution.ChannelColumn},
			Bidi:    false,
		},
		"RequestExecution",
		"Channel",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"User",
	)
	graph.MustAddE(
		"requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RequestsTable,
			Columns: []string{user.RequestsColumn},
			Bidi:    false,
		},
		"User",
		"Request",
	)
	graph.MustAddE(
		"api_keys",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APIKeysTable,
			Columns: []string{user.APIKeysColumn},
			Bidi:    false,
		},
		"User",
		"APIKey",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Role",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (akq *APIKeyQuery) addPredicate(pred func(s *sql.Selector)) {
	akq.predicates = append(akq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the APIKeyQuery builder.
func (akq *APIKeyQuery) Filter() *APIKeyFilter {
	return &APIKeyFilter{config: akq.config, predicateAdder: akq}
}

// addPredicate implements the predicateAdder interface.
func (m *APIKeyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the APIKeyMutation builder.
func (m *APIKeyMutation) Filter() *APIKeyFilter {
	return &APIKeyFilter{config: m.config, predicateAdder: m}
}

// APIKeyFilter provides a generic filtering capability at runtime for APIKeyQuery.
type APIKeyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *APIKeyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *APIKeyFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(apikey.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *APIKeyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *APIKeyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(apikey.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *APIKeyFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(apikey.FieldDeletedAt))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *APIKeyFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(apikey.FieldUserID))
}

// WhereKey applies the entql string predicate on the key field.
func (f *APIKeyFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(apikey.FieldKey))
}

// WhereName applies the entql string predicate on the name field.
func (f *APIKeyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apikey.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *APIKeyFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(apikey.FieldStatus))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *APIKeyFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(apikey.FieldScopes))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *APIKeyFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *APIKeyFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRequests applies a predicate to check if query has an edge requests.
func (f *APIKeyFilter) WhereHasRequests() {
	f.Where(entql.HasEdge("requests"))
}

// WhereHasRequestsWith applies a predicate to check if query has an edge requests with a given conditions (other predicates).
func (f *APIKeyFilter) WhereHasRequestsWith(preds ...predicate.Request) {
	f.Where(entql.HasEdgeWith("requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ChannelQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChannelQuery builder.
func (cq *ChannelQuery) Filter() *ChannelFilter {
	return &ChannelFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChannelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChannelMutation builder.
func (m *ChannelMutation) Filter() *ChannelFilter {
	return &ChannelFilter{config: m.config, predicateAdder: m}
}

// ChannelFilter provides a generic filtering capability at runtime for ChannelQuery.
type ChannelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChannelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ChannelFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(channel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChannelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(channel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ChannelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(channel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *ChannelFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(channel.FieldDeletedAt))
}

// WhereType applies the entql string predicate on the type field.
func (f *ChannelFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(channel.FieldType))
}

// WhereBaseURL applies the entql string predicate on the base_url field.
func (f *ChannelFilter) WhereBaseURL(p entql.StringP) {
	f.Where(p.Field(channel.FieldBaseURL))
}

// WhereName applies the entql string predicate on the name field.
func (f *ChannelFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(channel.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ChannelFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(channel.FieldStatus))
}

// WhereCredentials applies the entql json.RawMessage predicate on the credentials field.
func (f *ChannelFilter) WhereCredentials(p entql.BytesP) {
	f.Where(p.Field(channel.FieldCredentials))
}

// WhereSupportedModels applies the entql json.RawMessage predicate on the supported_models field.
func (f *ChannelFilter) WhereSupportedModels(p entql.BytesP) {
	f.Where(p.Field(channel.FieldSupportedModels))
}

// WhereDefaultTestModel applies the entql string predicate on the default_test_model field.
func (f *ChannelFilter) WhereDefaultTestModel(p entql.StringP) {
	f.Where(p.Field(channel.FieldDefaultTestModel))
}

// WhereSettings applies the entql json.RawMessage predicate on the settings field.
func (f *ChannelFilter) WhereSettings(p entql.BytesP) {
	f.Where(p.Field(channel.FieldSettings))
}

// WhereHasRequests applies a predicate to check if query has an edge requests.
func (f *ChannelFilter) WhereHasRequests() {
	f.Where(entql.HasEdge("requests"))
}

// WhereHasRequestsWith applies a predicate to check if query has an edge requests with a given conditions (other predicates).
func (f *ChannelFilter) WhereHasRequestsWith(preds ...predicate.Request) {
	f.Where(entql.HasEdgeWith("requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExecutions applies a predicate to check if query has an edge executions.
func (f *ChannelFilter) WhereHasExecutions() {
	f.Where(entql.HasEdge("executions"))
}

// WhereHasExecutionsWith applies a predicate to check if query has an edge executions with a given conditions (other predicates).
func (f *ChannelFilter) WhereHasExecutionsWith(preds ...predicate.RequestExecution) {
	f.Where(entql.HasEdgeWith("executions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (jq *JobQuery) addPredicate(pred func(s *sql.Selector)) {
	jq.predicates = append(jq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the JobQuery builder.
func (jq *JobQuery) Filter() *JobFilter {
	return &JobFilter{config: jq.config, predicateAdder: jq}
}

// addPredicate implements the predicateAdder interface.
func (m *JobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the JobMutation builder.
func (m *JobMutation) Filter() *JobFilter {
	return &JobFilter{config: m.config, predicateAdder: m}
}

// JobFilter provides a generic filtering capability at runtime for JobQuery.
type JobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *JobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *JobFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(job.FieldID))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *JobFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(job.FieldOwnerID))
}

// WhereType applies the entql string predicate on the type field.
func (f *JobFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(job.FieldType))
}

// WhereContext applies the entql string predicate on the context field.
func (f *JobFilter) WhereContext(p entql.StringP) {
	f.Where(p.Field(job.FieldContext))
}

// addPredicate implements the predicateAdder interface.
func (rq *RequestQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RequestQuery builder.
func (rq *RequestQuery) Filter() *RequestFilter {
	return &RequestFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RequestMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RequestMutation builder.
func (m *RequestMutation) Filter() *RequestFilter {
	return &RequestFilter{config: m.config, predicateAdder: m}
}

// RequestFilter provides a generic filtering capability at runtime for RequestQuery.
type RequestFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RequestFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RequestFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(request.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RequestFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(request.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RequestFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(request.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *RequestFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(request.FieldDeletedAt))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *RequestFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(request.FieldUserID))
}

// WhereAPIKeyID applies the entql int predicate on the api_key_id field.
func (f *RequestFilter) WhereAPIKeyID(p entql.IntP) {
	f.Where(p.Field(request.FieldAPIKeyID))
}

// WhereSource applies the entql string predicate on the source field.
func (f *RequestFilter) WhereSource(p entql.StringP) {
	f.Where(p.Field(request.FieldSource))
}

// WhereModelID applies the entql string predicate on the model_id field.
func (f *RequestFilter) WhereModelID(p entql.StringP) {
	f.Where(p.Field(request.FieldModelID))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *RequestFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(request.FieldFormat))
}

// WhereRequestBody applies the entql json.RawMessage predicate on the request_body field.
func (f *RequestFilter) WhereRequestBody(p entql.BytesP) {
	f.Where(p.Field(request.FieldRequestBody))
}

// WhereResponseBody applies the entql json.RawMessage predicate on the response_body field.
func (f *RequestFilter) WhereResponseBody(p entql.BytesP) {
	f.Where(p.Field(request.FieldResponseBody))
}

// WhereResponseChunks applies the entql json.RawMessage predicate on the response_chunks field.
func (f *RequestFilter) WhereResponseChunks(p entql.BytesP) {
	f.Where(p.Field(request.FieldResponseChunks))
}

// WhereChannelID applies the entql int predicate on the channel_id field.
func (f *RequestFilter) WhereChannelID(p entql.IntP) {
	f.Where(p.Field(request.FieldChannelID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RequestFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(request.FieldStatus))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *RequestFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *RequestFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIKey applies a predicate to check if query has an edge api_key.
func (f *RequestFilter) WhereHasAPIKey() {
	f.Where(entql.HasEdge("api_key"))
}

// WhereHasAPIKeyWith applies a predicate to check if query has an edge api_key with a given conditions (other predicates).
func (f *RequestFilter) WhereHasAPIKeyWith(preds ...predicate.APIKey) {
	f.Where(entql.HasEdgeWith("api_key", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExecutions applies a predicate to check if query has an edge executions.
func (f *RequestFilter) WhereHasExecutions() {
	f.Where(entql.HasEdge("executions"))
}

// WhereHasExecutionsWith applies a predicate to check if query has an edge executions with a given conditions (other predicates).
func (f *RequestFilter) WhereHasExecutionsWith(preds ...predicate.RequestExecution) {
	f.Where(entql.HasEdgeWith("executions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChannel applies a predicate to check if query has an edge channel.
func (f *RequestFilter) WhereHasChannel() {
	f.Where(entql.HasEdge("channel"))
}

// WhereHasChannelWith applies a predicate to check if query has an edge channel with a given conditions (other predicates).
func (f *RequestFilter) WhereHasChannelWith(preds ...predicate.Channel) {
	f.Where(entql.HasEdgeWith("channel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (req *RequestExecutionQuery) addPredicate(pred func(s *sql.Selector)) {
	req.predicates = append(req.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RequestExecutionQuery builder.
func (req *RequestExecutionQuery) Filter() *RequestExecutionFilter {
	return &RequestExecutionFilter{config: req.config, predicateAdder: req}
}

// addPredicate implements the predicateAdder interface.
func (m *RequestExecutionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RequestExecutionMutation builder.
func (m *RequestExecutionMutation) Filter() *RequestExecutionFilter {
	return &RequestExecutionFilter{config: m.config, predicateAdder: m}
}

// RequestExecutionFilter provides a generic filtering capability at runtime for RequestExecutionQuery.
type RequestExecutionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RequestExecutionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RequestExecutionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(requestexecution.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RequestExecutionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(requestexecution.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RequestExecutionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(requestexecution.FieldUpdatedAt))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *RequestExecutionFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(requestexecution.FieldUserID))
}

// WhereRequestID applies the entql int predicate on the request_id field.
func (f *RequestExecutionFilter) WhereRequestID(p entql.IntP) {
	f.Where(p.Field(requestexecution.FieldRequestID))
}

// WhereChannelID applies the entql int predicate on the channel_id field.
func (f *RequestExecutionFilter) WhereChannelID(p entql.IntP) {
	f.Where(p.Field(requestexecution.FieldChannelID))
}

// WhereModelID applies the entql string predicate on the model_id field.
func (f *RequestExecutionFilter) WhereModelID(p entql.StringP) {
	f.Where(p.Field(requestexecution.FieldModelID))
}

// WhereFormat applies the entql string predicate on the format field.
func (f *RequestExecutionFilter) WhereFormat(p entql.StringP) {
	f.Where(p.Field(requestexecution.FieldFormat))
}

// WhereRequestBody applies the entql json.RawMessage predicate on the request_body field.
func (f *RequestExecutionFilter) WhereRequestBody(p entql.BytesP) {
	f.Where(p.Field(requestexecution.FieldRequestBody))
}

// WhereResponseBody applies the entql json.RawMessage predicate on the response_body field.
func (f *RequestExecutionFilter) WhereResponseBody(p entql.BytesP) {
	f.Where(p.Field(requestexecution.FieldResponseBody))
}

// WhereResponseChunks applies the entql json.RawMessage predicate on the response_chunks field.
func (f *RequestExecutionFilter) WhereResponseChunks(p entql.BytesP) {
	f.Where(p.Field(requestexecution.FieldResponseChunks))
}

// WhereErrorMessage applies the entql string predicate on the error_message field.
func (f *RequestExecutionFilter) WhereErrorMessage(p entql.StringP) {
	f.Where(p.Field(requestexecution.FieldErrorMessage))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *RequestExecutionFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(requestexecution.FieldStatus))
}

// WhereHasRequest applies a predicate to check if query has an edge request.
func (f *RequestExecutionFilter) WhereHasRequest() {
	f.Where(entql.HasEdge("request"))
}

// WhereHasRequestWith applies a predicate to check if query has an edge request with a given conditions (other predicates).
func (f *RequestExecutionFilter) WhereHasRequestWith(preds ...predicate.Request) {
	f.Where(entql.HasEdgeWith("request", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChannel applies a predicate to check if query has an edge channel.
func (f *RequestExecutionFilter) WhereHasChannel() {
	f.Where(entql.HasEdge("channel"))
}

// WhereHasChannelWith applies a predicate to check if query has an edge channel with a given conditions (other predicates).
func (f *RequestExecutionFilter) WhereHasChannelWith(preds ...predicate.Channel) {
	f.Where(entql.HasEdgeWith("channel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (rq *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RoleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *RoleFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(role.FieldDeletedAt))
}

// WhereCode applies the entql string predicate on the code field.
func (f *RoleFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(role.FieldCode))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *RoleFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(role.FieldScopes))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *RoleFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SystemQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemQuery builder.
func (sq *SystemQuery) Filter() *SystemFilter {
	return &SystemFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemMutation builder.
func (m *SystemMutation) Filter() *SystemFilter {
	return &SystemFilter{config: m.config, predicateAdder: m}
}

// SystemFilter provides a generic filtering capability at runtime for SystemQuery.
type SystemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SystemFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(system.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(system.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SystemFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(system.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *SystemFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(system.FieldDeletedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SystemFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(system.FieldKey))
}

// WhereValue applies the entql string predicate on the value field.
func (f *SystemFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(system.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql int predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.IntP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WherePreferLanguage applies the entql string predicate on the prefer_language field.
func (f *UserFilter) WherePreferLanguage(p entql.StringP) {
	f.Where(p.Field(user.FieldPreferLanguage))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereIsOwner applies the entql bool predicate on the is_owner field.
func (f *UserFilter) WhereIsOwner(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsOwner))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *UserFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(user.FieldScopes))
}

// WhereHasRequests applies a predicate to check if query has an edge requests.
func (f *UserFilter) WhereHasRequests() {
	f.Where(entql.HasEdge("requests"))
}

// WhereHasRequestsWith applies a predicate to check if query has an edge requests with a given conditions (other predicates).
func (f *UserFilter) WhereHasRequestsWith(preds ...predicate.Request) {
	f.Where(entql.HasEdgeWith("requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIKeys applies a predicate to check if query has an edge api_keys.
func (f *UserFilter) WhereHasAPIKeys() {
	f.Where(entql.HasEdge("api_keys"))
}

// WhereHasAPIKeysWith applies a predicate to check if query has an edge api_keys with a given conditions (other predicates).
func (f *UserFilter) WhereHasAPIKeysWith(preds ...predicate.APIKey) {
	f.Where(entql.HasEdgeWith("api_keys", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *UserFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
