// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/looplj/axonhub/internal/ent/channel"
	"github.com/looplj/axonhub/internal/objects"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int `json:"deleted_at,omitempty"`
	// Type holds the value of the "type" field.
	Type channel.Type `json:"type,omitempty"`
	// BaseURL holds the value of the "base_url" field.
	BaseURL string `json:"base_url,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status channel.Status `json:"status,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"-"`
	// SupportedModels holds the value of the "supported_models" field.
	SupportedModels []string `json:"supported_models,omitempty"`
	// DefaultTestModel holds the value of the "default_test_model" field.
	DefaultTestModel string `json:"default_test_model,omitempty"`
	// Settings holds the value of the "settings" field.
	Settings *objects.ChannelSettings `json:"settings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges        ChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Requests holds the value of the requests edge.
	Requests []*Request `json:"requests,omitempty"`
	// Executions holds the value of the executions edge.
	Executions []*RequestExecution `json:"executions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRequests   map[string][]*Request
	namedExecutions map[string][]*RequestExecution
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) RequestsOrErr() ([]*Request, error) {
	if e.loadedTypes[0] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// ExecutionsOrErr returns the Executions value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) ExecutionsOrErr() ([]*RequestExecution, error) {
	if e.loadedTypes[1] {
		return e.Executions, nil
	}
	return nil, &NotLoadedError{edge: "executions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldSupportedModels, channel.FieldSettings:
			values[i] = new([]byte)
		case channel.FieldID, channel.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case channel.FieldType, channel.FieldBaseURL, channel.FieldName, channel.FieldStatus, channel.FieldAPIKey, channel.FieldDefaultTestModel:
			values[i] = new(sql.NullString)
		case channel.FieldCreatedAt, channel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case channel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = int(value.Int64)
			}
		case channel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = channel.Type(value.String)
			}
		case channel.FieldBaseURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_url", values[i])
			} else if value.Valid {
				c.BaseURL = value.String
			}
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case channel.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = channel.Status(value.String)
			}
		case channel.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				c.APIKey = value.String
			}
		case channel.FieldSupportedModels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field supported_models", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.SupportedModels); err != nil {
					return fmt.Errorf("unmarshal field supported_models: %w", err)
				}
			}
		case channel.FieldDefaultTestModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_test_model", values[i])
			} else if value.Valid {
				c.DefaultTestModel = value.String
			}
		case channel.FieldSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Settings); err != nil {
					return fmt.Errorf("unmarshal field settings: %w", err)
				}
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Channel.
// This includes values selected through modifiers, order, etc.
func (c *Channel) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryRequests queries the "requests" edge of the Channel entity.
func (c *Channel) QueryRequests() *RequestQuery {
	return NewChannelClient(c.config).QueryRequests(c)
}

// QueryExecutions queries the "executions" edge of the Channel entity.
func (c *Channel) QueryExecutions() *RequestExecutionQuery {
	return NewChannelClient(c.config).QueryExecutions(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", c.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("base_url=")
	builder.WriteString(c.BaseURL)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("api_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("supported_models=")
	builder.WriteString(fmt.Sprintf("%v", c.SupportedModels))
	builder.WriteString(", ")
	builder.WriteString("default_test_model=")
	builder.WriteString(c.DefaultTestModel)
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", c.Settings))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRequests returns the Requests named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Channel) NamedRequests(name string) ([]*Request, error) {
	if c.Edges.namedRequests == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedRequests[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Channel) appendNamedRequests(name string, edges ...*Request) {
	if c.Edges.namedRequests == nil {
		c.Edges.namedRequests = make(map[string][]*Request)
	}
	if len(edges) == 0 {
		c.Edges.namedRequests[name] = []*Request{}
	} else {
		c.Edges.namedRequests[name] = append(c.Edges.namedRequests[name], edges...)
	}
}

// NamedExecutions returns the Executions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Channel) NamedExecutions(name string) ([]*RequestExecution, error) {
	if c.Edges.namedExecutions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedExecutions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Channel) appendNamedExecutions(name string, edges ...*RequestExecution) {
	if c.Edges.namedExecutions == nil {
		c.Edges.namedExecutions = make(map[string][]*RequestExecution)
	}
	if len(edges) == 0 {
		c.Edges.namedExecutions[name] = []*RequestExecution{}
	} else {
		c.Edges.namedExecutions[name] = append(c.Edges.namedExecutions[name], edges...)
	}
}

// Channels is a parsable slice of Channel.
type Channels []*Channel
