// Code generated by ent, DO NOT EDIT.

package requestexecution

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/looplj/axonhub/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUserID, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestID, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldChannelID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldModelID, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldFormat, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldUserID, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldRequestID, vs...))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldChannelID, v))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldChannelID, v))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldChannelID, vs...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...int) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldChannelID, vs...))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDGT applies the GT predicate on the "model_id" field.
func ModelIDGT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldModelID, v))
}

// ModelIDGTE applies the GTE predicate on the "model_id" field.
func ModelIDGTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldModelID, v))
}

// ModelIDLT applies the LT predicate on the "model_id" field.
func ModelIDLT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldModelID, v))
}

// ModelIDLTE applies the LTE predicate on the "model_id" field.
func ModelIDLTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldModelID, v))
}

// ModelIDContains applies the Contains predicate on the "model_id" field.
func ModelIDContains(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContains(FieldModelID, v))
}

// ModelIDHasPrefix applies the HasPrefix predicate on the "model_id" field.
func ModelIDHasPrefix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasPrefix(FieldModelID, v))
}

// ModelIDHasSuffix applies the HasSuffix predicate on the "model_id" field.
func ModelIDHasSuffix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasSuffix(FieldModelID, v))
}

// ModelIDEqualFold applies the EqualFold predicate on the "model_id" field.
func ModelIDEqualFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEqualFold(FieldModelID, v))
}

// ModelIDContainsFold applies the ContainsFold predicate on the "model_id" field.
func ModelIDContainsFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContainsFold(FieldModelID, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContainsFold(FieldFormat, v))
}

// ResponseBodyIsNil applies the IsNil predicate on the "response_body" field.
func ResponseBodyIsNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIsNull(FieldResponseBody))
}

// ResponseBodyNotNil applies the NotNil predicate on the "response_body" field.
func ResponseBodyNotNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotNull(FieldResponseBody))
}

// ResponseChunksIsNil applies the IsNil predicate on the "response_chunks" field.
func ResponseChunksIsNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIsNull(FieldResponseChunks))
}

// ResponseChunksNotNil applies the NotNil predicate on the "response_chunks" field.
func ResponseChunksNotNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotNull(FieldResponseChunks))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldContainsFold(FieldErrorMessage, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.RequestExecution {
	return predicate.RequestExecution(sql.FieldNotIn(FieldStatus, vs...))
}

// HasRequest applies the HasEdge predicate on the "request" edge.
func HasRequest() predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := newRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Channel) predicate.RequestExecution {
	return predicate.RequestExecution(func(s *sql.Selector) {
		step := newChannelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RequestExecution) predicate.RequestExecution {
	return predicate.RequestExecution(sql.NotPredicates(p))
}
