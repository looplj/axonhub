// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/apikey"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/requestexecution"
	"github.com/looplj/axonhub/internal/ent/user"
	"github.com/looplj/axonhub/internal/objects"
)

// RequestCreate is the builder for creating a Request entity.
type RequestCreate struct {
	config
	mutation *RequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RequestCreate) SetCreatedAt(t time.Time) *RequestCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RequestCreate) SetNillableCreatedAt(t *time.Time) *RequestCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RequestCreate) SetUpdatedAt(t time.Time) *RequestCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RequestCreate) SetNillableUpdatedAt(t *time.Time) *RequestCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RequestCreate) SetDeletedAt(i int) *RequestCreate {
	rc.mutation.SetDeletedAt(i)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RequestCreate) SetNillableDeletedAt(i *int) *RequestCreate {
	if i != nil {
		rc.SetDeletedAt(*i)
	}
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *RequestCreate) SetUserID(i int) *RequestCreate {
	rc.mutation.SetUserID(i)
	return rc
}

// SetAPIKeyID sets the "api_key_id" field.
func (rc *RequestCreate) SetAPIKeyID(i int) *RequestCreate {
	rc.mutation.SetAPIKeyID(i)
	return rc
}

// SetNillableAPIKeyID sets the "api_key_id" field if the given value is not nil.
func (rc *RequestCreate) SetNillableAPIKeyID(i *int) *RequestCreate {
	if i != nil {
		rc.SetAPIKeyID(*i)
	}
	return rc
}

// SetModelID sets the "model_id" field.
func (rc *RequestCreate) SetModelID(s string) *RequestCreate {
	rc.mutation.SetModelID(s)
	return rc
}

// SetRequestBody sets the "request_body" field.
func (rc *RequestCreate) SetRequestBody(orm objects.JSONRawMessage) *RequestCreate {
	rc.mutation.SetRequestBody(orm)
	return rc
}

// SetResponseBody sets the "response_body" field.
func (rc *RequestCreate) SetResponseBody(orm objects.JSONRawMessage) *RequestCreate {
	rc.mutation.SetResponseBody(orm)
	return rc
}

// SetStatus sets the "status" field.
func (rc *RequestCreate) SetStatus(r request.Status) *RequestCreate {
	rc.mutation.SetStatus(r)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *RequestCreate) SetUser(u *User) *RequestCreate {
	return rc.SetUserID(u.ID)
}

// SetAPIKey sets the "api_key" edge to the APIKey entity.
func (rc *RequestCreate) SetAPIKey(a *APIKey) *RequestCreate {
	return rc.SetAPIKeyID(a.ID)
}

// AddExecutionIDs adds the "executions" edge to the RequestExecution entity by IDs.
func (rc *RequestCreate) AddExecutionIDs(ids ...int) *RequestCreate {
	rc.mutation.AddExecutionIDs(ids...)
	return rc
}

// AddExecutions adds the "executions" edges to the RequestExecution entity.
func (rc *RequestCreate) AddExecutions(r ...*RequestExecution) *RequestCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddExecutionIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (rc *RequestCreate) Mutation() *RequestMutation {
	return rc.mutation
}

// Save creates the Request in the database.
func (rc *RequestCreate) Save(ctx context.Context) (*Request, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RequestCreate) SaveX(ctx context.Context) *Request {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RequestCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RequestCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RequestCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if request.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized request.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := request.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if request.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized request.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := request.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		v := request.DefaultDeletedAt
		rc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RequestCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Request.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Request.updated_at"`)}
	}
	if _, ok := rc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Request.deleted_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Request.user_id"`)}
	}
	if _, ok := rc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Request.model_id"`)}
	}
	if _, ok := rc.mutation.RequestBody(); !ok {
		return &ValidationError{Name: "request_body", err: errors.New(`ent: missing required field "Request.request_body"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Request.status"`)}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := request.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Request.status": %w`, err)}
		}
	}
	if len(rc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Request.user"`)}
	}
	return nil
}

func (rc *RequestCreate) sqlSave(ctx context.Context) (*Request, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RequestCreate) createSpec() (*Request, *sqlgraph.CreateSpec) {
	var (
		_node = &Request{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(request.Table, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(request.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(request.FieldDeletedAt, field.TypeInt, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.ModelID(); ok {
		_spec.SetField(request.FieldModelID, field.TypeString, value)
		_node.ModelID = value
	}
	if value, ok := rc.mutation.RequestBody(); ok {
		_spec.SetField(request.FieldRequestBody, field.TypeJSON, value)
		_node.RequestBody = value
	}
	if value, ok := rc.mutation.ResponseBody(); ok {
		_spec.SetField(request.FieldResponseBody, field.TypeJSON, value)
		_node.ResponseBody = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(request.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.UserTable,
			Columns: []string{request.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.APIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.APIKeyTable,
			Columns: []string{request.APIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APIKeyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ExecutionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ExecutionsTable,
			Columns: []string{request.ExecutionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(requestexecution.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Request.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RequestCreate) OnConflict(opts ...sql.ConflictOption) *RequestUpsertOne {
	rc.conflict = opts
	return &RequestUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RequestCreate) OnConflictColumns(columns ...string) *RequestUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RequestUpsertOne{
		create: rc,
	}
}

type (
	// RequestUpsertOne is the builder for "upsert"-ing
	//  one Request node.
	RequestUpsertOne struct {
		create *RequestCreate
	}

	// RequestUpsert is the "OnConflict" setter.
	RequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestUpsert) SetUpdatedAt(v time.Time) *RequestUpsert {
	u.Set(request.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestUpsert) UpdateUpdatedAt() *RequestUpsert {
	u.SetExcluded(request.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequestUpsert) SetDeletedAt(v int) *RequestUpsert {
	u.Set(request.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequestUpsert) UpdateDeletedAt() *RequestUpsert {
	u.SetExcluded(request.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequestUpsert) AddDeletedAt(v int) *RequestUpsert {
	u.Add(request.FieldDeletedAt, v)
	return u
}

// SetResponseBody sets the "response_body" field.
func (u *RequestUpsert) SetResponseBody(v objects.JSONRawMessage) *RequestUpsert {
	u.Set(request.FieldResponseBody, v)
	return u
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestUpsert) UpdateResponseBody() *RequestUpsert {
	u.SetExcluded(request.FieldResponseBody)
	return u
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestUpsert) ClearResponseBody() *RequestUpsert {
	u.SetNull(request.FieldResponseBody)
	return u
}

// SetStatus sets the "status" field.
func (u *RequestUpsert) SetStatus(v request.Status) *RequestUpsert {
	u.Set(request.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestUpsert) UpdateStatus() *RequestUpsert {
	u.SetExcluded(request.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RequestUpsertOne) UpdateNewValues() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(request.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(request.FieldUserID)
		}
		if _, exists := u.create.mutation.APIKeyID(); exists {
			s.SetIgnore(request.FieldAPIKeyID)
		}
		if _, exists := u.create.mutation.ModelID(); exists {
			s.SetIgnore(request.FieldModelID)
		}
		if _, exists := u.create.mutation.RequestBody(); exists {
			s.SetIgnore(request.FieldRequestBody)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RequestUpsertOne) Ignore() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestUpsertOne) DoNothing() *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestCreate.OnConflict
// documentation for more info.
func (u *RequestUpsertOne) Update(set func(*RequestUpsert)) *RequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestUpsertOne) SetUpdatedAt(v time.Time) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateUpdatedAt() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequestUpsertOne) SetDeletedAt(v int) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequestUpsertOne) AddDeletedAt(v int) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateDeletedAt() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *RequestUpsertOne) SetResponseBody(v objects.JSONRawMessage) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateResponseBody() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestUpsertOne) ClearResponseBody() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.ClearResponseBody()
	})
}

// SetStatus sets the "status" field.
func (u *RequestUpsertOne) SetStatus(v request.Status) *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestUpsertOne) UpdateStatus() *RequestUpsertOne {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *RequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RequestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RequestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RequestCreateBulk is the builder for creating many Request entities in bulk.
type RequestCreateBulk struct {
	config
	err      error
	builders []*RequestCreate
	conflict []sql.ConflictOption
}

// Save creates the Request entities in the database.
func (rcb *RequestCreateBulk) Save(ctx context.Context) ([]*Request, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Request, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RequestCreateBulk) SaveX(ctx context.Context) []*Request {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RequestCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RequestCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Request.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RequestUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *RequestUpsertBulk {
	rcb.conflict = opts
	return &RequestUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RequestCreateBulk) OnConflictColumns(columns ...string) *RequestUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RequestUpsertBulk{
		create: rcb,
	}
}

// RequestUpsertBulk is the builder for "upsert"-ing
// a bulk of Request nodes.
type RequestUpsertBulk struct {
	create *RequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RequestUpsertBulk) UpdateNewValues() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(request.FieldCreatedAt)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(request.FieldUserID)
			}
			if _, exists := b.mutation.APIKeyID(); exists {
				s.SetIgnore(request.FieldAPIKeyID)
			}
			if _, exists := b.mutation.ModelID(); exists {
				s.SetIgnore(request.FieldModelID)
			}
			if _, exists := b.mutation.RequestBody(); exists {
				s.SetIgnore(request.FieldRequestBody)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Request.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RequestUpsertBulk) Ignore() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RequestUpsertBulk) DoNothing() *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RequestCreateBulk.OnConflict
// documentation for more info.
func (u *RequestUpsertBulk) Update(set func(*RequestUpsert)) *RequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RequestUpsertBulk) SetUpdatedAt(v time.Time) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateUpdatedAt() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RequestUpsertBulk) SetDeletedAt(v int) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RequestUpsertBulk) AddDeletedAt(v int) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateDeletedAt() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetResponseBody sets the "response_body" field.
func (u *RequestUpsertBulk) SetResponseBody(v objects.JSONRawMessage) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetResponseBody(v)
	})
}

// UpdateResponseBody sets the "response_body" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateResponseBody() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateResponseBody()
	})
}

// ClearResponseBody clears the value of the "response_body" field.
func (u *RequestUpsertBulk) ClearResponseBody() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.ClearResponseBody()
	})
}

// SetStatus sets the "status" field.
func (u *RequestUpsertBulk) SetStatus(v request.Status) *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *RequestUpsertBulk) UpdateStatus() *RequestUpsertBulk {
	return u.Update(func(s *RequestUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *RequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
