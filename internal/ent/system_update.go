// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/looplj/axonhub/internal/ent/predicate"
	"github.com/looplj/axonhub/internal/ent/system"
)

// SystemUpdate is the builder for updating System entities.
type SystemUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemUpdate builder.
func (su *SystemUpdate) Where(ps ...predicate.System) *SystemUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SystemUpdate) SetUpdatedAt(t time.Time) *SystemUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SystemUpdate) SetDeletedAt(i int) *SystemUpdate {
	su.mutation.ResetDeletedAt()
	su.mutation.SetDeletedAt(i)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SystemUpdate) SetNillableDeletedAt(i *int) *SystemUpdate {
	if i != nil {
		su.SetDeletedAt(*i)
	}
	return su
}

// AddDeletedAt adds i to the "deleted_at" field.
func (su *SystemUpdate) AddDeletedAt(i int) *SystemUpdate {
	su.mutation.AddDeletedAt(i)
	return su
}

// SetKey sets the "key" field.
func (su *SystemUpdate) SetKey(s string) *SystemUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (su *SystemUpdate) SetNillableKey(s *string) *SystemUpdate {
	if s != nil {
		su.SetKey(*s)
	}
	return su
}

// SetValue sets the "value" field.
func (su *SystemUpdate) SetValue(s string) *SystemUpdate {
	su.mutation.SetValue(s)
	return su
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (su *SystemUpdate) SetNillableValue(s *string) *SystemUpdate {
	if s != nil {
		su.SetValue(*s)
	}
	return su
}

// Mutation returns the SystemMutation object of the builder.
func (su *SystemUpdate) Mutation() *SystemMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SystemUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SystemUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SystemUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SystemUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SystemUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if system.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized system.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := system.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SystemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(system.Table, system.Columns, sqlgraph.NewFieldSpec(system.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(system.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(system.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDeletedAt(); ok {
		_spec.AddField(system.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.SetField(system.FieldKey, field.TypeString, value)
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.SetField(system.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SystemUpdateOne is the builder for updating a single System entity.
type SystemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SystemUpdateOne) SetUpdatedAt(t time.Time) *SystemUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SystemUpdateOne) SetDeletedAt(i int) *SystemUpdateOne {
	suo.mutation.ResetDeletedAt()
	suo.mutation.SetDeletedAt(i)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableDeletedAt(i *int) *SystemUpdateOne {
	if i != nil {
		suo.SetDeletedAt(*i)
	}
	return suo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (suo *SystemUpdateOne) AddDeletedAt(i int) *SystemUpdateOne {
	suo.mutation.AddDeletedAt(i)
	return suo
}

// SetKey sets the "key" field.
func (suo *SystemUpdateOne) SetKey(s string) *SystemUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableKey(s *string) *SystemUpdateOne {
	if s != nil {
		suo.SetKey(*s)
	}
	return suo
}

// SetValue sets the "value" field.
func (suo *SystemUpdateOne) SetValue(s string) *SystemUpdateOne {
	suo.mutation.SetValue(s)
	return suo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (suo *SystemUpdateOne) SetNillableValue(s *string) *SystemUpdateOne {
	if s != nil {
		suo.SetValue(*s)
	}
	return suo
}

// Mutation returns the SystemMutation object of the builder.
func (suo *SystemUpdateOne) Mutation() *SystemMutation {
	return suo.mutation
}

// Where appends a list predicates to the SystemUpdate builder.
func (suo *SystemUpdateOne) Where(ps ...predicate.System) *SystemUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SystemUpdateOne) Select(field string, fields ...string) *SystemUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated System entity.
func (suo *SystemUpdateOne) Save(ctx context.Context) (*System, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SystemUpdateOne) SaveX(ctx context.Context) *System {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SystemUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SystemUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SystemUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if system.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized system.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := system.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SystemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SystemUpdateOne) sqlSave(ctx context.Context) (_node *System, err error) {
	_spec := sqlgraph.NewUpdateSpec(system.Table, system.Columns, sqlgraph.NewFieldSpec(system.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "System.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, system.FieldID)
		for _, f := range fields {
			if !system.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != system.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(system.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(system.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(system.FieldDeletedAt, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.SetField(system.FieldKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.SetField(system.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &System{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
