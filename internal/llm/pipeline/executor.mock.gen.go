// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pipeline

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/looplj/axonhub/internal/pkg/httpclient"
	"github.com/looplj/axonhub/internal/pkg/streams"
)

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockExecutor
func (_mock *MockExecutor) Do(ctx context.Context, request *httpclient.Request) (*httpclient.Response, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *httpclient.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *httpclient.Request) (*httpclient.Response, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *httpclient.Request) *httpclient.Response); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpclient.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *httpclient.Request) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExecutor_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockExecutor_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - request *httpclient.Request
func (_e *MockExecutor_Expecter) Do(ctx interface{}, request interface{}) *MockExecutor_Do_Call {
	return &MockExecutor_Do_Call{Call: _e.mock.On("Do", ctx, request)}
}

func (_c *MockExecutor_Do_Call) Run(run func(ctx context.Context, request *httpclient.Request)) *MockExecutor_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *httpclient.Request
		if args[1] != nil {
			arg1 = args[1].(*httpclient.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_Do_Call) Return(response *httpclient.Response, err error) *MockExecutor_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockExecutor_Do_Call) RunAndReturn(run func(ctx context.Context, request *httpclient.Request) (*httpclient.Response, error)) *MockExecutor_Do_Call {
	_c.Call.Return(run)
	return _c
}

// DoStream provides a mock function for the type MockExecutor
func (_mock *MockExecutor) DoStream(ctx context.Context, request *httpclient.Request) (streams.Stream[*httpclient.StreamEvent], error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DoStream")
	}

	var r0 streams.Stream[*httpclient.StreamEvent]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *httpclient.Request) (streams.Stream[*httpclient.StreamEvent], error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *httpclient.Request) streams.Stream[*httpclient.StreamEvent]); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(streams.Stream[*httpclient.StreamEvent])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *httpclient.Request) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExecutor_DoStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoStream'
type MockExecutor_DoStream_Call struct {
	*mock.Call
}

// DoStream is a helper method to define mock.On call
//   - ctx context.Context
//   - request *httpclient.Request
func (_e *MockExecutor_Expecter) DoStream(ctx interface{}, request interface{}) *MockExecutor_DoStream_Call {
	return &MockExecutor_DoStream_Call{Call: _e.mock.On("DoStream", ctx, request)}
}

func (_c *MockExecutor_DoStream_Call) Run(run func(ctx context.Context, request *httpclient.Request)) *MockExecutor_DoStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *httpclient.Request
		if args[1] != nil {
			arg1 = args[1].(*httpclient.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_DoStream_Call) Return(stream streams.Stream[*httpclient.StreamEvent], err error) *MockExecutor_DoStream_Call {
	_c.Call.Return(stream, err)
	return _c
}

func (_c *MockExecutor_DoStream_Call) RunAndReturn(run func(ctx context.Context, request *httpclient.Request) (streams.Stream[*httpclient.StreamEvent], error)) *MockExecutor_DoStream_Call {
	_c.Call.Return(run)
	return _c
}
