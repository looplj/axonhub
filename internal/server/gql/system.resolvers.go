package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76-dev

import (
	"context"
	"fmt"

	"github.com/looplj/axonhub/internal/server/biz"
)

// InitializeSystem is the resolver for the initializeSystem field.
func (r *mutationResolver) InitializeSystem(ctx context.Context, input InitializeSystemInput) (*InitializeSystemPayload, error) {
	// Check if system is already initialized
	isInitialized, err := r.systemService.IsInitialized(ctx)
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to check initialization status: %v", err),
		}, nil
	}

	if isInitialized {
		return &InitializeSystemPayload{
			Success: false,
			Message: "System is already initialized",
		}, nil
	}

	err = r.systemService.Initialize(ctx, &biz.InitializeSystemArgs{
		OwnerEmail:     input.OwnerEmail,
		OwnerPassword:  input.OwnerPassword,
		OwnerFirstName: input.OwnerFirstName,
		OwnerLastName:  input.OwnerLastName,
		BrandName:      input.BrandName,
	})
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to initialize system: %v", err),
		}, nil
	}

	// Generate JWT token for the owner
	token, err := r.SignIn(ctx, SignInInput{
		Email:    input.OwnerEmail,
		Password: input.OwnerPassword,
	})
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to generate token: %v", err),
		}, nil
	}

	return &InitializeSystemPayload{
		Success: true,
		Message: "System initialized successfully",
		User:    token.User,
		Token:   &token.Token,
	}, nil
}

// UpdateSystemSettings is the resolver for the updateSystemSettings field.
func (r *mutationResolver) UpdateSystemSettings(ctx context.Context, input UpdateSystemSettingsInput) (bool, error) {
	if input.StoreChunks != nil {
		err := r.systemService.SetStoreChunks(ctx, *input.StoreChunks)
		if err != nil {
			return false, fmt.Errorf("failed to update store chunks setting: %w", err)
		}
	}

	if input.BrandName != nil {
		err := r.systemService.SetBrandName(ctx, *input.BrandName)
		if err != nil {
			return false, fmt.Errorf("failed to update brand name setting: %w", err)
		}
	}

	return true, nil
}

// SystemStatus is the resolver for the systemStatus field.
func (r *queryResolver) SystemStatus(ctx context.Context) (*SystemStatus, error) {
	isInitialized, err := r.systemService.IsInitialized(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to check initialization status: %w", err)
	}

	return &SystemStatus{
		IsInitialized: isInitialized,
	}, nil
}

// SystemSettings is the resolver for the systemSettings field.
func (r *queryResolver) SystemSettings(ctx context.Context) (*SystemSettings, error) {
	storeChunks, err := r.systemService.StoreChunks(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get store chunks setting: %w", err)
	}

	brandName, err := r.systemService.BrandName(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get brand name setting: %w", err)
	}

	return &SystemSettings{
		StoreChunks: storeChunks,
		BrandName:   &brandName,
	}, nil
}
