package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78-dev

import (
	"context"
	"fmt"

	"entgo.io/ent/privacy"
	"github.com/looplj/axonhub/internal/server/biz"
)

// UpdateBrandSettings is the resolver for the updateBrandSettings field.
func (r *mutationResolver) UpdateBrandSettings(ctx context.Context, input UpdateBrandSettingsInput) (bool, error) {
	if input.BrandName != nil {
		err := r.systemService.SetBrandName(ctx, *input.BrandName)
		if err != nil {
			return false, fmt.Errorf("failed to update brand name setting: %w", err)
		}
	}

	if input.BrandLogo != nil {
		err := r.systemService.SetBrandLogo(ctx, *input.BrandLogo)
		if err != nil {
			return false, fmt.Errorf("failed to update brand logo setting: %w", err)
		}
	}

	return true, nil
}

// UpdateStoragePolicy is the resolver for the updateStoragePolicy field.
func (r *mutationResolver) UpdateStoragePolicy(ctx context.Context, input biz.StoragePolicy) (bool, error) {
	err := r.systemService.SetStoragePolicy(ctx, &input)
	if err != nil {
		return false, fmt.Errorf("failed to update storage policy: %w", err)
	}

	return true, nil
}

// SystemStatus is the resolver for the systemStatus field.
func (r *queryResolver) SystemStatus(ctx context.Context) (*SystemStatus, error) {
	isInitialized, err := r.systemService.IsInitialized(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to check initialization status: %w", err)
	}

	return &SystemStatus{
		IsInitialized: isInitialized,
	}, nil
}

// BrandSettings is the resolver for the brandSettings field.
func (r *queryResolver) BrandSettings(ctx context.Context) (*BrandSettings, error) {
	ctx = privacy.DecisionContext(ctx, privacy.Allow)

	brandName, err := r.systemService.BrandName(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get brand name: %w", err)
	}

	brandLogo, err := r.systemService.BrandLogo(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get brand logo: %w", err)
	}

	return &BrandSettings{
		BrandName: &brandName,
		BrandLogo: &brandLogo,
	}, nil
}

// StoragePolicy is the resolver for the storagePolicy field.
func (r *queryResolver) StoragePolicy(ctx context.Context) (*biz.StoragePolicy, error) {
	return r.systemService.StoragePolicy(ctx)
}
