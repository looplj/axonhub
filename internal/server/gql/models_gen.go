// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"github.com/looplj/axonhub/internal/ent"
	"github.com/looplj/axonhub/internal/objects"
)

type DailyRequestStats struct {
	Date         string `json:"date"`
	Count        int    `json:"count"`
	SuccessCount int    `json:"successCount"`
	FailedCount  int    `json:"failedCount"`
}

type DashboardStats struct {
	TotalUsers          int      `json:"totalUsers"`
	TotalChannels       int      `json:"totalChannels"`
	TotalRequests       int      `json:"totalRequests"`
	TotalAPIKeys        int      `json:"totalAPIKeys"`
	RequestsToday       int      `json:"requestsToday"`
	RequestsThisWeek    int      `json:"requestsThisWeek"`
	RequestsThisMonth   int      `json:"requestsThisMonth"`
	SuccessfulRequests  int      `json:"successfulRequests"`
	FailedRequests      int      `json:"failedRequests"`
	AverageResponseTime *float64 `json:"averageResponseTime,omitempty"`
}

type HourlyRequestStats struct {
	Hour  int `json:"hour"`
	Count int `json:"count"`
}

type InitializeSystemInput struct {
	OwnerEmail     string `json:"ownerEmail"`
	OwnerPassword  string `json:"ownerPassword"`
	OwnerFirstName string `json:"ownerFirstName"`
	OwnerLastName  string `json:"ownerLastName"`
	BrandName      string `json:"brandName"`
}

type InitializeSystemPayload struct {
	Success bool      `json:"success"`
	Message string    `json:"message"`
	User    *ent.User `json:"user,omitempty"`
	Token   *string   `json:"token,omitempty"`
}

type RequestsByChannel struct {
	ChannelName string `json:"channelName"`
	ChannelType string `json:"channelType"`
	Count       int    `json:"count"`
}

type RequestsByModel struct {
	ModelID string `json:"modelId"`
	Count   int    `json:"count"`
}

type RequestsByStatus struct {
	Status string `json:"status"`
	Count  int    `json:"count"`
}

type RoleInfo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type ScopeInfo struct {
	Scope       string `json:"scope"`
	Description string `json:"description"`
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInPayload struct {
	User  *ent.User `json:"user"`
	Token string    `json:"token"`
}

type SystemSettings struct {
	StoreChunks bool    `json:"storeChunks"`
	BrandName   *string `json:"brandName,omitempty"`
	BrandLogo   *string `json:"brandLogo,omitempty"`
}

type SystemStatus struct {
	IsInitialized bool `json:"isInitialized"`
}

type TopUsers struct {
	UserID       objects.GUID `json:"userId"`
	UserName     string       `json:"userName"`
	UserEmail    string       `json:"userEmail"`
	RequestCount int          `json:"requestCount"`
}

type UpdateMeInput struct {
	Email          *string `json:"email,omitempty"`
	FirstName      *string `json:"firstName,omitempty"`
	LastName       *string `json:"lastName,omitempty"`
	PreferLanguage *string `json:"preferLanguage,omitempty"`
	Avatar         *string `json:"avatar,omitempty"`
}

type UpdateSystemSettingsInput struct {
	StoreChunks *bool   `json:"storeChunks,omitempty"`
	BrandName   *string `json:"brandName,omitempty"`
	BrandLogo   *string `json:"brandLogo,omitempty"`
}

type UserInfo struct {
	Email          string      `json:"email"`
	FirstName      string      `json:"firstName"`
	LastName       string      `json:"lastName"`
	IsOwner        bool        `json:"isOwner"`
	PreferLanguage string      `json:"preferLanguage"`
	Avatar         *string     `json:"avatar,omitempty"`
	Scopes         []string    `json:"scopes"`
	Roles          []*RoleInfo `json:"roles"`
}
