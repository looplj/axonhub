package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76-dev

import (
	"context"
	"fmt"
	"time"

	"github.com/samber/lo"

	"github.com/looplj/axonhub/internal/ent"
	"github.com/looplj/axonhub/internal/ent/request"
	"github.com/looplj/axonhub/internal/ent/requestexecution"
	"github.com/looplj/axonhub/internal/ent/user"
	"github.com/looplj/axonhub/internal/objects"
)

// DashboardStats is the resolver for the dashboardStats field.
func (r *queryResolver) DashboardStats(ctx context.Context) (*DashboardStats, error) {
	now := time.Now()
	today := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	weekAgo := today.AddDate(0, 0, -7)
	monthAgo := today.AddDate(0, -1, 0)

	// Get total counts
	totalUsers, err := r.client.User.Query().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count users: %w", err)
	}

	totalChannels, err := r.client.Channel.Query().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count channels: %w", err)
	}

	totalRequests, err := r.client.Request.Query().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count requests: %w", err)
	}

	totalAPIKeys, err := r.client.APIKey.Query().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count API keys: %w", err)
	}

	// Get time-based counts
	requestsToday, err := r.client.Request.Query().
		Where(request.CreatedAtGTE(today)).
		Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count today's requests: %w", err)
	}

	requestsThisWeek, err := r.client.Request.Query().
		Where(request.CreatedAtGTE(weekAgo)).
		Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count this week's requests: %w", err)
	}

	requestsThisMonth, err := r.client.Request.Query().
		Where(request.CreatedAtGTE(monthAgo)).
		Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count this month's requests: %w", err)
	}

	// Get status-based counts
	successfulRequests, err := r.client.Request.Query().
		Where(request.StatusEQ(request.StatusCompleted)).
		Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count successful requests: %w", err)
	}

	failedRequests, err := r.client.Request.Query().
		Where(request.StatusEQ(request.StatusFailed)).
		Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count failed requests: %w", err)
	}

	return &DashboardStats{
		TotalUsers:          totalUsers,
		TotalChannels:       totalChannels,
		TotalRequests:       totalRequests,
		TotalAPIKeys:        totalAPIKeys,
		RequestsToday:       requestsToday,
		RequestsThisWeek:    requestsThisWeek,
		RequestsThisMonth:   requestsThisMonth,
		SuccessfulRequests:  successfulRequests,
		FailedRequests:      failedRequests,
		AverageResponseTime: nil, // TODO: Calculate from request execution data
	}, nil
}

// RequestsByStatus is the resolver for the requestsByStatus field.
func (r *queryResolver) RequestsByStatus(ctx context.Context) ([]*RequestsByStatus, error) {
	type statusCount struct {
		Status string `json:"status"`
		Count  int    `json:"count"`
	}

	var results []statusCount

	err := r.client.Request.Query().
		GroupBy(request.FieldStatus).
		Aggregate(ent.Count()).
		Scan(ctx, &results)
	if err != nil {
		return nil, fmt.Errorf("failed to get requests by status: %w", err)
	}

	var response []*RequestsByStatus
	for _, result := range results {
		response = append(response, &RequestsByStatus{
			Status: result.Status,
			Count:  result.Count,
		})
	}

	return response, nil
}

// RequestsByChannel is the resolver for the requestsByChannel field.
func (r *queryResolver) RequestsByChannel(ctx context.Context) ([]*RequestsByChannel, error) {
	executions, err := r.client.RequestExecution.Query().
		WithRequest(func(q *ent.RequestQuery) {
			q.WithAPIKey(func(aq *ent.APIKeyQuery) {
				aq.WithUser()
			})
		}).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get request executions: %w", err)
	}

	// Get channel info
	channels, err := r.client.Channel.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get channels: %w", err)
	}

	channelMap := make(map[int]*ent.Channel)
	for _, ch := range channels {
		channelMap[ch.ID] = ch
	}

	// Count by channel
	channelCounts := make(map[int]int)
	for _, exec := range executions {
		channelCounts[exec.ChannelID]++
	}

	var response []*RequestsByChannel

	for channelID, count := range channelCounts {
		if ch, exists := channelMap[channelID]; exists {
			response = append(response, &RequestsByChannel{
				ChannelName: ch.Name,
				ChannelType: string(ch.Type),
				Count:       count,
			})
		}
	}

	return response, nil
}

// RequestsByModel is the resolver for the requestsByModel field.
func (r *queryResolver) RequestsByModel(ctx context.Context) ([]*RequestsByModel, error) {
	type modelCount struct {
		ModelID string `json:"model_id"`
		Count   int    `json:"count"`
	}

	var results []modelCount

	err := r.client.RequestExecution.Query().
		GroupBy(requestexecution.FieldModelID).
		Aggregate(ent.Count()).
		Scan(ctx, &results)
	if err != nil {
		return nil, fmt.Errorf("failed to get requests by model: %w", err)
	}

	var response []*RequestsByModel
	for _, result := range results {
		response = append(response, &RequestsByModel{
			ModelID: result.ModelID,
			Count:   result.Count,
		})
	}

	return response, nil
}

// DailyRequestStats is the resolver for the dailyRequestStats field.
func (r *queryResolver) DailyRequestStats(ctx context.Context, days *int) ([]*DailyRequestStats, error) {
	daysCount := 30
	if days != nil {
		daysCount = *days
	}

	now := time.Now()
	startDate := now.AddDate(0, 0, -daysCount)

	requests, err := r.client.Request.Query().
		Where(request.CreatedAtGTE(startDate)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get daily request stats: %w", err)
	}

	// Group by date
	dailyStats := make(map[string]*DailyRequestStats)

	for i := range daysCount {
		date := startDate.AddDate(0, 0, i)
		dateStr := date.Format("2006-01-02")
		dailyStats[dateStr] = &DailyRequestStats{
			Date:         dateStr,
			Count:        0,
			SuccessCount: 0,
			FailedCount:  0,
		}
	}

	for _, req := range requests {
		dateStr := req.CreatedAt.Format("2006-01-02")
		if stats, exists := dailyStats[dateStr]; exists {
			stats.Count++
			//nolint:exhaustive // Checkd.
			switch req.Status {
			case request.StatusCompleted:
				stats.SuccessCount++
			case request.StatusFailed:
				stats.FailedCount++
			}
		}
	}

	var response []*DailyRequestStats

	for i := range daysCount {
		date := startDate.AddDate(0, 0, i)

		dateStr := date.Format("2006-01-02")
		if stats, exists := dailyStats[dateStr]; exists {
			response = append(response, stats)
		}
	}

	return response, nil
}

// HourlyRequestStats is the resolver for the hourlyRequestStats field.
func (r *queryResolver) HourlyRequestStats(ctx context.Context, date *string) ([]*HourlyRequestStats, error) {
	targetDate := time.Now()

	if date != nil {
		var err error

		targetDate, err = time.Parse("2006-01-02", *date)
		if err != nil {
			return nil, fmt.Errorf("invalid date format: %w", err)
		}
	}

	startOfDay := time.Date(
		targetDate.Year(),
		targetDate.Month(),
		targetDate.Day(),
		0,
		0,
		0,
		0,
		targetDate.Location(),
	)
	endOfDay := startOfDay.Add(24 * time.Hour)

	requests, err := r.client.Request.Query().
		Where(
			request.CreatedAtGTE(startOfDay),
			request.CreatedAtLT(endOfDay),
		).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get hourly request stats: %w", err)
	}

	// Initialize hourly stats
	hourlyStats := make(map[int]int)
	for i := range 24 {
		hourlyStats[i] = 0
	}

	// Count requests by hour
	for _, req := range requests {
		hour := req.CreatedAt.Hour()
		hourlyStats[hour]++
	}

	var response []*HourlyRequestStats
	for hour := range 24 {
		response = append(response, &HourlyRequestStats{
			Hour:  hour,
			Count: hourlyStats[hour],
		})
	}

	return response, nil
}

// TopUsers is the resolver for the topUsers field.
func (r *queryResolver) TopUsers(ctx context.Context, limit *int) ([]*TopUsers, error) {
	limitCount := 10
	if limit != nil {
		limitCount = *limit
	}

	type userRequestCount struct {
		UserID       int `json:"user_id"`
		RequestCount int `json:"request_count"`
	}

	var results []userRequestCount

	err := r.client.Request.Query().
		GroupBy(request.FieldUserID).
		Aggregate(ent.As(ent.Count(), "request_count")).
		Scan(ctx, &results)
	if err != nil {
		return nil, fmt.Errorf("failed to get top users: %w", err)
	}

	// Get user details
	users, err := r.client.User.Query().
		Where(user.IDIn(lo.Map(results, func(item userRequestCount, _ int) int {
			return item.UserID
		})...)).
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get users: %w", err)
	}

	userMap := lo.SliceToMap(users, func(u *ent.User) (int, *ent.User) {
		return u.ID, u
	})

	// Combine data and sort by request count
	var response []*TopUsers

	for _, result := range results {
		if user, exists := userMap[result.UserID]; exists {
			fullName := user.FirstName
			if user.LastName != "" {
				fullName = fullName + " " + user.LastName
			}

			response = append(response, &TopUsers{
				UserID: objects.GUID{
					Type: "User",
					ID:   result.UserID,
				},
				UserName:     fullName,
				UserEmail:    user.Email,
				RequestCount: result.RequestCount,
			})
		}
	}

	// Sort by request count (descending) and limit
	if len(response) > limitCount {
		response = response[:limitCount]
	}

	return response, nil
}
