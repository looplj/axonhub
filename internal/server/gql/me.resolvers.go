package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76-dev

import (
	"context"
	"fmt"

	"github.com/looplj/axonhub/internal/contexts"
	"github.com/looplj/axonhub/internal/ent"
)

// UpdateMe is the resolver for the updateMe field.
func (r *mutationResolver) UpdateMe(ctx context.Context, input UpdateMeInput) (*ent.User, error) {
	// Get current user from context
	user, ok := contexts.GetUser(ctx)
	if !ok || user == nil {
		return nil, fmt.Errorf("user not found in context")
	}

	// Update user fields
	mut := r.client.User.UpdateOneID(user.ID)

	if input.Email != nil {
		mut.SetEmail(*input.Email)
	}

	if input.FirstName != nil {
		mut.SetFirstName(*input.FirstName)
	}

	if input.LastName != nil {
		mut.SetLastName(*input.LastName)
	}

	if input.PreferLanguage != nil {
		mut.SetPreferLanguage(*input.PreferLanguage)
	}

	if input.Avatar != nil {
		mut.SetAvatar(*input.Avatar)
	}

	return mut.Save(ctx)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*UserInfo, error) {
	// Get current user from context
	user, ok := contexts.GetUser(ctx)
	if !ok || user == nil {
		return nil, fmt.Errorf("user not found in context")
	}

	roles, err := user.QueryRoles().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to load user roles: %w", err)
	}

	// Convert ent.Role to RoleInfo
	userRoles := make([]*RoleInfo, len(roles))
	for i, role := range roles {
		userRoles[i] = &RoleInfo{
			ID:   fmt.Sprintf("%d", role.ID),
			Name: role.Name,
		}
	}

	// Calculate all scopes (user scopes + role scopes)
	allScopes := make(map[string]bool)

	// Add user's direct scopes
	for _, scope := range user.Scopes {
		allScopes[scope] = true
	}

	// Add scopes from all roles
	for _, role := range roles {
		for _, scope := range role.Scopes {
			allScopes[scope] = true
		}
	}

	// Convert map to slice
	scopesList := make([]string, 0, len(allScopes))
	for scope := range allScopes {
		scopesList = append(scopesList, scope)
	}

	return &UserInfo{
		Email:          user.Email,
		FirstName:      user.FirstName,
		LastName:       user.LastName,
		IsOwner:        user.IsOwner,
		PreferLanguage: user.PreferLanguage,
		Avatar:         &user.Avatar,
		Scopes:         scopesList,
		Roles:          userRoles,
	}, nil
}
