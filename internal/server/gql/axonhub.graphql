type ModelMapping {
  from: String!
  to: String!
}

type ChannelSettings {
  modelMappings: [ModelMapping!]
}

input ModelMappingInput {
  from: String!
  to: String!
}

input ChannelSettingsInput {
  modelMappings: [ModelMappingInput!]
}

type ChannelCredentials {
  apiKey: String
  aws: AwsCredentials
  gcp: GcpCredentials
}

type GcpCredentials {
  region: String!
  jsonData: String!
}

type AwsCredentials {
  accessKeyID: String!
  secretAccessKey: String!
  region: String!
}

input ChannelCredentialsInput {
  apiKey: String
  aws: AwsCredentialsInput
  gcp: GcpCredentialsInput
}

input AwsCredentialsInput {
  accessKeyID: String!
  secretAccessKey: String!
  region: String!
}

input GcpCredentialsInput {
  region: String!
  jsonData: String!
}

scalar JSONRawMessage
scalar JSONRawMessageInput

input SignInInput {
  email: String!
  password: String!
}

type SignInPayload {
  user: User!
  token: String!
}


type UserInfo {
  email: String!
  firstName: String!
  lastName: String!
  isOwner: Boolean!
  preferLanguage: String!
  avatar: String
  scopes: [String!]!
  roles: [RoleInfo!]!
}

type RoleInfo {
  id: String!
  name: String!
}


type Mutation {
  createChannel(input: CreateChannelInput!): Channel!
  updateChannel(id: ID!, input: UpdateChannelInput!): Channel!
  updateChannelStatus(id: ID!, status: ChannelStatus!): Channel!

  createAPIKey(input: CreateAPIKeyInput!): APIKey!
  updateAPIKeyStatus(id: ID!, status: APIKeyStatus!): APIKey!

  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  updateUserStatus(id: ID!, status: UserStatus!): User!

  createRole(input: CreateRoleInput!): Role!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!

  signIn(input: SignInInput!): SignInPayload!
}
