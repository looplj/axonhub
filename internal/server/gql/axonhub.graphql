type ModelMapping {
  from: String!
  to: String!
}

type ChannelSettings {
  modelMappings: [ModelMapping!]
}

input ModelMappingInput {
  from: String!
  to: String!
}

input ChannelSettingsInput {
  modelMappings: [ModelMappingInput!]
}

type ChannelCredentials {
  apiKey: String
  aws: AWSCredential
  gcp: GCPCredential
}

type GCPCredential {
  region: String!
  projectID: String!
  jsonData: String!
}

type AWSCredential {
  accessKeyID: String!
  secretAccessKey: String!
  region: String!
}

input ChannelCredentialsInput {
  apiKey: String
  aws: AWSCredentialInput
  gcp: GCPCredentialInput
}

input AWSCredentialInput {
  accessKeyID: String!
  secretAccessKey: String!
  region: String!
}

input GCPCredentialInput {
  region: String!
  projectID: String!
  jsonData: String!
}

scalar JSONRawMessage
scalar JSONRawMessageInput

input SignInInput {
  email: String!
  password: String!
}

type SignInPayload {
  user: User!
  token: String!
}

type UserInfo {
  email: String!
  firstName: String!
  lastName: String!
  isOwner: Boolean!
  preferLanguage: String!
  avatar: String
  scopes: [String!]!
  roles: [RoleInfo!]!
}

type RoleInfo {
  code: String!
  name: String!
}

input TestChannelInput {
  channelID: ID!
  modelID: String
}

type TestChannelPayload {
  latency: Float!
  success: Boolean!
  message: String
  error: String
}

input BulkImportChannelItem {
  type: String!
  name: String!
  baseURL: String
  apiKey: String
  supportedModels: [String!]!
  defaultTestModel: String!
}

input BulkImportChannelsInput {
  channels: [BulkImportChannelItem!]!
}

type BulkImportChannelsResult {
  success: Boolean!
  created: Int!
  failed: Int!
  errors: [String!]
  channels: [Channel!]!
}

input ChannelOrderingItem {
  id: ID!
  orderingWeight: Int!
}

input BulkUpdateChannelOrderingInput {
  channels: [ChannelOrderingItem!]!
}

type BulkUpdateChannelOrderingResult {
  success: Boolean!
  updated: Int!
  channels: [Channel!]!
}

input UpdateAPIKeyProfilesInput {
  activeProfile: String!
  profiles: [APIKeyProfileInput!]
}

input APIKeyProfileInput {
  name: String!
  modelMappings: [ModelMappingInput!]
}

type APIKeyProfiles {
  activeProfile: String!
  profiles: [APIKeyProfile!]
}

type APIKeyProfile {
  name: String!
  modelMappings: [ModelMapping!]
}



type Mutation {
  createChannel(input: CreateChannelInput!): Channel!
  updateChannel(id: ID!, input: UpdateChannelInput!): Channel!
  updateChannelStatus(id: ID!, status: ChannelStatus!): Channel!
  testChannel(input: TestChannelInput!): TestChannelPayload!
  bulkImportChannels(input: BulkImportChannelsInput!): BulkImportChannelsResult!
  bulkUpdateChannelOrdering(input: BulkUpdateChannelOrderingInput!): BulkUpdateChannelOrderingResult!

  createAPIKey(input: CreateAPIKeyInput!): APIKey!
  updateAPIKey(id: ID!, input: UpdateAPIKeyInput!): APIKey!
  updateAPIKeyStatus(id: ID!, status: APIKeyStatus!): APIKey!
  updateAPIKeyProfiles(id: ID!, input: UpdateAPIKeyProfilesInput!): APIKey!

  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  updateUserStatus(id: ID!, status: UserStatus!): User!

  createRole(input: CreateRoleInput!): Role!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!
}
