package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76-dev

import (
	"context"
	"fmt"

	"github.com/looplj/axonhub/internal/contexts"
	"github.com/looplj/axonhub/internal/ent"
	"github.com/looplj/axonhub/internal/objects"
	"github.com/looplj/axonhub/internal/server/biz"
)

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, input ent.CreateChannelInput) (*ent.Channel, error) {
	channel, err := r.client.Channel.Create().
		SetType(input.Type).
		SetBaseURL(input.BaseURL).
		SetName(input.Name).
		SetAPIKey(input.APIKey).
		SetSupportedModels(input.SupportedModels).
		SetDefaultTestModel(input.DefaultTestModel).
		SetSettings(input.Settings).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create channel: %w", err)
	}
	return channel, nil
}

// UpdateChannel is the resolver for the updateChannel field.
func (r *mutationResolver) UpdateChannel(ctx context.Context, id objects.GUID, input ent.UpdateChannelInput) (*ent.Channel, error) {
	mut := r.client.Channel.UpdateOneID(id.ID).
		SetNillableBaseURL(input.BaseURL).
		SetNillableName(input.Name).
		SetNillableAPIKey(input.APIKey).
		SetNillableDefaultTestModel(input.DefaultTestModel)

	if input.SupportedModels != nil {
		mut.SetSupportedModels(input.SupportedModels)
	}
	if input.Settings != nil {
		mut.SetSettings(input.Settings)
	}
	channel, err := mut.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update channel: %w", err)
	}
	return channel, nil
}

// CreateAPIKey is the resolver for the createAPIKey field.
func (r *mutationResolver) CreateAPIKey(ctx context.Context, input ent.CreateAPIKeyInput) (*ent.APIKey, error) {
	apiKey, err := r.client.APIKey.Create().
		SetName(input.Name).
		SetKey(input.Key).
		SetUserID(input.UserID).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create API key: %w", err)
	}
	return apiKey, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	// Hash the password using our auth service
	hashedPassword, err := biz.HashPassword(input.Password)
	if err != nil {
		return nil, err
	}

	mut := r.client.User.Create().
		SetNillableFirstName(input.FirstName).
		SetNillableLastName(input.LastName).
		SetEmail(input.Email).
		SetPassword(hashedPassword).
		SetScopes(input.Scopes)

	if input.RoleIDs != nil {
		mut.AddRoleIDs(input.RoleIDs...)
	}

	user, err := mut.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id objects.GUID, input ent.UpdateUserInput) (*ent.User, error) {
	mut := r.client.User.UpdateOneID(id.ID).
		SetNillableEmail(input.Email).
		SetNillableFirstName(input.FirstName).
		SetNillableLastName(input.LastName).
		SetNillableIsOwner(input.IsOwner)

	if input.Password != nil {
		hashedPassword, err := biz.HashPassword(*input.Password)
		if err != nil {
			return nil, err
		}
		mut.SetPassword(hashedPassword)
	}

	if input.Scopes != nil {
		mut.SetScopes(input.Scopes)
	}
	if input.AppendScopes != nil {
		mut.AppendScopes(input.AppendScopes)
	}
	if input.ClearScopes {
		mut.ClearScopes()
	}

	if input.AddRoleIDs != nil {
		mut.AddRoleIDs(input.AddRoleIDs...)
	}
	if input.RemoveRoleIDs != nil {
		mut.RemoveRoleIDs(input.RemoveRoleIDs...)
	}
	if input.ClearRoles {
		mut.ClearRoles()
	}

	user, err := mut.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update user: %w", err)
	}
	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id objects.GUID) (bool, error) {
	err := r.client.User.DeleteOneID(id.ID).Exec(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to delete user: %w", err)
	}
	return true, nil
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input ent.CreateRoleInput) (*ent.Role, error) {
	role, err := r.client.Role.Create().
		SetCode(input.Code).
		SetName(input.Name).
		SetScopes(input.Scopes).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create role: %w", err)
	}
	return role, nil
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id objects.GUID, input ent.UpdateRoleInput) (*ent.Role, error) {
	mut := r.client.Role.UpdateOneID(id.ID).
		SetNillableName(input.Name)
	if input.Scopes != nil {
		mut.SetScopes(input.Scopes)
	}
	role, err := mut.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update role: %w", err)
	}
	return role, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input SignInInput) (*SignInPayload, error) {
	// Authenticate user
	user, err := r.authService.AuthenticateUser(ctx, input.Email, input.Password)
	if err != nil {
		return nil, err
	}

	// Generate JWT token
	token, err := r.authService.GenerateJWTToken(ctx, user)
	if err != nil {
		return nil, err
	}

	return &SignInPayload{
		User:  user,
		Token: token,
	}, nil
}

// InitializeSystem is the resolver for the initializeSystem field.
func (r *mutationResolver) InitializeSystem(ctx context.Context, input InitializeSystemInput) (*InitializeSystemPayload, error) {
	// Check if system is already initialized
	isInitialized, err := r.systemService.IsInitialized(ctx)
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to check initialization status: %v", err),
		}, nil
	}

	if isInitialized {
		return &InitializeSystemPayload{
			Success: false,
			Message: "System is already initialized",
		}, nil
	}

	err = r.systemService.Initialize(ctx, &biz.InitializeSystemArgs{
		OwnerEmail:    input.OwnerEmail,
		OwnerPassword: input.OwnerPassword,
	})
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to initialize system: %v", err),
		}, nil
	}

	// Generate JWT token for the owner
	token, err := r.SignIn(ctx, SignInInput{
		Email:    input.OwnerEmail,
		Password: input.OwnerPassword,
	})
	if err != nil {
		return &InitializeSystemPayload{
			Success: false,
			Message: fmt.Sprintf("Failed to generate token: %v", err),
		}, nil
	}

	return &InitializeSystemPayload{
		Success: true,
		Message: "System initialized successfully",
		User:    token.User,
		Token:   &token.Token,
	}, nil
}

// SystemStatus is the resolver for the systemStatus field.
func (r *queryResolver) SystemStatus(ctx context.Context) (*SystemStatus, error) {
	isInitialized, err := r.systemService.IsInitialized(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to check initialization status: %w", err)
	}

	return &SystemStatus{
		IsInitialized: isInitialized,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*UserInfo, error) {
	// Get current user from context
	user, ok := contexts.GetUser(ctx)
	if !ok || user == nil {
		return nil, fmt.Errorf("user not found in context")
	}

	roles, err := user.QueryRoles().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to load user roles: %w", err)
	}

	// Convert ent.Role to RoleInfo
	userRoles := make([]*RoleInfo, len(roles))
	for i, role := range roles {
		userRoles[i] = &RoleInfo{
			ID:   fmt.Sprintf("%d", role.ID),
			Name: role.Name,
		}
	}

	// Calculate all scopes (user scopes + role scopes)
	allScopes := make(map[string]bool)

	// Add user's direct scopes
	for _, scope := range user.Scopes {
		allScopes[scope] = true
	}

	// Add scopes from all roles
	for _, role := range roles {
		for _, scope := range role.Scopes {
			allScopes[scope] = true
		}
	}

	// Convert map to slice
	scopesList := make([]string, 0, len(allScopes))
	for scope := range allScopes {
		scopesList = append(scopesList, scope)
	}

	return &UserInfo{
		Email:     user.Email,
		FirstName: user.FirstName,
		LastName:  user.LastName,
		IsOwner:   user.IsOwner,
		Scopes:    scopesList,
		Roles:     userRoles,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
