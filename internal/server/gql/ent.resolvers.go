package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76-dev

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/looplj/axonhub/internal/ent"
	"github.com/looplj/axonhub/internal/objects"
)

// ID is the resolver for the id field.
func (r *aPIKeyResolver) ID(ctx context.Context, obj *ent.APIKey) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "APIKey",
		ID:   obj.ID,
	}, nil
}

// UserID is the resolver for the userID field.
func (r *aPIKeyResolver) UserID(ctx context.Context, obj *ent.APIKey) (*objects.GUID, error) {
	panic(fmt.Errorf("not implemented: UserID - userID"))
}

// ID is the resolver for the id field.
func (r *channelResolver) ID(ctx context.Context, obj *ent.Channel) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Channel",
		ID:   obj.ID,
	}, nil
}

// ID is the resolver for the id field.
func (r *jobResolver) ID(ctx context.Context, obj *ent.Job) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Job",
		ID:   obj.ID,
	}, nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id objects.GUID) (ent.Noder, error) {
	nodeType, ok := guidTypeToNodeType[id.Type]
	if !ok {
		return nil, fmt.Errorf("invalid type: %s", id.Type)
	}

	return r.client.Noder(ctx, id.ID, ent.WithFixedNodeType(nodeType))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []*objects.GUID) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// APIKeys is the resolver for the apiKeys field.
func (r *queryResolver) APIKeys(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.APIKeyOrder, where *ent.APIKeyWhereInput) (*ent.APIKeyConnection, error) {
	return r.client.APIKey.Query().Paginate(ctx, after, first, before, last,
		ent.WithAPIKeyOrder(orderBy),
		ent.WithAPIKeyFilter(where.Filter),
	)
}

// Channels is the resolver for the channels field.
func (r *queryResolver) Channels(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.ChannelOrder, where *ent.ChannelWhereInput) (*ent.ChannelConnection, error) {
	return r.client.Channel.Query().Paginate(ctx, after, first, before, last,
		ent.WithChannelOrder(orderBy),
		ent.WithChannelFilter(where.Filter),
	)
}

// Requests is the resolver for the requests field.
func (r *queryResolver) Requests(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.RequestOrder, where *ent.RequestWhereInput) (*ent.RequestConnection, error) {
	return r.client.Request.Query().Paginate(ctx, after, first, before, last,
		ent.WithRequestOrder(orderBy),
		ent.WithRequestFilter(where.Filter),
	)
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.RoleOrder, where *ent.RoleWhereInput) (*ent.RoleConnection, error) {
	return r.client.Role.Query().Paginate(ctx, after, first, before, last,
		ent.WithRoleOrder(orderBy),
		ent.WithRoleFilter(where.Filter),
	)
}

// Systems is the resolver for the systems field.
func (r *queryResolver) Systems(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.SystemOrder, where *ent.SystemWhereInput) (*ent.SystemConnection, error) {
	panic(fmt.Errorf("not implemented: Systems - systems"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().Paginate(ctx, after, first, before, last,
		ent.WithUserOrder(orderBy),
		ent.WithUserFilter(where.Filter),
	)
}

// ID is the resolver for the id field.
func (r *requestResolver) ID(ctx context.Context, obj *ent.Request) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Request",
		ID:   obj.ID,
	}, nil
}

// UserID is the resolver for the userID field.
func (r *requestResolver) UserID(ctx context.Context, obj *ent.Request) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "User",
		ID:   obj.UserID,
	}, nil
}

// APIKeyID is the resolver for the apiKeyID field.
func (r *requestResolver) APIKeyID(ctx context.Context, obj *ent.Request) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "APIKey",
		ID:   obj.APIKeyID,
	}, nil
}

// ID is the resolver for the id field.
func (r *requestExecutionResolver) ID(ctx context.Context, obj *ent.RequestExecution) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "RequestExecution",
		ID:   obj.ID,
	}, nil
}

// RequestID is the resolver for the requestID field.
func (r *requestExecutionResolver) RequestID(ctx context.Context, obj *ent.RequestExecution) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Request",
		ID:   obj.RequestID,
	}, nil
}

// ChannelID is the resolver for the channelID field.
func (r *requestExecutionResolver) ChannelID(ctx context.Context, obj *ent.RequestExecution) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Channel",
		ID:   obj.ChannelID,
	}, nil
}

// ID is the resolver for the id field.
func (r *roleResolver) ID(ctx context.Context, obj *ent.Role) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "Role",
		ID:   obj.ID,
	}, nil
}

// ID is the resolver for the id field.
func (r *systemResolver) ID(ctx context.Context, obj *ent.System) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "System",
		ID:   obj.ID,
	}, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (*objects.GUID, error) {
	return &objects.GUID{
		Type: "User",
		ID:   obj.ID,
	}, nil
}

// APIKey returns APIKeyResolver implementation.
func (r *Resolver) APIKey() APIKeyResolver { return &aPIKeyResolver{r} }

// Channel returns ChannelResolver implementation.
func (r *Resolver) Channel() ChannelResolver { return &channelResolver{r} }

// Job returns JobResolver implementation.
func (r *Resolver) Job() JobResolver { return &jobResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Request returns RequestResolver implementation.
func (r *Resolver) Request() RequestResolver { return &requestResolver{r} }

// RequestExecution returns RequestExecutionResolver implementation.
func (r *Resolver) RequestExecution() RequestExecutionResolver { return &requestExecutionResolver{r} }

// Role returns RoleResolver implementation.
func (r *Resolver) Role() RoleResolver { return &roleResolver{r} }

// System returns SystemResolver implementation.
func (r *Resolver) System() SystemResolver { return &systemResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type aPIKeyResolver struct{ *Resolver }
type channelResolver struct{ *Resolver }
type jobResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type requestResolver struct{ *Resolver }
type requestExecutionResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type systemResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
